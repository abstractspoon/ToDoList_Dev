//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\dotnet-projects\\ReoScript\\ReoScript.g 2013-10-23 12:00:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace unvell.ReoScript
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
sealed internal partial class ReoScriptLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int AND=4;
	public const int ANONYMOUS_FUNCTION=5;
	public const int ARGUMENT_LIST=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_LITERAL=8;
	public const int ASSIGNMENT=9;
	public const int ASSIGN_AND=10;
	public const int ASSIGN_DIV=11;
	public const int ASSIGN_LSHIFT=12;
	public const int ASSIGN_MINUS=13;
	public const int ASSIGN_MUL=14;
	public const int ASSIGN_OR=15;
	public const int ASSIGN_PLUS=16;
	public const int ASSIGN_REM=17;
	public const int ASSIGN_REV=18;
	public const int ASSIGN_RSHIFT=19;
	public const int BINARY_LITERATE=20;
	public const int BLOCK=21;
	public const int BREAK=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMBINE_OBJECT=25;
	public const int COMMA=26;
	public const int COMMENT=27;
	public const int CONDITION=28;
	public const int CONST_VALUE=29;
	public const int CONTINUE=30;
	public const int CREATE=31;
	public const int DECLARATION=32;
	public const int DECREMENT=33;
	public const int DELETE_PROP=34;
	public const int DIV=35;
	public const int DOT=36;
	public const int ELSE=37;
	public const int EQUALS=38;
	public const int ESCAPE_SEQUENCE=39;
	public const int FOREACH_STATEMENT=40;
	public const int FOR_BODY=41;
	public const int FOR_CONDITION=42;
	public const int FOR_INIT=43;
	public const int FOR_ITERATOR=44;
	public const int FOR_STATEMENT=45;
	public const int FUNCTION_CALL=46;
	public const int FUNCTION_DEFINE=47;
	public const int FUN_BODY=48;
	public const int GREAT_EQUALS=49;
	public const int GREAT_THAN=50;
	public const int HEX_LITERATE=51;
	public const int IDENTIFIER=52;
	public const int IF_STATEMENT=53;
	public const int IMPORT=54;
	public const int INCREMENT=55;
	public const int INSTANCEOF=56;
	public const int INTERNAL=57;
	public const int LAMBDA_FUNCTION=58;
	public const int LBRACE=59;
	public const int LCURLY=60;
	public const int LESS_EQUALS=61;
	public const int LESS_THAN=62;
	public const int LINE_COMMENT=63;
	public const int LIT_FALSE=64;
	public const int LIT_NULL=65;
	public const int LIT_TRUE=66;
	public const int LOCAL_DECLARE_ASSIGNMENT=67;
	public const int LOGICAL_AND=68;
	public const int LOGICAL_OR=69;
	public const int LPAREN=70;
	public const int LSHIFT=71;
	public const int MEMBER_DECLARATION=72;
	public const int MEMBER_MODIFIER=73;
	public const int MINUS=74;
	public const int MOD=75;
	public const int MUL=76;
	public const int NAN=77;
	public const int NEWLINE=78;
	public const int NOT=79;
	public const int NOT_EQUALS=80;
	public const int NUMBER_LITERATE=81;
	public const int OBJECT_LITERAL=82;
	public const int OR=83;
	public const int PARAMETER_DEFINES=84;
	public const int PLUS=85;
	public const int POST_UNARY_STEP=86;
	public const int PRE_UNARY=87;
	public const int PRE_UNARY_STEP=88;
	public const int PRIVATE=89;
	public const int PROPERTY_ACCESS=90;
	public const int PROTECTED=91;
	public const int PUBLIC=92;
	public const int RANGE_LITERAL=93;
	public const int RBRACE=94;
	public const int RCURLY=95;
	public const int RETURN=96;
	public const int RPAREN=97;
	public const int RSHIFT=98;
	public const int SEMI=99;
	public const int STRICT_EQUALS=100;
	public const int STRICT_NOT_EQUALS=101;
	public const int STRING_LITERATE=102;
	public const int SWITCH=103;
	public const int SWITCH_CASE=104;
	public const int SWITCH_CASE_ELSE=105;
	public const int TAG=106;
	public const int TAG_ATTR=107;
	public const int TAG_ATTR_LIST=108;
	public const int TAG_NAME=109;
	public const int TEMPLATE_DEFINE=110;
	public const int TEMPLATE_TAG=111;
	public const int THIS=112;
	public const int TRY_CATCH=113;
	public const int TRY_CATCH_CASE=114;
	public const int TRY_CATCH_FINAL=115;
	public const int TRY_CATCH_TRHOW=116;
	public const int TYPE=117;
	public const int TYPEOF=118;
	public const int UNDEFINED=119;
	public const int WHILE_STATEMENT=120;
	public const int WS=121;
	public const int XOR=122;

    // delegates
    // delegators

	public ReoScriptLexer()
	{
		OnCreated();
	}

	public ReoScriptLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ReoScriptLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "E:\\dotnet-projects\\ReoScript\\ReoScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:11:5: ( '&' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:11:7: '&'
			{
			DebugLocation(11, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 2);
		TraceIn("DIV", 2);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:12:5: ( '/' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:12:7: '/'
			{
			DebugLocation(12, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 2);
			LeaveRule("DIV", 2);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 3);
		TraceIn("EQUALS", 3);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:13:8: ( '==' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:13:10: '=='
			{
			DebugLocation(13, 10);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 3);
			LeaveRule("EQUALS", 3);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_GREAT_EQUALS();
	partial void LeaveRule_GREAT_EQUALS();

	// $ANTLR start "GREAT_EQUALS"
	[GrammarRule("GREAT_EQUALS")]
	private void mGREAT_EQUALS()
	{
		EnterRule_GREAT_EQUALS();
		EnterRule("GREAT_EQUALS", 4);
		TraceIn("GREAT_EQUALS", 4);
		try
		{
			int _type = GREAT_EQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:14:14: ( '>=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:14:16: '>='
			{
			DebugLocation(14, 16);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREAT_EQUALS", 4);
			LeaveRule("GREAT_EQUALS", 4);
			LeaveRule_GREAT_EQUALS();
		}
	}
	// $ANTLR end "GREAT_EQUALS"

	partial void EnterRule_GREAT_THAN();
	partial void LeaveRule_GREAT_THAN();

	// $ANTLR start "GREAT_THAN"
	[GrammarRule("GREAT_THAN")]
	private void mGREAT_THAN()
	{
		EnterRule_GREAT_THAN();
		EnterRule("GREAT_THAN", 5);
		TraceIn("GREAT_THAN", 5);
		try
		{
			int _type = GREAT_THAN;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:15:12: ( '>' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:15:14: '>'
			{
			DebugLocation(15, 14);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREAT_THAN", 5);
			LeaveRule("GREAT_THAN", 5);
			LeaveRule_GREAT_THAN();
		}
	}
	// $ANTLR end "GREAT_THAN"

	partial void EnterRule_LESS_EQUALS();
	partial void LeaveRule_LESS_EQUALS();

	// $ANTLR start "LESS_EQUALS"
	[GrammarRule("LESS_EQUALS")]
	private void mLESS_EQUALS()
	{
		EnterRule_LESS_EQUALS();
		EnterRule("LESS_EQUALS", 6);
		TraceIn("LESS_EQUALS", 6);
		try
		{
			int _type = LESS_EQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:16:13: ( '<=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:16:15: '<='
			{
			DebugLocation(16, 15);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_EQUALS", 6);
			LeaveRule("LESS_EQUALS", 6);
			LeaveRule_LESS_EQUALS();
		}
	}
	// $ANTLR end "LESS_EQUALS"

	partial void EnterRule_LESS_THAN();
	partial void LeaveRule_LESS_THAN();

	// $ANTLR start "LESS_THAN"
	[GrammarRule("LESS_THAN")]
	private void mLESS_THAN()
	{
		EnterRule_LESS_THAN();
		EnterRule("LESS_THAN", 7);
		TraceIn("LESS_THAN", 7);
		try
		{
			int _type = LESS_THAN;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:17:11: ( '<' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:17:13: '<'
			{
			DebugLocation(17, 13);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_THAN", 7);
			LeaveRule("LESS_THAN", 7);
			LeaveRule_LESS_THAN();
		}
	}
	// $ANTLR end "LESS_THAN"

	partial void EnterRule_LOGICAL_AND();
	partial void LeaveRule_LOGICAL_AND();

	// $ANTLR start "LOGICAL_AND"
	[GrammarRule("LOGICAL_AND")]
	private void mLOGICAL_AND()
	{
		EnterRule_LOGICAL_AND();
		EnterRule("LOGICAL_AND", 8);
		TraceIn("LOGICAL_AND", 8);
		try
		{
			int _type = LOGICAL_AND;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:18:13: ( '&&' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:18:15: '&&'
			{
			DebugLocation(18, 15);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGICAL_AND", 8);
			LeaveRule("LOGICAL_AND", 8);
			LeaveRule_LOGICAL_AND();
		}
	}
	// $ANTLR end "LOGICAL_AND"

	partial void EnterRule_LOGICAL_OR();
	partial void LeaveRule_LOGICAL_OR();

	// $ANTLR start "LOGICAL_OR"
	[GrammarRule("LOGICAL_OR")]
	private void mLOGICAL_OR()
	{
		EnterRule_LOGICAL_OR();
		EnterRule("LOGICAL_OR", 9);
		TraceIn("LOGICAL_OR", 9);
		try
		{
			int _type = LOGICAL_OR;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:19:12: ( '||' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:19:14: '||'
			{
			DebugLocation(19, 14);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOGICAL_OR", 9);
			LeaveRule("LOGICAL_OR", 9);
			LeaveRule_LOGICAL_OR();
		}
	}
	// $ANTLR end "LOGICAL_OR"

	partial void EnterRule_LSHIFT();
	partial void LeaveRule_LSHIFT();

	// $ANTLR start "LSHIFT"
	[GrammarRule("LSHIFT")]
	private void mLSHIFT()
	{
		EnterRule_LSHIFT();
		EnterRule("LSHIFT", 10);
		TraceIn("LSHIFT", 10);
		try
		{
			int _type = LSHIFT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:20:8: ( '<<' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:20:10: '<<'
			{
			DebugLocation(20, 10);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LSHIFT", 10);
			LeaveRule("LSHIFT", 10);
			LeaveRule_LSHIFT();
		}
	}
	// $ANTLR end "LSHIFT"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 11);
		TraceIn("MINUS", 11);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:21:7: ( '-' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:21:9: '-'
			{
			DebugLocation(21, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 11);
			LeaveRule("MINUS", 11);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 12);
		TraceIn("MOD", 12);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:22:5: ( '%' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:22:7: '%'
			{
			DebugLocation(22, 7);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 12);
			LeaveRule("MOD", 12);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 13);
		TraceIn("MUL", 13);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:23:5: ( '*' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:23:7: '*'
			{
			DebugLocation(23, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 13);
			LeaveRule("MUL", 13);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_NOT_EQUALS();
	partial void LeaveRule_NOT_EQUALS();

	// $ANTLR start "NOT_EQUALS"
	[GrammarRule("NOT_EQUALS")]
	private void mNOT_EQUALS()
	{
		EnterRule_NOT_EQUALS();
		EnterRule("NOT_EQUALS", 14);
		TraceIn("NOT_EQUALS", 14);
		try
		{
			int _type = NOT_EQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:24:12: ( '!=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:24:14: '!='
			{
			DebugLocation(24, 14);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUALS", 14);
			LeaveRule("NOT_EQUALS", 14);
			LeaveRule_NOT_EQUALS();
		}
	}
	// $ANTLR end "NOT_EQUALS"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 15);
		TraceIn("OR", 15);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:25:4: ( '|' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:25:6: '|'
			{
			DebugLocation(25, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 15);
			LeaveRule("OR", 15);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 16);
		TraceIn("PLUS", 16);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:26:6: ( '+' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:26:8: '+'
			{
			DebugLocation(26, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 16);
			LeaveRule("PLUS", 16);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_RSHIFT();
	partial void LeaveRule_RSHIFT();

	// $ANTLR start "RSHIFT"
	[GrammarRule("RSHIFT")]
	private void mRSHIFT()
	{
		EnterRule_RSHIFT();
		EnterRule("RSHIFT", 17);
		TraceIn("RSHIFT", 17);
		try
		{
			int _type = RSHIFT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:27:8: ( '>>' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:27:10: '>>'
			{
			DebugLocation(27, 10);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RSHIFT", 17);
			LeaveRule("RSHIFT", 17);
			LeaveRule_RSHIFT();
		}
	}
	// $ANTLR end "RSHIFT"

	partial void EnterRule_STRICT_EQUALS();
	partial void LeaveRule_STRICT_EQUALS();

	// $ANTLR start "STRICT_EQUALS"
	[GrammarRule("STRICT_EQUALS")]
	private void mSTRICT_EQUALS()
	{
		EnterRule_STRICT_EQUALS();
		EnterRule("STRICT_EQUALS", 18);
		TraceIn("STRICT_EQUALS", 18);
		try
		{
			int _type = STRICT_EQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:28:15: ( '===' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:28:17: '==='
			{
			DebugLocation(28, 17);
			Match("==="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRICT_EQUALS", 18);
			LeaveRule("STRICT_EQUALS", 18);
			LeaveRule_STRICT_EQUALS();
		}
	}
	// $ANTLR end "STRICT_EQUALS"

	partial void EnterRule_STRICT_NOT_EQUALS();
	partial void LeaveRule_STRICT_NOT_EQUALS();

	// $ANTLR start "STRICT_NOT_EQUALS"
	[GrammarRule("STRICT_NOT_EQUALS")]
	private void mSTRICT_NOT_EQUALS()
	{
		EnterRule_STRICT_NOT_EQUALS();
		EnterRule("STRICT_NOT_EQUALS", 19);
		TraceIn("STRICT_NOT_EQUALS", 19);
		try
		{
			int _type = STRICT_NOT_EQUALS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:29:19: ( '!==' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:29:21: '!=='
			{
			DebugLocation(29, 21);
			Match("!=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRICT_NOT_EQUALS", 19);
			LeaveRule("STRICT_NOT_EQUALS", 19);
			LeaveRule_STRICT_NOT_EQUALS();
		}
	}
	// $ANTLR end "STRICT_NOT_EQUALS"

	partial void EnterRule_XOR();
	partial void LeaveRule_XOR();

	// $ANTLR start "XOR"
	[GrammarRule("XOR")]
	private void mXOR()
	{
		EnterRule_XOR();
		EnterRule("XOR", 20);
		TraceIn("XOR", 20);
		try
		{
			int _type = XOR;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:30:5: ( '^' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:30:7: '^'
			{
			DebugLocation(30, 7);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("XOR", 20);
			LeaveRule("XOR", 20);
			LeaveRule_XOR();
		}
	}
	// $ANTLR end "XOR"

	partial void EnterRule_T__123();
	partial void LeaveRule_T__123();

	// $ANTLR start "T__123"
	[GrammarRule("T__123")]
	private void mT__123()
	{
		EnterRule_T__123();
		EnterRule("T__123", 21);
		TraceIn("T__123", 21);
		try
		{
			int _type = T__123;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:31:8: ( '/>' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:31:10: '/>'
			{
			DebugLocation(31, 10);
			Match("/>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__123", 21);
			LeaveRule("T__123", 21);
			LeaveRule_T__123();
		}
	}
	// $ANTLR end "T__123"

	partial void EnterRule_T__124();
	partial void LeaveRule_T__124();

	// $ANTLR start "T__124"
	[GrammarRule("T__124")]
	private void mT__124()
	{
		EnterRule_T__124();
		EnterRule("T__124", 22);
		TraceIn("T__124", 22);
		try
		{
			int _type = T__124;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:32:8: ( '</' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:32:10: '</'
			{
			DebugLocation(32, 10);
			Match("</"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__124", 22);
			LeaveRule("T__124", 22);
			LeaveRule_T__124();
		}
	}
	// $ANTLR end "T__124"

	partial void EnterRule_T__125();
	partial void LeaveRule_T__125();

	// $ANTLR start "T__125"
	[GrammarRule("T__125")]
	private void mT__125()
	{
		EnterRule_T__125();
		EnterRule("T__125", 23);
		TraceIn("T__125", 23);
		try
		{
			int _type = T__125;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:33:8: ( '=>' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:33:10: '=>'
			{
			DebugLocation(33, 10);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__125", 23);
			LeaveRule("T__125", 23);
			LeaveRule_T__125();
		}
	}
	// $ANTLR end "T__125"

	partial void EnterRule_T__126();
	partial void LeaveRule_T__126();

	// $ANTLR start "T__126"
	[GrammarRule("T__126")]
	private void mT__126()
	{
		EnterRule_T__126();
		EnterRule("T__126", 24);
		TraceIn("T__126", 24);
		try
		{
			int _type = T__126;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:34:8: ( 'break' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:34:10: 'break'
			{
			DebugLocation(34, 10);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__126", 24);
			LeaveRule("T__126", 24);
			LeaveRule_T__126();
		}
	}
	// $ANTLR end "T__126"

	partial void EnterRule_T__127();
	partial void LeaveRule_T__127();

	// $ANTLR start "T__127"
	[GrammarRule("T__127")]
	private void mT__127()
	{
		EnterRule_T__127();
		EnterRule("T__127", 25);
		TraceIn("T__127", 25);
		try
		{
			int _type = T__127;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:35:8: ( 'case' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:35:10: 'case'
			{
			DebugLocation(35, 10);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__127", 25);
			LeaveRule("T__127", 25);
			LeaveRule_T__127();
		}
	}
	// $ANTLR end "T__127"

	partial void EnterRule_T__128();
	partial void LeaveRule_T__128();

	// $ANTLR start "T__128"
	[GrammarRule("T__128")]
	private void mT__128()
	{
		EnterRule_T__128();
		EnterRule("T__128", 26);
		TraceIn("T__128", 26);
		try
		{
			int _type = T__128;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:36:8: ( 'catch' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:36:10: 'catch'
			{
			DebugLocation(36, 10);
			Match("catch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__128", 26);
			LeaveRule("T__128", 26);
			LeaveRule_T__128();
		}
	}
	// $ANTLR end "T__128"

	partial void EnterRule_T__129();
	partial void LeaveRule_T__129();

	// $ANTLR start "T__129"
	[GrammarRule("T__129")]
	private void mT__129()
	{
		EnterRule_T__129();
		EnterRule("T__129", 27);
		TraceIn("T__129", 27);
		try
		{
			int _type = T__129;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:37:8: ( 'continue' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:37:10: 'continue'
			{
			DebugLocation(37, 10);
			Match("continue"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__129", 27);
			LeaveRule("T__129", 27);
			LeaveRule_T__129();
		}
	}
	// $ANTLR end "T__129"

	partial void EnterRule_T__130();
	partial void LeaveRule_T__130();

	// $ANTLR start "T__130"
	[GrammarRule("T__130")]
	private void mT__130()
	{
		EnterRule_T__130();
		EnterRule("T__130", 28);
		TraceIn("T__130", 28);
		try
		{
			int _type = T__130;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:38:8: ( 'default' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:38:10: 'default'
			{
			DebugLocation(38, 10);
			Match("default"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__130", 28);
			LeaveRule("T__130", 28);
			LeaveRule_T__130();
		}
	}
	// $ANTLR end "T__130"

	partial void EnterRule_T__131();
	partial void LeaveRule_T__131();

	// $ANTLR start "T__131"
	[GrammarRule("T__131")]
	private void mT__131()
	{
		EnterRule_T__131();
		EnterRule("T__131", 29);
		TraceIn("T__131", 29);
		try
		{
			int _type = T__131;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:39:8: ( 'delete' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:39:10: 'delete'
			{
			DebugLocation(39, 10);
			Match("delete"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__131", 29);
			LeaveRule("T__131", 29);
			LeaveRule_T__131();
		}
	}
	// $ANTLR end "T__131"

	partial void EnterRule_T__132();
	partial void LeaveRule_T__132();

	// $ANTLR start "T__132"
	[GrammarRule("T__132")]
	private void mT__132()
	{
		EnterRule_T__132();
		EnterRule("T__132", 30);
		TraceIn("T__132", 30);
		try
		{
			int _type = T__132;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:40:8: ( 'finally' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:40:10: 'finally'
			{
			DebugLocation(40, 10);
			Match("finally"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__132", 30);
			LeaveRule("T__132", 30);
			LeaveRule_T__132();
		}
	}
	// $ANTLR end "T__132"

	partial void EnterRule_T__133();
	partial void LeaveRule_T__133();

	// $ANTLR start "T__133"
	[GrammarRule("T__133")]
	private void mT__133()
	{
		EnterRule_T__133();
		EnterRule("T__133", 31);
		TraceIn("T__133", 31);
		try
		{
			int _type = T__133;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:41:8: ( 'for' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:41:10: 'for'
			{
			DebugLocation(41, 10);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__133", 31);
			LeaveRule("T__133", 31);
			LeaveRule_T__133();
		}
	}
	// $ANTLR end "T__133"

	partial void EnterRule_T__134();
	partial void LeaveRule_T__134();

	// $ANTLR start "T__134"
	[GrammarRule("T__134")]
	private void mT__134()
	{
		EnterRule_T__134();
		EnterRule("T__134", 32);
		TraceIn("T__134", 32);
		try
		{
			int _type = T__134;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:42:8: ( 'function' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:42:10: 'function'
			{
			DebugLocation(42, 10);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__134", 32);
			LeaveRule("T__134", 32);
			LeaveRule_T__134();
		}
	}
	// $ANTLR end "T__134"

	partial void EnterRule_T__135();
	partial void LeaveRule_T__135();

	// $ANTLR start "T__135"
	[GrammarRule("T__135")]
	private void mT__135()
	{
		EnterRule_T__135();
		EnterRule("T__135", 33);
		TraceIn("T__135", 33);
		try
		{
			int _type = T__135;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:43:8: ( 'if' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:43:10: 'if'
			{
			DebugLocation(43, 10);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__135", 33);
			LeaveRule("T__135", 33);
			LeaveRule_T__135();
		}
	}
	// $ANTLR end "T__135"

	partial void EnterRule_T__136();
	partial void LeaveRule_T__136();

	// $ANTLR start "T__136"
	[GrammarRule("T__136")]
	private void mT__136()
	{
		EnterRule_T__136();
		EnterRule("T__136", 34);
		TraceIn("T__136", 34);
		try
		{
			int _type = T__136;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:44:8: ( 'import' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:44:10: 'import'
			{
			DebugLocation(44, 10);
			Match("import"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__136", 34);
			LeaveRule("T__136", 34);
			LeaveRule_T__136();
		}
	}
	// $ANTLR end "T__136"

	partial void EnterRule_T__137();
	partial void LeaveRule_T__137();

	// $ANTLR start "T__137"
	[GrammarRule("T__137")]
	private void mT__137()
	{
		EnterRule_T__137();
		EnterRule("T__137", 35);
		TraceIn("T__137", 35);
		try
		{
			int _type = T__137;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:45:8: ( 'in' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:45:10: 'in'
			{
			DebugLocation(45, 10);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__137", 35);
			LeaveRule("T__137", 35);
			LeaveRule_T__137();
		}
	}
	// $ANTLR end "T__137"

	partial void EnterRule_T__138();
	partial void LeaveRule_T__138();

	// $ANTLR start "T__138"
	[GrammarRule("T__138")]
	private void mT__138()
	{
		EnterRule_T__138();
		EnterRule("T__138", 36);
		TraceIn("T__138", 36);
		try
		{
			int _type = T__138;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:46:8: ( 'new' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:46:10: 'new'
			{
			DebugLocation(46, 10);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__138", 36);
			LeaveRule("T__138", 36);
			LeaveRule_T__138();
		}
	}
	// $ANTLR end "T__138"

	partial void EnterRule_T__139();
	partial void LeaveRule_T__139();

	// $ANTLR start "T__139"
	[GrammarRule("T__139")]
	private void mT__139()
	{
		EnterRule_T__139();
		EnterRule("T__139", 37);
		TraceIn("T__139", 37);
		try
		{
			int _type = T__139;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:47:8: ( 'return' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:47:10: 'return'
			{
			DebugLocation(47, 10);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__139", 37);
			LeaveRule("T__139", 37);
			LeaveRule_T__139();
		}
	}
	// $ANTLR end "T__139"

	partial void EnterRule_T__140();
	partial void LeaveRule_T__140();

	// $ANTLR start "T__140"
	[GrammarRule("T__140")]
	private void mT__140()
	{
		EnterRule_T__140();
		EnterRule("T__140", 38);
		TraceIn("T__140", 38);
		try
		{
			int _type = T__140;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:48:8: ( 'switch' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:48:10: 'switch'
			{
			DebugLocation(48, 10);
			Match("switch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__140", 38);
			LeaveRule("T__140", 38);
			LeaveRule_T__140();
		}
	}
	// $ANTLR end "T__140"

	partial void EnterRule_T__141();
	partial void LeaveRule_T__141();

	// $ANTLR start "T__141"
	[GrammarRule("T__141")]
	private void mT__141()
	{
		EnterRule_T__141();
		EnterRule("T__141", 39);
		TraceIn("T__141", 39);
		try
		{
			int _type = T__141;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:49:8: ( 'template' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:49:10: 'template'
			{
			DebugLocation(49, 10);
			Match("template"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__141", 39);
			LeaveRule("T__141", 39);
			LeaveRule_T__141();
		}
	}
	// $ANTLR end "T__141"

	partial void EnterRule_T__142();
	partial void LeaveRule_T__142();

	// $ANTLR start "T__142"
	[GrammarRule("T__142")]
	private void mT__142()
	{
		EnterRule_T__142();
		EnterRule("T__142", 40);
		TraceIn("T__142", 40);
		try
		{
			int _type = T__142;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:50:8: ( 'throw' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:50:10: 'throw'
			{
			DebugLocation(50, 10);
			Match("throw"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__142", 40);
			LeaveRule("T__142", 40);
			LeaveRule_T__142();
		}
	}
	// $ANTLR end "T__142"

	partial void EnterRule_T__143();
	partial void LeaveRule_T__143();

	// $ANTLR start "T__143"
	[GrammarRule("T__143")]
	private void mT__143()
	{
		EnterRule_T__143();
		EnterRule("T__143", 41);
		TraceIn("T__143", 41);
		try
		{
			int _type = T__143;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:51:8: ( 'try' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:51:10: 'try'
			{
			DebugLocation(51, 10);
			Match("try"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__143", 41);
			LeaveRule("T__143", 41);
			LeaveRule_T__143();
		}
	}
	// $ANTLR end "T__143"

	partial void EnterRule_T__144();
	partial void LeaveRule_T__144();

	// $ANTLR start "T__144"
	[GrammarRule("T__144")]
	private void mT__144()
	{
		EnterRule_T__144();
		EnterRule("T__144", 42);
		TraceIn("T__144", 42);
		try
		{
			int _type = T__144;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:52:8: ( 'typeof' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:52:10: 'typeof'
			{
			DebugLocation(52, 10);
			Match("typeof"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__144", 42);
			LeaveRule("T__144", 42);
			LeaveRule_T__144();
		}
	}
	// $ANTLR end "T__144"

	partial void EnterRule_T__145();
	partial void LeaveRule_T__145();

	// $ANTLR start "T__145"
	[GrammarRule("T__145")]
	private void mT__145()
	{
		EnterRule_T__145();
		EnterRule("T__145", 43);
		TraceIn("T__145", 43);
		try
		{
			int _type = T__145;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:53:8: ( 'while' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:53:10: 'while'
			{
			DebugLocation(53, 10);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__145", 43);
			LeaveRule("T__145", 43);
			LeaveRule_T__145();
		}
	}
	// $ANTLR end "T__145"

	partial void EnterRule_T__146();
	partial void LeaveRule_T__146();

	// $ANTLR start "T__146"
	[GrammarRule("T__146")]
	private void mT__146()
	{
		EnterRule_T__146();
		EnterRule("T__146", 44);
		TraceIn("T__146", 44);
		try
		{
			int _type = T__146;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:54:8: ( '~' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:54:10: '~'
			{
			DebugLocation(54, 10);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__146", 44);
			LeaveRule("T__146", 44);
			LeaveRule_T__146();
		}
	}
	// $ANTLR end "T__146"

	partial void EnterRule_NUMBER_LITERATE();
	partial void LeaveRule_NUMBER_LITERATE();

	// $ANTLR start "NUMBER_LITERATE"
	[GrammarRule("NUMBER_LITERATE")]
	private void mNUMBER_LITERATE()
	{
		EnterRule_NUMBER_LITERATE();
		EnterRule("NUMBER_LITERATE", 45);
		TraceIn("NUMBER_LITERATE", 45);
		try
		{
			int _type = NUMBER_LITERATE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:514:2: ( ( ( '0' .. '9' )* '.' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:514:4: ( ( '0' .. '9' )* '.' )? ( '0' .. '9' )+
			{
			DebugLocation(514, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:514:4: ( ( '0' .. '9' )* '.' )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			try
			{
				alt2 = dfa2.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:514:5: ( '0' .. '9' )* '.'
				{
				DebugLocation(514, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:514:5: ( '0' .. '9' )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if (((LA1_0>='0' && LA1_0<='9')))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
						{
						DebugLocation(514, 5);
						input.Consume();


						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(514, 17);
				Match('.'); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(514, 23);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:514:23: ( '0' .. '9' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
					{
					DebugLocation(514, 23);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER_LITERATE", 45);
			LeaveRule("NUMBER_LITERATE", 45);
			LeaveRule_NUMBER_LITERATE();
		}
	}
	// $ANTLR end "NUMBER_LITERATE"

	partial void EnterRule_HEX_LITERATE();
	partial void LeaveRule_HEX_LITERATE();

	// $ANTLR start "HEX_LITERATE"
	[GrammarRule("HEX_LITERATE")]
	private void mHEX_LITERATE()
	{
		EnterRule_HEX_LITERATE();
		EnterRule("HEX_LITERATE", 46);
		TraceIn("HEX_LITERATE", 46);
		try
		{
			int _type = HEX_LITERATE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:518:2: ( '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:518:4: '0' 'x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			{
			DebugLocation(518, 4);
			Match('0'); 
			DebugLocation(518, 8);
			Match('x'); 
			DebugLocation(518, 12);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:518:12: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')||(LA4_0>='A' && LA4_0<='F')||(LA4_0>='a' && LA4_0<='f')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
					{
					DebugLocation(518, 12);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HEX_LITERATE", 46);
			LeaveRule("HEX_LITERATE", 46);
			LeaveRule_HEX_LITERATE();
		}
	}
	// $ANTLR end "HEX_LITERATE"

	partial void EnterRule_BINARY_LITERATE();
	partial void LeaveRule_BINARY_LITERATE();

	// $ANTLR start "BINARY_LITERATE"
	[GrammarRule("BINARY_LITERATE")]
	private void mBINARY_LITERATE()
	{
		EnterRule_BINARY_LITERATE();
		EnterRule("BINARY_LITERATE", 47);
		TraceIn("BINARY_LITERATE", 47);
		try
		{
			int _type = BINARY_LITERATE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:522:2: ( '0' 'b' ( '0' | '1' )+ )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:522:4: '0' 'b' ( '0' | '1' )+
			{
			DebugLocation(522, 4);
			Match('0'); 
			DebugLocation(522, 8);
			Match('b'); 
			DebugLocation(522, 12);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:522:12: ( '0' | '1' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='1')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
					{
					DebugLocation(522, 12);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BINARY_LITERATE", 47);
			LeaveRule("BINARY_LITERATE", 47);
			LeaveRule_BINARY_LITERATE();
		}
	}
	// $ANTLR end "BINARY_LITERATE"

	partial void EnterRule_STRING_LITERATE();
	partial void LeaveRule_STRING_LITERATE();

	// $ANTLR start "STRING_LITERATE"
	[GrammarRule("STRING_LITERATE")]
	private void mSTRING_LITERATE()
	{
		EnterRule_STRING_LITERATE();
		EnterRule("STRING_LITERATE", 48);
		TraceIn("STRING_LITERATE", 48);
		try
		{
			int _type = STRING_LITERATE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:526:2: ( '\"' (~ '\"' )* '\"' | '\\'' (~ '\\'' )* '\\'' )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0=='\"'))
			{
				alt8 = 1;
			}
			else if ((LA8_0=='\''))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:527:3: '\"' (~ '\"' )* '\"'
				{
				DebugLocation(527, 3);
				Match('\"'); 
				DebugLocation(527, 7);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:527:7: (~ '\"' )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='\u0000' && LA6_0<='!')||(LA6_0>='#' && LA6_0<='\uFFFF')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
						{
						DebugLocation(527, 7);
						input.Consume();


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(527, 13);
				Match('\"'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:528:4: '\\'' (~ '\\'' )* '\\''
				{
				DebugLocation(528, 4);
				Match('\''); 
				DebugLocation(528, 9);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:528:9: (~ '\\'' )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='\u0000' && LA7_0<='&')||(LA7_0>='(' && LA7_0<='\uFFFF')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
						{
						DebugLocation(528, 9);
						input.Consume();


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(528, 16);
				Match('\''); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERATE", 48);
			LeaveRule("STRING_LITERATE", 48);
			LeaveRule_STRING_LITERATE();
		}
	}
	// $ANTLR end "STRING_LITERATE"

	partial void EnterRule_ESCAPE_SEQUENCE();
	partial void LeaveRule_ESCAPE_SEQUENCE();

	// $ANTLR start "ESCAPE_SEQUENCE"
	[GrammarRule("ESCAPE_SEQUENCE")]
	private void mESCAPE_SEQUENCE()
	{
		EnterRule_ESCAPE_SEQUENCE();
		EnterRule("ESCAPE_SEQUENCE", 49);
		TraceIn("ESCAPE_SEQUENCE", 49);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:536:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:536:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
			{
			DebugLocation(536, 9);
			Match('\\'); 
			DebugLocation(536, 14);
			if (input.LA(1)=='\"'||input.LA(1)=='\''||input.LA(1)=='\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ESCAPE_SEQUENCE", 49);
			LeaveRule("ESCAPE_SEQUENCE", 49);
			LeaveRule_ESCAPE_SEQUENCE();
		}
	}
	// $ANTLR end "ESCAPE_SEQUENCE"

	partial void EnterRule_ASSIGNMENT();
	partial void LeaveRule_ASSIGNMENT();

	// $ANTLR start "ASSIGNMENT"
	[GrammarRule("ASSIGNMENT")]
	private void mASSIGNMENT()
	{
		EnterRule_ASSIGNMENT();
		EnterRule("ASSIGNMENT", 50);
		TraceIn("ASSIGNMENT", 50);
		try
		{
			int _type = ASSIGNMENT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:550:13: ( '=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:550:15: '='
			{
			DebugLocation(550, 15);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGNMENT", 50);
			LeaveRule("ASSIGNMENT", 50);
			LeaveRule_ASSIGNMENT();
		}
	}
	// $ANTLR end "ASSIGNMENT"

	partial void EnterRule_ASSIGN_PLUS();
	partial void LeaveRule_ASSIGN_PLUS();

	// $ANTLR start "ASSIGN_PLUS"
	[GrammarRule("ASSIGN_PLUS")]
	private void mASSIGN_PLUS()
	{
		EnterRule_ASSIGN_PLUS();
		EnterRule("ASSIGN_PLUS", 51);
		TraceIn("ASSIGN_PLUS", 51);
		try
		{
			int _type = ASSIGN_PLUS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:547:14: ( '+=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:547:16: '+='
			{
			DebugLocation(547, 16);
			Match("+="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_PLUS", 51);
			LeaveRule("ASSIGN_PLUS", 51);
			LeaveRule_ASSIGN_PLUS();
		}
	}
	// $ANTLR end "ASSIGN_PLUS"

	partial void EnterRule_ASSIGN_MINUS();
	partial void LeaveRule_ASSIGN_MINUS();

	// $ANTLR start "ASSIGN_MINUS"
	[GrammarRule("ASSIGN_MINUS")]
	private void mASSIGN_MINUS()
	{
		EnterRule_ASSIGN_MINUS();
		EnterRule("ASSIGN_MINUS", 52);
		TraceIn("ASSIGN_MINUS", 52);
		try
		{
			int _type = ASSIGN_MINUS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:548:14: ( '-=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:548:16: '-='
			{
			DebugLocation(548, 16);
			Match("-="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_MINUS", 52);
			LeaveRule("ASSIGN_MINUS", 52);
			LeaveRule_ASSIGN_MINUS();
		}
	}
	// $ANTLR end "ASSIGN_MINUS"

	partial void EnterRule_ASSIGN_MUL();
	partial void LeaveRule_ASSIGN_MUL();

	// $ANTLR start "ASSIGN_MUL"
	[GrammarRule("ASSIGN_MUL")]
	private void mASSIGN_MUL()
	{
		EnterRule_ASSIGN_MUL();
		EnterRule("ASSIGN_MUL", 53);
		TraceIn("ASSIGN_MUL", 53);
		try
		{
			int _type = ASSIGN_MUL;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:549:13: ( '*=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:549:15: '*='
			{
			DebugLocation(549, 15);
			Match("*="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_MUL", 53);
			LeaveRule("ASSIGN_MUL", 53);
			LeaveRule_ASSIGN_MUL();
		}
	}
	// $ANTLR end "ASSIGN_MUL"

	partial void EnterRule_ASSIGN_DIV();
	partial void LeaveRule_ASSIGN_DIV();

	// $ANTLR start "ASSIGN_DIV"
	[GrammarRule("ASSIGN_DIV")]
	private void mASSIGN_DIV()
	{
		EnterRule_ASSIGN_DIV();
		EnterRule("ASSIGN_DIV", 54);
		TraceIn("ASSIGN_DIV", 54);
		try
		{
			int _type = ASSIGN_DIV;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:550:13: ( '/=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:550:15: '/='
			{
			DebugLocation(550, 15);
			Match("/="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_DIV", 54);
			LeaveRule("ASSIGN_DIV", 54);
			LeaveRule_ASSIGN_DIV();
		}
	}
	// $ANTLR end "ASSIGN_DIV"

	partial void EnterRule_ASSIGN_REM();
	partial void LeaveRule_ASSIGN_REM();

	// $ANTLR start "ASSIGN_REM"
	[GrammarRule("ASSIGN_REM")]
	private void mASSIGN_REM()
	{
		EnterRule_ASSIGN_REM();
		EnterRule("ASSIGN_REM", 55);
		TraceIn("ASSIGN_REM", 55);
		try
		{
			int _type = ASSIGN_REM;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:551:13: ( '%=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:551:15: '%='
			{
			DebugLocation(551, 15);
			Match("%="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_REM", 55);
			LeaveRule("ASSIGN_REM", 55);
			LeaveRule_ASSIGN_REM();
		}
	}
	// $ANTLR end "ASSIGN_REM"

	partial void EnterRule_ASSIGN_AND();
	partial void LeaveRule_ASSIGN_AND();

	// $ANTLR start "ASSIGN_AND"
	[GrammarRule("ASSIGN_AND")]
	private void mASSIGN_AND()
	{
		EnterRule_ASSIGN_AND();
		EnterRule("ASSIGN_AND", 56);
		TraceIn("ASSIGN_AND", 56);
		try
		{
			int _type = ASSIGN_AND;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:552:13: ( '&=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:552:15: '&='
			{
			DebugLocation(552, 15);
			Match("&="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_AND", 56);
			LeaveRule("ASSIGN_AND", 56);
			LeaveRule_ASSIGN_AND();
		}
	}
	// $ANTLR end "ASSIGN_AND"

	partial void EnterRule_ASSIGN_OR();
	partial void LeaveRule_ASSIGN_OR();

	// $ANTLR start "ASSIGN_OR"
	[GrammarRule("ASSIGN_OR")]
	private void mASSIGN_OR()
	{
		EnterRule_ASSIGN_OR();
		EnterRule("ASSIGN_OR", 57);
		TraceIn("ASSIGN_OR", 57);
		try
		{
			int _type = ASSIGN_OR;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:553:12: ( '|=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:553:14: '|='
			{
			DebugLocation(553, 14);
			Match("|="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_OR", 57);
			LeaveRule("ASSIGN_OR", 57);
			LeaveRule_ASSIGN_OR();
		}
	}
	// $ANTLR end "ASSIGN_OR"

	partial void EnterRule_ASSIGN_REV();
	partial void LeaveRule_ASSIGN_REV();

	// $ANTLR start "ASSIGN_REV"
	[GrammarRule("ASSIGN_REV")]
	private void mASSIGN_REV()
	{
		EnterRule_ASSIGN_REV();
		EnterRule("ASSIGN_REV", 58);
		TraceIn("ASSIGN_REV", 58);
		try
		{
			int _type = ASSIGN_REV;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:554:13: ( '^=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:554:15: '^='
			{
			DebugLocation(554, 15);
			Match("^="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_REV", 58);
			LeaveRule("ASSIGN_REV", 58);
			LeaveRule_ASSIGN_REV();
		}
	}
	// $ANTLR end "ASSIGN_REV"

	partial void EnterRule_ASSIGN_LSHIFT();
	partial void LeaveRule_ASSIGN_LSHIFT();

	// $ANTLR start "ASSIGN_LSHIFT"
	[GrammarRule("ASSIGN_LSHIFT")]
	private void mASSIGN_LSHIFT()
	{
		EnterRule_ASSIGN_LSHIFT();
		EnterRule("ASSIGN_LSHIFT", 59);
		TraceIn("ASSIGN_LSHIFT", 59);
		try
		{
			int _type = ASSIGN_LSHIFT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:555:15: ( '<<=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:555:17: '<<='
			{
			DebugLocation(555, 17);
			Match("<<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_LSHIFT", 59);
			LeaveRule("ASSIGN_LSHIFT", 59);
			LeaveRule_ASSIGN_LSHIFT();
		}
	}
	// $ANTLR end "ASSIGN_LSHIFT"

	partial void EnterRule_ASSIGN_RSHIFT();
	partial void LeaveRule_ASSIGN_RSHIFT();

	// $ANTLR start "ASSIGN_RSHIFT"
	[GrammarRule("ASSIGN_RSHIFT")]
	private void mASSIGN_RSHIFT()
	{
		EnterRule_ASSIGN_RSHIFT();
		EnterRule("ASSIGN_RSHIFT", 60);
		TraceIn("ASSIGN_RSHIFT", 60);
		try
		{
			int _type = ASSIGN_RSHIFT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:556:15: ( '>>=' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:556:17: '>>='
			{
			DebugLocation(556, 17);
			Match(">>="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_RSHIFT", 60);
			LeaveRule("ASSIGN_RSHIFT", 60);
			LeaveRule_ASSIGN_RSHIFT();
		}
	}
	// $ANTLR end "ASSIGN_RSHIFT"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 61);
		TraceIn("COMMA", 61);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:558:9: ( ',' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:558:11: ','
			{
			DebugLocation(558, 11);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 61);
			LeaveRule("COMMA", 61);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 62);
		TraceIn("LPAREN", 62);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:559:10: ( '(' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:559:12: '('
			{
			DebugLocation(559, 12);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 62);
			LeaveRule("LPAREN", 62);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 63);
		TraceIn("RPAREN", 63);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:560:10: ( ')' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:560:12: ')'
			{
			DebugLocation(560, 12);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 63);
			LeaveRule("RPAREN", 63);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_LBRACE();
	partial void LeaveRule_LBRACE();

	// $ANTLR start "LBRACE"
	[GrammarRule("LBRACE")]
	private void mLBRACE()
	{
		EnterRule_LBRACE();
		EnterRule("LBRACE", 64);
		TraceIn("LBRACE", 64);
		try
		{
			int _type = LBRACE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:561:10: ( '[' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:561:12: '['
			{
			DebugLocation(561, 12);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACE", 64);
			LeaveRule("LBRACE", 64);
			LeaveRule_LBRACE();
		}
	}
	// $ANTLR end "LBRACE"

	partial void EnterRule_RBRACE();
	partial void LeaveRule_RBRACE();

	// $ANTLR start "RBRACE"
	[GrammarRule("RBRACE")]
	private void mRBRACE()
	{
		EnterRule_RBRACE();
		EnterRule("RBRACE", 65);
		TraceIn("RBRACE", 65);
		try
		{
			int _type = RBRACE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:562:10: ( ']' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:562:12: ']'
			{
			DebugLocation(562, 12);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACE", 65);
			LeaveRule("RBRACE", 65);
			LeaveRule_RBRACE();
		}
	}
	// $ANTLR end "RBRACE"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 66);
		TraceIn("LCURLY", 66);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:563:10: ( '{' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:563:12: '{'
			{
			DebugLocation(563, 12);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 66);
			LeaveRule("LCURLY", 66);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 67);
		TraceIn("RCURLY", 67);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:564:10: ( '}' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:564:12: '}'
			{
			DebugLocation(564, 12);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 67);
			LeaveRule("RCURLY", 67);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 68);
		TraceIn("COLON", 68);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:565:9: ( ':' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:565:11: ':'
			{
			DebugLocation(565, 11);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 68);
			LeaveRule("COLON", 68);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 69);
		TraceIn("DOT", 69);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:566:8: ( '.' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:566:10: '.'
			{
			DebugLocation(566, 10);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 69);
			LeaveRule("DOT", 69);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 70);
		TraceIn("NOT", 70);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:567:8: ( '!' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:567:10: '!'
			{
			DebugLocation(567, 10);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 70);
			LeaveRule("NOT", 70);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_INCREMENT();
	partial void LeaveRule_INCREMENT();

	// $ANTLR start "INCREMENT"
	[GrammarRule("INCREMENT")]
	private void mINCREMENT()
	{
		EnterRule_INCREMENT();
		EnterRule("INCREMENT", 71);
		TraceIn("INCREMENT", 71);
		try
		{
			int _type = INCREMENT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:569:12: ( '++' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:569:14: '++'
			{
			DebugLocation(569, 14);
			Match("++"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INCREMENT", 71);
			LeaveRule("INCREMENT", 71);
			LeaveRule_INCREMENT();
		}
	}
	// $ANTLR end "INCREMENT"

	partial void EnterRule_DECREMENT();
	partial void LeaveRule_DECREMENT();

	// $ANTLR start "DECREMENT"
	[GrammarRule("DECREMENT")]
	private void mDECREMENT()
	{
		EnterRule_DECREMENT();
		EnterRule("DECREMENT", 72);
		TraceIn("DECREMENT", 72);
		try
		{
			int _type = DECREMENT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:570:12: ( '--' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:570:14: '--'
			{
			DebugLocation(570, 14);
			Match("--"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DECREMENT", 72);
			LeaveRule("DECREMENT", 72);
			LeaveRule_DECREMENT();
		}
	}
	// $ANTLR end "DECREMENT"

	partial void EnterRule_CONDITION();
	partial void LeaveRule_CONDITION();

	// $ANTLR start "CONDITION"
	[GrammarRule("CONDITION")]
	private void mCONDITION()
	{
		EnterRule_CONDITION();
		EnterRule("CONDITION", 73);
		TraceIn("CONDITION", 73);
		try
		{
			int _type = CONDITION;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:572:12: ( '?' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:572:14: '?'
			{
			DebugLocation(572, 14);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CONDITION", 73);
			LeaveRule("CONDITION", 73);
			LeaveRule_CONDITION();
		}
	}
	// $ANTLR end "CONDITION"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 74);
		TraceIn("ELSE", 74);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:573:8: ( 'else' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:573:10: 'else'
			{
			DebugLocation(573, 10);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 74);
			LeaveRule("ELSE", 74);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_PRIVATE();
	partial void LeaveRule_PRIVATE();

	// $ANTLR start "PRIVATE"
	[GrammarRule("PRIVATE")]
	private void mPRIVATE()
	{
		EnterRule_PRIVATE();
		EnterRule("PRIVATE", 75);
		TraceIn("PRIVATE", 75);
		try
		{
			int _type = PRIVATE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:575:11: ( 'private' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:575:13: 'private'
			{
			DebugLocation(575, 13);
			Match("private"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PRIVATE", 75);
			LeaveRule("PRIVATE", 75);
			LeaveRule_PRIVATE();
		}
	}
	// $ANTLR end "PRIVATE"

	partial void EnterRule_PROTECTED();
	partial void LeaveRule_PROTECTED();

	// $ANTLR start "PROTECTED"
	[GrammarRule("PROTECTED")]
	private void mPROTECTED()
	{
		EnterRule_PROTECTED();
		EnterRule("PROTECTED", 76);
		TraceIn("PROTECTED", 76);
		try
		{
			int _type = PROTECTED;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:576:12: ( 'protected' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:576:14: 'protected'
			{
			DebugLocation(576, 14);
			Match("protected"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROTECTED", 76);
			LeaveRule("PROTECTED", 76);
			LeaveRule_PROTECTED();
		}
	}
	// $ANTLR end "PROTECTED"

	partial void EnterRule_INTERNAL();
	partial void LeaveRule_INTERNAL();

	// $ANTLR start "INTERNAL"
	[GrammarRule("INTERNAL")]
	private void mINTERNAL()
	{
		EnterRule_INTERNAL();
		EnterRule("INTERNAL", 77);
		TraceIn("INTERNAL", 77);
		try
		{
			int _type = INTERNAL;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:577:11: ( 'internal' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:577:13: 'internal'
			{
			DebugLocation(577, 13);
			Match("internal"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTERNAL", 77);
			LeaveRule("INTERNAL", 77);
			LeaveRule_INTERNAL();
		}
	}
	// $ANTLR end "INTERNAL"

	partial void EnterRule_PUBLIC();
	partial void LeaveRule_PUBLIC();

	// $ANTLR start "PUBLIC"
	[GrammarRule("PUBLIC")]
	private void mPUBLIC()
	{
		EnterRule_PUBLIC();
		EnterRule("PUBLIC", 78);
		TraceIn("PUBLIC", 78);
		try
		{
			int _type = PUBLIC;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:578:10: ( 'public' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:578:12: 'public'
			{
			DebugLocation(578, 12);
			Match("public"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PUBLIC", 78);
			LeaveRule("PUBLIC", 78);
			LeaveRule_PUBLIC();
		}
	}
	// $ANTLR end "PUBLIC"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 79);
		TraceIn("TYPE", 79);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:579:8: ( 'var' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:579:10: 'var'
			{
			DebugLocation(579, 10);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 79);
			LeaveRule("TYPE", 79);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_LIT_TRUE();
	partial void LeaveRule_LIT_TRUE();

	// $ANTLR start "LIT_TRUE"
	[GrammarRule("LIT_TRUE")]
	private void mLIT_TRUE()
	{
		EnterRule_LIT_TRUE();
		EnterRule("LIT_TRUE", 80);
		TraceIn("LIT_TRUE", 80);
		try
		{
			int _type = LIT_TRUE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:580:11: ( 'true' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:580:13: 'true'
			{
			DebugLocation(580, 13);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LIT_TRUE", 80);
			LeaveRule("LIT_TRUE", 80);
			LeaveRule_LIT_TRUE();
		}
	}
	// $ANTLR end "LIT_TRUE"

	partial void EnterRule_LIT_FALSE();
	partial void LeaveRule_LIT_FALSE();

	// $ANTLR start "LIT_FALSE"
	[GrammarRule("LIT_FALSE")]
	private void mLIT_FALSE()
	{
		EnterRule_LIT_FALSE();
		EnterRule("LIT_FALSE", 81);
		TraceIn("LIT_FALSE", 81);
		try
		{
			int _type = LIT_FALSE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:581:12: ( 'false' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:581:14: 'false'
			{
			DebugLocation(581, 14);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LIT_FALSE", 81);
			LeaveRule("LIT_FALSE", 81);
			LeaveRule_LIT_FALSE();
		}
	}
	// $ANTLR end "LIT_FALSE"

	partial void EnterRule_THIS();
	partial void LeaveRule_THIS();

	// $ANTLR start "THIS"
	[GrammarRule("THIS")]
	private void mTHIS()
	{
		EnterRule_THIS();
		EnterRule("THIS", 82);
		TraceIn("THIS", 82);
		try
		{
			int _type = THIS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:582:8: ( 'this' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:582:10: 'this'
			{
			DebugLocation(582, 10);
			Match("this"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THIS", 82);
			LeaveRule("THIS", 82);
			LeaveRule_THIS();
		}
	}
	// $ANTLR end "THIS"

	partial void EnterRule_LIT_NULL();
	partial void LeaveRule_LIT_NULL();

	// $ANTLR start "LIT_NULL"
	[GrammarRule("LIT_NULL")]
	private void mLIT_NULL()
	{
		EnterRule_LIT_NULL();
		EnterRule("LIT_NULL", 83);
		TraceIn("LIT_NULL", 83);
		try
		{
			int _type = LIT_NULL;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:583:11: ( 'null' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:583:13: 'null'
			{
			DebugLocation(583, 13);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LIT_NULL", 83);
			LeaveRule("LIT_NULL", 83);
			LeaveRule_LIT_NULL();
		}
	}
	// $ANTLR end "LIT_NULL"

	partial void EnterRule_UNDEFINED();
	partial void LeaveRule_UNDEFINED();

	// $ANTLR start "UNDEFINED"
	[GrammarRule("UNDEFINED")]
	private void mUNDEFINED()
	{
		EnterRule_UNDEFINED();
		EnterRule("UNDEFINED", 84);
		TraceIn("UNDEFINED", 84);
		try
		{
			int _type = UNDEFINED;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:584:13: ( 'undefined' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:584:15: 'undefined'
			{
			DebugLocation(584, 15);
			Match("undefined"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UNDEFINED", 84);
			LeaveRule("UNDEFINED", 84);
			LeaveRule_UNDEFINED();
		}
	}
	// $ANTLR end "UNDEFINED"

	partial void EnterRule_NAN();
	partial void LeaveRule_NAN();

	// $ANTLR start "NAN"
	[GrammarRule("NAN")]
	private void mNAN()
	{
		EnterRule_NAN();
		EnterRule("NAN", 85);
		TraceIn("NAN", 85);
		try
		{
			int _type = NAN;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:585:8: ( 'NaN' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:585:10: 'NaN'
			{
			DebugLocation(585, 10);
			Match("NaN"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAN", 85);
			LeaveRule("NAN", 85);
			LeaveRule_NAN();
		}
	}
	// $ANTLR end "NAN"

	partial void EnterRule_INSTANCEOF();
	partial void LeaveRule_INSTANCEOF();

	// $ANTLR start "INSTANCEOF"
	[GrammarRule("INSTANCEOF")]
	private void mINSTANCEOF()
	{
		EnterRule_INSTANCEOF();
		EnterRule("INSTANCEOF", 86);
		TraceIn("INSTANCEOF", 86);
		try
		{
			int _type = INSTANCEOF;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:586:13: ( 'instanceof' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:586:15: 'instanceof'
			{
			DebugLocation(586, 15);
			Match("instanceof"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INSTANCEOF", 86);
			LeaveRule("INSTANCEOF", 86);
			LeaveRule_INSTANCEOF();
		}
	}
	// $ANTLR end "INSTANCEOF"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 87);
		TraceIn("COMMENT", 87);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:588:11: ( '/*' ( options {greedy=false; } : . )* '*/' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:588:13: '/*' ( options {greedy=false; } : . )* '*/'
			{
			DebugLocation(588, 13);
			Match("/*"); 

			DebugLocation(588, 18);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:588:18: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0=='*'))
				{
					int LA9_1 = input.LA(2);

					if ((LA9_1=='/'))
					{
						alt9 = 2;
					}
					else if (((LA9_1>='\u0000' && LA9_1<='.')||(LA9_1>='0' && LA9_1<='\uFFFF')))
					{
						alt9 = 1;
					}


				}
				else if (((LA9_0>='\u0000' && LA9_0<=')')||(LA9_0>='+' && LA9_0<='\uFFFF')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:588:45: .
					{
					DebugLocation(588, 45);
					MatchAny(); 

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(588, 49);
			Match("*/"); 

			DebugLocation(588, 54);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 87);
			LeaveRule("COMMENT", 87);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 88);
		TraceIn("LINE_COMMENT", 88);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:589:14: ( '//' (~ ( '\\r' | '\\n' ) )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:589:16: '//' (~ ( '\\r' | '\\n' ) )*
			{
			DebugLocation(589, 16);
			Match("//"); 

			DebugLocation(589, 21);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:589:21: (~ ( '\\r' | '\\n' ) )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if (((LA10_0>='\u0000' && LA10_0<='\t')||(LA10_0>='\u000B' && LA10_0<='\f')||(LA10_0>='\u000E' && LA10_0<='\uFFFF')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
					{
					DebugLocation(589, 21);
					input.Consume();


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(589, 35);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 88);
			LeaveRule("LINE_COMMENT", 88);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 89);
		TraceIn("IDENTIFIER", 89);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:591:14: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' | '_' )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:591:16: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '$' ) ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' | '_' )*
			{
			DebugLocation(591, 16);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(591, 44);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:591:44: ( '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' | '_' )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>='0' && LA11_0<='9')||(LA11_0>='A' && LA11_0<='Z')||LA11_0=='_'||(LA11_0>='a' && LA11_0<='z')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
					{
					DebugLocation(591, 44);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 89);
			LeaveRule("IDENTIFIER", 89);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 90);
		TraceIn("NEWLINE", 90);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:592:11: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:592:13: ( '\\r' )? '\\n'
			{
			DebugLocation(592, 13);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:592:13: ( '\\r' )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0=='\r'))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:592:13: '\\r'
				{
				DebugLocation(592, 13);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(592, 19);
			Match('\n'); 
			DebugLocation(592, 24);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 90);
			LeaveRule("NEWLINE", 90);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 91);
		TraceIn("WS", 91);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:593:7: ( ( ' ' | '\\t' | NEWLINE )+ )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:593:9: ( ' ' | '\\t' | NEWLINE )+
			{
			DebugLocation(593, 9);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:593:9: ( ' ' | '\\t' | NEWLINE )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=4;
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case ' ':
					{
					alt13 = 1;
					}
					break;
				case '\t':
					{
					alt13 = 2;
					}
					break;
				case '\n':
				case '\r':
					{
					alt13 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:593:10: ' '
					{
					DebugLocation(593, 10);
					Match(' '); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:593:14: '\\t'
					{
					DebugLocation(593, 14);
					Match('\t'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:593:21: NEWLINE
					{
					DebugLocation(593, 21);
					mNEWLINE(); 

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(593, 32);
			 _channel=HIDDEN; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 91);
			LeaveRule("WS", 91);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 92);
		TraceIn("SEMI", 92);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:594:8: ( ';' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:594:10: ';'
			{
			DebugLocation(594, 10);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 92);
			LeaveRule("SEMI", 92);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	public override void mTokens()
	{
		// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:8: ( AND | DIV | EQUALS | GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN | LOGICAL_AND | LOGICAL_OR | LSHIFT | MINUS | MOD | MUL | NOT_EQUALS | OR | PLUS | RSHIFT | STRICT_EQUALS | STRICT_NOT_EQUALS | XOR | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | T__143 | T__144 | T__145 | T__146 | NUMBER_LITERATE | HEX_LITERATE | BINARY_LITERATE | STRING_LITERATE | ASSIGNMENT | ASSIGN_PLUS | ASSIGN_MINUS | ASSIGN_MUL | ASSIGN_DIV | ASSIGN_REM | ASSIGN_AND | ASSIGN_OR | ASSIGN_REV | ASSIGN_LSHIFT | ASSIGN_RSHIFT | COMMA | LPAREN | RPAREN | LBRACE | RBRACE | LCURLY | RCURLY | COLON | DOT | NOT | INCREMENT | DECREMENT | CONDITION | ELSE | PRIVATE | PROTECTED | INTERNAL | PUBLIC | TYPE | LIT_TRUE | LIT_FALSE | THIS | LIT_NULL | UNDEFINED | NAN | INSTANCEOF | COMMENT | LINE_COMMENT | IDENTIFIER | NEWLINE | WS | SEMI )
		int alt14=91;
		try { DebugEnterDecision(14, false);
		try
		{
			alt14 = dfa14.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(14); }
		switch (alt14)
		{
		case 1:
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:14: DIV
			{
			DebugLocation(1, 14);
			mDIV(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:18: EQUALS
			{
			DebugLocation(1, 18);
			mEQUALS(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:25: GREAT_EQUALS
			{
			DebugLocation(1, 25);
			mGREAT_EQUALS(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:38: GREAT_THAN
			{
			DebugLocation(1, 38);
			mGREAT_THAN(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:49: LESS_EQUALS
			{
			DebugLocation(1, 49);
			mLESS_EQUALS(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:61: LESS_THAN
			{
			DebugLocation(1, 61);
			mLESS_THAN(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:71: LOGICAL_AND
			{
			DebugLocation(1, 71);
			mLOGICAL_AND(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:83: LOGICAL_OR
			{
			DebugLocation(1, 83);
			mLOGICAL_OR(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:94: LSHIFT
			{
			DebugLocation(1, 94);
			mLSHIFT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:101: MINUS
			{
			DebugLocation(1, 101);
			mMINUS(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:107: MOD
			{
			DebugLocation(1, 107);
			mMOD(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:111: MUL
			{
			DebugLocation(1, 111);
			mMUL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:115: NOT_EQUALS
			{
			DebugLocation(1, 115);
			mNOT_EQUALS(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:126: OR
			{
			DebugLocation(1, 126);
			mOR(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:129: PLUS
			{
			DebugLocation(1, 129);
			mPLUS(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:134: RSHIFT
			{
			DebugLocation(1, 134);
			mRSHIFT(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:141: STRICT_EQUALS
			{
			DebugLocation(1, 141);
			mSTRICT_EQUALS(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:155: STRICT_NOT_EQUALS
			{
			DebugLocation(1, 155);
			mSTRICT_NOT_EQUALS(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:173: XOR
			{
			DebugLocation(1, 173);
			mXOR(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:177: T__123
			{
			DebugLocation(1, 177);
			mT__123(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:184: T__124
			{
			DebugLocation(1, 184);
			mT__124(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:191: T__125
			{
			DebugLocation(1, 191);
			mT__125(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:198: T__126
			{
			DebugLocation(1, 198);
			mT__126(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:205: T__127
			{
			DebugLocation(1, 205);
			mT__127(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:212: T__128
			{
			DebugLocation(1, 212);
			mT__128(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:219: T__129
			{
			DebugLocation(1, 219);
			mT__129(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:226: T__130
			{
			DebugLocation(1, 226);
			mT__130(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:233: T__131
			{
			DebugLocation(1, 233);
			mT__131(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:240: T__132
			{
			DebugLocation(1, 240);
			mT__132(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:247: T__133
			{
			DebugLocation(1, 247);
			mT__133(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:254: T__134
			{
			DebugLocation(1, 254);
			mT__134(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:261: T__135
			{
			DebugLocation(1, 261);
			mT__135(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:268: T__136
			{
			DebugLocation(1, 268);
			mT__136(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:275: T__137
			{
			DebugLocation(1, 275);
			mT__137(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:282: T__138
			{
			DebugLocation(1, 282);
			mT__138(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:289: T__139
			{
			DebugLocation(1, 289);
			mT__139(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:296: T__140
			{
			DebugLocation(1, 296);
			mT__140(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:303: T__141
			{
			DebugLocation(1, 303);
			mT__141(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:310: T__142
			{
			DebugLocation(1, 310);
			mT__142(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:317: T__143
			{
			DebugLocation(1, 317);
			mT__143(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:324: T__144
			{
			DebugLocation(1, 324);
			mT__144(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:331: T__145
			{
			DebugLocation(1, 331);
			mT__145(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:338: T__146
			{
			DebugLocation(1, 338);
			mT__146(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:345: NUMBER_LITERATE
			{
			DebugLocation(1, 345);
			mNUMBER_LITERATE(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:361: HEX_LITERATE
			{
			DebugLocation(1, 361);
			mHEX_LITERATE(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:374: BINARY_LITERATE
			{
			DebugLocation(1, 374);
			mBINARY_LITERATE(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:390: STRING_LITERATE
			{
			DebugLocation(1, 390);
			mSTRING_LITERATE(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:406: ASSIGNMENT
			{
			DebugLocation(1, 406);
			mASSIGNMENT(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:417: ASSIGN_PLUS
			{
			DebugLocation(1, 417);
			mASSIGN_PLUS(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:429: ASSIGN_MINUS
			{
			DebugLocation(1, 429);
			mASSIGN_MINUS(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:442: ASSIGN_MUL
			{
			DebugLocation(1, 442);
			mASSIGN_MUL(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:453: ASSIGN_DIV
			{
			DebugLocation(1, 453);
			mASSIGN_DIV(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:464: ASSIGN_REM
			{
			DebugLocation(1, 464);
			mASSIGN_REM(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:475: ASSIGN_AND
			{
			DebugLocation(1, 475);
			mASSIGN_AND(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:486: ASSIGN_OR
			{
			DebugLocation(1, 486);
			mASSIGN_OR(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:496: ASSIGN_REV
			{
			DebugLocation(1, 496);
			mASSIGN_REV(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:507: ASSIGN_LSHIFT
			{
			DebugLocation(1, 507);
			mASSIGN_LSHIFT(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:521: ASSIGN_RSHIFT
			{
			DebugLocation(1, 521);
			mASSIGN_RSHIFT(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:535: COMMA
			{
			DebugLocation(1, 535);
			mCOMMA(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:541: LPAREN
			{
			DebugLocation(1, 541);
			mLPAREN(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:548: RPAREN
			{
			DebugLocation(1, 548);
			mRPAREN(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:555: LBRACE
			{
			DebugLocation(1, 555);
			mLBRACE(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:562: RBRACE
			{
			DebugLocation(1, 562);
			mRBRACE(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:569: LCURLY
			{
			DebugLocation(1, 569);
			mLCURLY(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:576: RCURLY
			{
			DebugLocation(1, 576);
			mRCURLY(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:583: COLON
			{
			DebugLocation(1, 583);
			mCOLON(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:589: DOT
			{
			DebugLocation(1, 589);
			mDOT(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:593: NOT
			{
			DebugLocation(1, 593);
			mNOT(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:597: INCREMENT
			{
			DebugLocation(1, 597);
			mINCREMENT(); 

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:607: DECREMENT
			{
			DebugLocation(1, 607);
			mDECREMENT(); 

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:617: CONDITION
			{
			DebugLocation(1, 617);
			mCONDITION(); 

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:627: ELSE
			{
			DebugLocation(1, 627);
			mELSE(); 

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:632: PRIVATE
			{
			DebugLocation(1, 632);
			mPRIVATE(); 

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:640: PROTECTED
			{
			DebugLocation(1, 640);
			mPROTECTED(); 

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:650: INTERNAL
			{
			DebugLocation(1, 650);
			mINTERNAL(); 

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:659: PUBLIC
			{
			DebugLocation(1, 659);
			mPUBLIC(); 

			}
			break;
		case 78:
			DebugEnterAlt(78);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:666: TYPE
			{
			DebugLocation(1, 666);
			mTYPE(); 

			}
			break;
		case 79:
			DebugEnterAlt(79);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:671: LIT_TRUE
			{
			DebugLocation(1, 671);
			mLIT_TRUE(); 

			}
			break;
		case 80:
			DebugEnterAlt(80);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:680: LIT_FALSE
			{
			DebugLocation(1, 680);
			mLIT_FALSE(); 

			}
			break;
		case 81:
			DebugEnterAlt(81);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:690: THIS
			{
			DebugLocation(1, 690);
			mTHIS(); 

			}
			break;
		case 82:
			DebugEnterAlt(82);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:695: LIT_NULL
			{
			DebugLocation(1, 695);
			mLIT_NULL(); 

			}
			break;
		case 83:
			DebugEnterAlt(83);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:704: UNDEFINED
			{
			DebugLocation(1, 704);
			mUNDEFINED(); 

			}
			break;
		case 84:
			DebugEnterAlt(84);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:714: NAN
			{
			DebugLocation(1, 714);
			mNAN(); 

			}
			break;
		case 85:
			DebugEnterAlt(85);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:718: INSTANCEOF
			{
			DebugLocation(1, 718);
			mINSTANCEOF(); 

			}
			break;
		case 86:
			DebugEnterAlt(86);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:729: COMMENT
			{
			DebugLocation(1, 729);
			mCOMMENT(); 

			}
			break;
		case 87:
			DebugEnterAlt(87);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:737: LINE_COMMENT
			{
			DebugLocation(1, 737);
			mLINE_COMMENT(); 

			}
			break;
		case 88:
			DebugEnterAlt(88);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:750: IDENTIFIER
			{
			DebugLocation(1, 750);
			mIDENTIFIER(); 

			}
			break;
		case 89:
			DebugEnterAlt(89);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:761: NEWLINE
			{
			DebugLocation(1, 761);
			mNEWLINE(); 

			}
			break;
		case 90:
			DebugEnterAlt(90);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:769: WS
			{
			DebugLocation(1, 769);
			mWS(); 

			}
			break;
		case 91:
			DebugEnterAlt(91);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:1:772: SEMI
			{
			DebugLocation(1, 772);
			mSEMI(); 

			}
			break;

		}

	}


	#region DFA
	DFA2 dfa2;
	DFA14 dfa14;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa2 = new DFA2(this);
		dfa14 = new DFA14(this);
	}

	private class DFA2 : DFA
	{
		private const string DFA2_eotS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA2_eofS =
			"\x4\xFFFF";
		private const string DFA2_minS =
			"\x2\x2E\x2\xFFFF";
		private const string DFA2_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA2_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA2_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA2_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x2\x1\xFFFF\xA\x1",
				"",
				""
			};

		private static readonly short[] DFA2_eot = DFA.UnpackEncodedString(DFA2_eotS);
		private static readonly short[] DFA2_eof = DFA.UnpackEncodedString(DFA2_eofS);
		private static readonly char[] DFA2_min = DFA.UnpackEncodedStringToUnsignedChars(DFA2_minS);
		private static readonly char[] DFA2_max = DFA.UnpackEncodedStringToUnsignedChars(DFA2_maxS);
		private static readonly short[] DFA2_accept = DFA.UnpackEncodedString(DFA2_acceptS);
		private static readonly short[] DFA2_special = DFA.UnpackEncodedString(DFA2_specialS);
		private static readonly short[][] DFA2_transition;

		static DFA2()
		{
			int numStates = DFA2_transitionS.Length;
			DFA2_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA2_transition[i] = DFA.UnpackEncodedString(DFA2_transitionS[i]);
			}
		}

		public DFA2( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}

		public override string Description { get { return "514:4: ( ( '0' .. '9' )* '.' )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x1\xFFFF\x1\x31\x1\x36\x1\x39\x1\x3C\x1\x40\x1\x43\x1\x46\x1\x48\x1"+
			"\x4A\x1\x4C\x1\x4F\x1\x51\xA\x2A\x1\xFFFF\x1\x1A\x1\x68\xB\xFFFF\x5\x2A"+
			"\x2\xFFFF\x1\x6F\xA\xFFFF\x1\x71\x3\xFFFF\x1\x73\x2\xFFFF\x1\x75\xC\xFFFF"+
			"\x1\x77\x6\xFFFF\x8\x2A\x1\x82\x1\x2A\x1\x86\x9\x2A\x3\xFFFF\x6\x2A\x9"+
			"\xFFFF\x7\x2A\x1\xA0\x2\x2A\x1\xFFFF\x3\x2A\x1\xFFFF\x1\xA6\x6\x2A\x1"+
			"\xAD\x7\x2A\x1\xB5\x1\x2A\x1\xB7\x1\x2A\x1\xB9\x5\x2A\x1\xFFFF\x5\x2A"+
			"\x1\xFFFF\x1\xC4\x4\x2A\x1\xC9\x1\xFFFF\x1\xCA\x2\x2A\x1\xCD\x3\x2A\x1"+
			"\xFFFF\x1\x2A\x1\xFFFF\x1\xD2\x1\xFFFF\x1\xD3\x5\x2A\x1\xD9\x3\x2A\x1"+
			"\xFFFF\x3\x2A\x1\xE0\x2\xFFFF\x1\x2A\x1\xE2\x1\xFFFF\x4\x2A\x2\xFFFF"+
			"\x2\x2A\x1\xE9\x2\x2A\x1\xFFFF\x1\xEC\x2\x2A\x1\xEF\x1\xF0\x1\x2A\x1"+
			"\xFFFF\x1\xF2\x1\xFFFF\x2\x2A\x1\xF5\x2\x2A\x1\xF8\x1\xFFFF\x1\xF9\x1"+
			"\x2A\x1\xFFFF\x2\x2A\x2\xFFFF\x1\x2A\x1\xFFFF\x1\xFE\x1\x2A\x1\xFFFF"+
			"\x1\x2A\x1\x101\x2\xFFFF\x1\x102\x1\x103\x1\x2A\x1\x105\x1\xFFFF\x2\x2A"+
			"\x3\xFFFF\x1\x2A\x1\xFFFF\x1\x109\x1\x10A\x1\x10B\x3\xFFFF";
		private const string DFA14_eofS =
			"\x10C\xFFFF";
		private const string DFA14_minS =
			"\x1\x9\x1\x26\x1\x2A\x2\x3D\x1\x2F\x1\x3D\x1\x2D\x3\x3D\x1\x2B\x1\x3D"+
			"\x1\x72\x1\x61\x1\x65\x1\x61\x1\x66\x2\x65\x1\x77\x1\x65\x1\x68\x1\xFFFF"+
			"\x1\x62\x1\x30\xB\xFFFF\x1\x6C\x1\x72\x1\x61\x1\x6E\x1\x61\x1\xFFFF\x1"+
			"\xA\x1\x9\xA\xFFFF\x1\x3D\x3\xFFFF\x1\x3D\x2\xFFFF\x1\x3D\xC\xFFFF\x1"+
			"\x3D\x6\xFFFF\x1\x65\x1\x73\x1\x6E\x1\x66\x1\x6E\x1\x72\x1\x6E\x1\x6C"+
			"\x1\x30\x1\x70\x1\x30\x1\x77\x1\x6C\x1\x74\x1\x69\x1\x6D\x1\x69\x1\x75"+
			"\x1\x70\x1\x69\x3\xFFFF\x1\x73\x1\x69\x1\x62\x1\x72\x1\x64\x1\x4E\x9"+
			"\xFFFF\x1\x61\x1\x65\x1\x63\x1\x74\x1\x61\x1\x65\x1\x61\x1\x30\x1\x63"+
			"\x1\x73\x1\xFFFF\x1\x6F\x1\x65\x1\x74\x1\xFFFF\x1\x30\x1\x6C\x1\x75\x1"+
			"\x74\x1\x70\x1\x6F\x1\x73\x1\x30\x2\x65\x1\x6C\x1\x65\x1\x76\x1\x74\x1"+
			"\x6C\x1\x30\x1\x65\x1\x30\x1\x6B\x1\x30\x1\x68\x1\x69\x1\x75\x1\x74\x1"+
			"\x6C\x1\xFFFF\x1\x74\x1\x65\x2\x72\x1\x61\x1\xFFFF\x1\x30\x1\x72\x1\x63"+
			"\x1\x6C\x1\x77\x1\x30\x1\xFFFF\x1\x30\x1\x6F\x1\x65\x1\x30\x1\x61\x1"+
			"\x65\x1\x69\x1\xFFFF\x1\x66\x1\xFFFF\x1\x30\x1\xFFFF\x1\x30\x1\x6E\x1"+
			"\x6C\x1\x65\x1\x6C\x1\x69\x1\x30\x1\x74\x2\x6E\x1\xFFFF\x1\x6E\x1\x68"+
			"\x1\x61\x1\x30\x2\xFFFF\x1\x66\x1\x30\x1\xFFFF\x1\x74\x2\x63\x1\x69\x2"+
			"\xFFFF\x1\x75\x1\x74\x1\x30\x1\x79\x1\x6F\x1\xFFFF\x1\x30\x1\x61\x1\x63"+
			"\x2\x30\x1\x74\x1\xFFFF\x1\x30\x1\xFFFF\x1\x65\x1\x74\x1\x30\x1\x6E\x1"+
			"\x65\x1\x30\x1\xFFFF\x1\x30\x1\x6E\x1\xFFFF\x1\x6C\x1\x65\x2\xFFFF\x1"+
			"\x65\x1\xFFFF\x1\x30\x1\x65\x1\xFFFF\x1\x65\x1\x30\x2\xFFFF\x2\x30\x1"+
			"\x6F\x1\x30\x1\xFFFF\x2\x64\x3\xFFFF\x1\x66\x1\xFFFF\x3\x30\x3\xFFFF";
		private const string DFA14_maxS =
			"\x1\x7E\x1\x3D\x3\x3E\x1\x3D\x1\x7C\x6\x3D\x1\x72\x1\x6F\x1\x65\x1\x75"+
			"\x1\x6E\x1\x75\x1\x65\x1\x77\x1\x79\x1\x68\x1\xFFFF\x1\x78\x1\x39\xB"+
			"\xFFFF\x1\x6C\x1\x75\x1\x61\x1\x6E\x1\x61\x1\xFFFF\x1\xA\x1\x20\xA\xFFFF"+
			"\x1\x3D\x3\xFFFF\x1\x3D\x2\xFFFF\x1\x3D\xC\xFFFF\x1\x3D\x6\xFFFF\x1\x65"+
			"\x1\x74\x1\x6E\x1\x6C\x1\x6E\x1\x72\x1\x6E\x1\x6C\x1\x7A\x1\x70\x1\x7A"+
			"\x1\x77\x1\x6C\x1\x74\x1\x69\x1\x6D\x1\x72\x1\x79\x1\x70\x1\x69\x3\xFFFF"+
			"\x1\x73\x1\x6F\x1\x62\x1\x72\x1\x64\x1\x4E\x9\xFFFF\x1\x61\x1\x65\x1"+
			"\x63\x1\x74\x1\x61\x1\x65\x1\x61\x1\x7A\x1\x63\x1\x73\x1\xFFFF\x1\x6F"+
			"\x1\x65\x1\x74\x1\xFFFF\x1\x7A\x1\x6C\x1\x75\x1\x74\x1\x70\x1\x6F\x1"+
			"\x73\x1\x7A\x2\x65\x1\x6C\x1\x65\x1\x76\x1\x74\x1\x6C\x1\x7A\x1\x65\x1"+
			"\x7A\x1\x6B\x1\x7A\x1\x68\x1\x69\x1\x75\x1\x74\x1\x6C\x1\xFFFF\x1\x74"+
			"\x1\x65\x2\x72\x1\x61\x1\xFFFF\x1\x7A\x1\x72\x1\x63\x1\x6C\x1\x77\x1"+
			"\x7A\x1\xFFFF\x1\x7A\x1\x6F\x1\x65\x1\x7A\x1\x61\x1\x65\x1\x69\x1\xFFFF"+
			"\x1\x66\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x7A\x1\x6E\x1\x6C\x1\x65\x1\x6C\x1"+
			"\x69\x1\x7A\x1\x74\x2\x6E\x1\xFFFF\x1\x6E\x1\x68\x1\x61\x1\x7A\x2\xFFFF"+
			"\x1\x66\x1\x7A\x1\xFFFF\x1\x74\x2\x63\x1\x69\x2\xFFFF\x1\x75\x1\x74\x1"+
			"\x7A\x1\x79\x1\x6F\x1\xFFFF\x1\x7A\x1\x61\x1\x63\x2\x7A\x1\x74\x1\xFFFF"+
			"\x1\x7A\x1\xFFFF\x1\x65\x1\x74\x1\x7A\x1\x6E\x1\x65\x1\x7A\x1\xFFFF\x1"+
			"\x7A\x1\x6E\x1\xFFFF\x1\x6C\x1\x65\x2\xFFFF\x1\x65\x1\xFFFF\x1\x7A\x1"+
			"\x65\x1\xFFFF\x1\x65\x1\x7A\x2\xFFFF\x2\x7A\x1\x6F\x1\x7A\x1\xFFFF\x2"+
			"\x64\x3\xFFFF\x1\x66\x1\xFFFF\x3\x7A\x3\xFFFF";
		private const string DFA14_acceptS =
			"\x17\xFFFF\x1\x2C\x2\xFFFF\x1\x2D\x1\x30\x1\x3C\x1\x3D\x1\x3E\x1\x3F"+
			"\x1\x40\x1\x41\x1\x42\x1\x43\x1\x48\x5\xFFFF\x1\x58\x2\xFFFF\x1\x5A\x1"+
			"\x5B\x1\x8\x1\x37\x1\x1\x1\x15\x1\x35\x1\x56\x1\x57\x1\x2\x1\xFFFF\x1"+
			"\x17\x1\x31\x1\x4\x1\xFFFF\x1\x5\x1\x6\x1\xFFFF\x1\x16\x1\x7\x1\x9\x1"+
			"\x38\x1\xF\x1\x33\x1\x47\x1\xB\x1\x36\x1\xC\x1\x34\x1\xD\x1\xFFFF\x1"+
			"\x45\x1\x32\x1\x46\x1\x10\x1\x39\x1\x14\x14\xFFFF\x1\x2E\x1\x2F\x1\x44"+
			"\x6\xFFFF\x1\x59\x1\x12\x1\x3\x1\x3B\x1\x11\x1\x3A\x1\xA\x1\x13\x1\xE"+
			"\xA\xFFFF\x1\x21\x3\xFFFF\x1\x23\x19\xFFFF\x1\x1F\x5\xFFFF\x1\x24\x6"+
			"\xFFFF\x1\x29\x7\xFFFF\x1\x4E\x1\xFFFF\x1\x54\x1\xFFFF\x1\x19\xA\xFFFF"+
			"\x1\x52\x4\xFFFF\x1\x51\x1\x4F\x2\xFFFF\x1\x49\x4\xFFFF\x1\x18\x1\x1A"+
			"\x5\xFFFF\x1\x50\x6\xFFFF\x1\x28\x1\xFFFF\x1\x2B\x6\xFFFF\x1\x1D\x2\xFFFF"+
			"\x1\x22\x2\xFFFF\x1\x25\x1\x26\x1\xFFFF\x1\x2A\x2\xFFFF\x1\x4D\x2\xFFFF"+
			"\x1\x1C\x1\x1E\x4\xFFFF\x1\x4A\x2\xFFFF\x1\x1B\x1\x20\x1\x4C\x1\xFFFF"+
			"\x1\x27\x3\xFFFF\x1\x4B\x1\x53\x1\x55";
		private const string DFA14_specialS =
			"\x10C\xFFFF}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x1\x2D\x1\x2C\x2\xFFFF\x1\x2B\x12\xFFFF\x1\x2D\x1\xA\x1\x1B\x1\xFFFF"+
				"\x1\x2A\x1\x8\x1\x1\x1\x1B\x1\x1D\x1\x1E\x1\x9\x1\xB\x1\x1C\x1\x7\x1"+
				"\x19\x1\x2\x1\x18\x9\x1A\x1\x23\x1\x2E\x1\x5\x1\x3\x1\x4\x1\x24\x1\xFFFF"+
				"\xD\x2A\x1\x29\xC\x2A\x1\x1F\x1\xFFFF\x1\x20\x1\xC\x1\x2A\x1\xFFFF\x1"+
				"\x2A\x1\xD\x1\xE\x1\xF\x1\x25\x1\x10\x2\x2A\x1\x11\x4\x2A\x1\x12\x1"+
				"\x2A\x1\x26\x1\x2A\x1\x13\x1\x14\x1\x15\x1\x28\x1\x27\x1\x16\x3\x2A"+
				"\x1\x21\x1\x6\x1\x22\x1\x17",
				"\x1\x2F\x16\xFFFF\x1\x30",
				"\x1\x34\x4\xFFFF\x1\x35\xD\xFFFF\x1\x33\x1\x32",
				"\x1\x37\x1\x38",
				"\x1\x3A\x1\x3B",
				"\x1\x3F\xC\xFFFF\x1\x3E\x1\x3D",
				"\x1\x42\x3E\xFFFF\x1\x41",
				"\x1\x45\xF\xFFFF\x1\x44",
				"\x1\x47",
				"\x1\x49",
				"\x1\x4B",
				"\x1\x4E\x11\xFFFF\x1\x4D",
				"\x1\x50",
				"\x1\x52",
				"\x1\x53\xD\xFFFF\x1\x54",
				"\x1\x55",
				"\x1\x59\x7\xFFFF\x1\x56\x5\xFFFF\x1\x57\x5\xFFFF\x1\x58",
				"\x1\x5A\x6\xFFFF\x1\x5B\x1\x5C",
				"\x1\x5D\xF\xFFFF\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61\x2\xFFFF\x1\x62\x9\xFFFF\x1\x63\x6\xFFFF\x1\x64",
				"\x1\x65",
				"",
				"\x1\x67\x15\xFFFF\x1\x66",
				"\xA\x1A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x69",
				"\x1\x6A\x2\xFFFF\x1\x6B",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"",
				"\x1\x2C",
				"\x2\x2D\x2\xFFFF\x1\x2D\x12\xFFFF\x1\x2D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x70",
				"",
				"",
				"",
				"\x1\x72",
				"",
				"",
				"\x1\x74",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x76",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x78",
				"\x1\x79\x1\x7A",
				"\x1\x7B",
				"\x1\x7C\x5\xFFFF\x1\x7D",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x80",
				"\x1\x81",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\x83",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x12\x2A\x1\x85\x1"+
				"\x84\x6\x2A",
				"\x1\x87",
				"\x1\x88",
				"\x1\x89",
				"\x1\x8A",
				"\x1\x8B",
				"\x1\x8D\x8\xFFFF\x1\x8C",
				"\x1\x8F\x3\xFFFF\x1\x8E",
				"\x1\x90",
				"\x1\x91",
				"",
				"",
				"",
				"\x1\x92",
				"\x1\x93\x5\xFFFF\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x97",
				"\x1\x98",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x99",
				"\x1\x9A",
				"\x1\x9B",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xA1",
				"\x1\xA2",
				"",
				"\x1\xA3",
				"\x1\xA4",
				"\x1\xA5",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xA7",
				"\x1\xA8",
				"\x1\xA9",
				"\x1\xAA",
				"\x1\xAB",
				"\x1\xAC",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xAE",
				"\x1\xAF",
				"\x1\xB0",
				"\x1\xB1",
				"\x1\xB2",
				"\x1\xB3",
				"\x1\xB4",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xB6",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xB8",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xBA",
				"\x1\xBB",
				"\x1\xBC",
				"\x1\xBD",
				"\x1\xBE",
				"",
				"\x1\xBF",
				"\x1\xC0",
				"\x1\xC1",
				"\x1\xC2",
				"\x1\xC3",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xCB",
				"\x1\xCC",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xCE",
				"\x1\xCF",
				"\x1\xD0",
				"",
				"\x1\xD1",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\xD7",
				"\x1\xD8",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xDA",
				"\x1\xDB",
				"\x1\xDC",
				"",
				"\x1\xDD",
				"\x1\xDE",
				"\x1\xDF",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"",
				"\x1\xE1",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"\x1\xE3",
				"\x1\xE4",
				"\x1\xE5",
				"\x1\xE6",
				"",
				"",
				"\x1\xE7",
				"\x1\xE8",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xEA",
				"\x1\xEB",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xED",
				"\x1\xEE",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xF1",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"\x1\xF3",
				"\x1\xF4",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xF6",
				"\x1\xF7",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xFA",
				"",
				"\x1\xFB",
				"\x1\xFC",
				"",
				"",
				"\x1\xFD",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\xFF",
				"",
				"\x1\x100",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\x1\x104",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"\x1\x106",
				"\x1\x107",
				"",
				"",
				"",
				"\x1\x108",
				"",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"\xA\x2A\x7\xFFFF\x1A\x2A\x4\xFFFF\x1\x2A\x1\xFFFF\x1A\x2A",
				"",
				"",
				""
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | DIV | EQUALS | GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN | LOGICAL_AND | LOGICAL_OR | LSHIFT | MINUS | MOD | MUL | NOT_EQUALS | OR | PLUS | RSHIFT | STRICT_EQUALS | STRICT_NOT_EQUALS | XOR | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | T__141 | T__142 | T__143 | T__144 | T__145 | T__146 | NUMBER_LITERATE | HEX_LITERATE | BINARY_LITERATE | STRING_LITERATE | ASSIGNMENT | ASSIGN_PLUS | ASSIGN_MINUS | ASSIGN_MUL | ASSIGN_DIV | ASSIGN_REM | ASSIGN_AND | ASSIGN_OR | ASSIGN_REV | ASSIGN_LSHIFT | ASSIGN_RSHIFT | COMMA | LPAREN | RPAREN | LBRACE | RBRACE | LCURLY | RCURLY | COLON | DOT | NOT | INCREMENT | DECREMENT | CONDITION | ELSE | PRIVATE | PROTECTED | INTERNAL | PUBLIC | TYPE | LIT_TRUE | LIT_FALSE | THIS | LIT_NULL | UNDEFINED | NAN | INSTANCEOF | COMMENT | LINE_COMMENT | IDENTIFIER | NEWLINE | WS | SEMI );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Unvell.ReoScript
