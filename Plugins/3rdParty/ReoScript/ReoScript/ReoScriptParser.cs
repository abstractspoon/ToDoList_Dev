//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 E:\\dotnet-projects\\ReoScript\\ReoScript.g 2013-10-23 12:00:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace unvell.ReoScript
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
sealed internal partial class ReoScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ANONYMOUS_FUNCTION", "ARGUMENT_LIST", "ARRAY_ACCESS", "ARRAY_LITERAL", "ASSIGNMENT", "ASSIGN_AND", "ASSIGN_DIV", "ASSIGN_LSHIFT", "ASSIGN_MINUS", "ASSIGN_MUL", "ASSIGN_OR", "ASSIGN_PLUS", "ASSIGN_REM", "ASSIGN_REV", "ASSIGN_RSHIFT", "BINARY_LITERATE", "BLOCK", "BREAK", "CLASS", "COLON", "COMBINE_OBJECT", "COMMA", "COMMENT", "CONDITION", "CONST_VALUE", "CONTINUE", "CREATE", "DECLARATION", "DECREMENT", "DELETE_PROP", "DIV", "DOT", "ELSE", "EQUALS", "ESCAPE_SEQUENCE", "FOREACH_STATEMENT", "FOR_BODY", "FOR_CONDITION", "FOR_INIT", "FOR_ITERATOR", "FOR_STATEMENT", "FUNCTION_CALL", "FUNCTION_DEFINE", "FUN_BODY", "GREAT_EQUALS", "GREAT_THAN", "HEX_LITERATE", "IDENTIFIER", "IF_STATEMENT", "IMPORT", "INCREMENT", "INSTANCEOF", "INTERNAL", "LAMBDA_FUNCTION", "LBRACE", "LCURLY", "LESS_EQUALS", "LESS_THAN", "LINE_COMMENT", "LIT_FALSE", "LIT_NULL", "LIT_TRUE", "LOCAL_DECLARE_ASSIGNMENT", "LOGICAL_AND", "LOGICAL_OR", "LPAREN", "LSHIFT", "MEMBER_DECLARATION", "MEMBER_MODIFIER", "MINUS", "MOD", "MUL", "NAN", "NEWLINE", "NOT", "NOT_EQUALS", "NUMBER_LITERATE", "OBJECT_LITERAL", "OR", "PARAMETER_DEFINES", "PLUS", "POST_UNARY_STEP", "PRE_UNARY", "PRE_UNARY_STEP", "PRIVATE", "PROPERTY_ACCESS", "PROTECTED", "PUBLIC", "RANGE_LITERAL", "RBRACE", "RCURLY", "RETURN", "RPAREN", "RSHIFT", "SEMI", "STRICT_EQUALS", "STRICT_NOT_EQUALS", "STRING_LITERATE", "SWITCH", "SWITCH_CASE", "SWITCH_CASE_ELSE", "TAG", "TAG_ATTR", "TAG_ATTR_LIST", "TAG_NAME", "TEMPLATE_DEFINE", "TEMPLATE_TAG", "THIS", "TRY_CATCH", "TRY_CATCH_CASE", "TRY_CATCH_FINAL", "TRY_CATCH_TRHOW", "TYPE", "TYPEOF", "UNDEFINED", "WHILE_STATEMENT", "WS", "XOR", "'/>'", "'</'", "'=>'", "'break'", "'case'", "'catch'", "'continue'", "'default'", "'delete'", "'finally'", "'for'", "'function'", "'if'", "'import'", "'in'", "'new'", "'return'", "'switch'", "'template'", "'throw'", "'try'", "'typeof'", "'while'", "'~'"
	};
	public const int EOF=-1;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int AND=4;
	public const int ANONYMOUS_FUNCTION=5;
	public const int ARGUMENT_LIST=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_LITERAL=8;
	public const int ASSIGNMENT=9;
	public const int ASSIGN_AND=10;
	public const int ASSIGN_DIV=11;
	public const int ASSIGN_LSHIFT=12;
	public const int ASSIGN_MINUS=13;
	public const int ASSIGN_MUL=14;
	public const int ASSIGN_OR=15;
	public const int ASSIGN_PLUS=16;
	public const int ASSIGN_REM=17;
	public const int ASSIGN_REV=18;
	public const int ASSIGN_RSHIFT=19;
	public const int BINARY_LITERATE=20;
	public const int BLOCK=21;
	public const int BREAK=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMBINE_OBJECT=25;
	public const int COMMA=26;
	public const int COMMENT=27;
	public const int CONDITION=28;
	public const int CONST_VALUE=29;
	public const int CONTINUE=30;
	public const int CREATE=31;
	public const int DECLARATION=32;
	public const int DECREMENT=33;
	public const int DELETE_PROP=34;
	public const int DIV=35;
	public const int DOT=36;
	public const int ELSE=37;
	public const int EQUALS=38;
	public const int ESCAPE_SEQUENCE=39;
	public const int FOREACH_STATEMENT=40;
	public const int FOR_BODY=41;
	public const int FOR_CONDITION=42;
	public const int FOR_INIT=43;
	public const int FOR_ITERATOR=44;
	public const int FOR_STATEMENT=45;
	public const int FUNCTION_CALL=46;
	public const int FUNCTION_DEFINE=47;
	public const int FUN_BODY=48;
	public const int GREAT_EQUALS=49;
	public const int GREAT_THAN=50;
	public const int HEX_LITERATE=51;
	public const int IDENTIFIER=52;
	public const int IF_STATEMENT=53;
	public const int IMPORT=54;
	public const int INCREMENT=55;
	public const int INSTANCEOF=56;
	public const int INTERNAL=57;
	public const int LAMBDA_FUNCTION=58;
	public const int LBRACE=59;
	public const int LCURLY=60;
	public const int LESS_EQUALS=61;
	public const int LESS_THAN=62;
	public const int LINE_COMMENT=63;
	public const int LIT_FALSE=64;
	public const int LIT_NULL=65;
	public const int LIT_TRUE=66;
	public const int LOCAL_DECLARE_ASSIGNMENT=67;
	public const int LOGICAL_AND=68;
	public const int LOGICAL_OR=69;
	public const int LPAREN=70;
	public const int LSHIFT=71;
	public const int MEMBER_DECLARATION=72;
	public const int MEMBER_MODIFIER=73;
	public const int MINUS=74;
	public const int MOD=75;
	public const int MUL=76;
	public const int NAN=77;
	public const int NEWLINE=78;
	public const int NOT=79;
	public const int NOT_EQUALS=80;
	public const int NUMBER_LITERATE=81;
	public const int OBJECT_LITERAL=82;
	public const int OR=83;
	public const int PARAMETER_DEFINES=84;
	public const int PLUS=85;
	public const int POST_UNARY_STEP=86;
	public const int PRE_UNARY=87;
	public const int PRE_UNARY_STEP=88;
	public const int PRIVATE=89;
	public const int PROPERTY_ACCESS=90;
	public const int PROTECTED=91;
	public const int PUBLIC=92;
	public const int RANGE_LITERAL=93;
	public const int RBRACE=94;
	public const int RCURLY=95;
	public const int RETURN=96;
	public const int RPAREN=97;
	public const int RSHIFT=98;
	public const int SEMI=99;
	public const int STRICT_EQUALS=100;
	public const int STRICT_NOT_EQUALS=101;
	public const int STRING_LITERATE=102;
	public const int SWITCH=103;
	public const int SWITCH_CASE=104;
	public const int SWITCH_CASE_ELSE=105;
	public const int TAG=106;
	public const int TAG_ATTR=107;
	public const int TAG_ATTR_LIST=108;
	public const int TAG_NAME=109;
	public const int TEMPLATE_DEFINE=110;
	public const int TEMPLATE_TAG=111;
	public const int THIS=112;
	public const int TRY_CATCH=113;
	public const int TRY_CATCH_CASE=114;
	public const int TRY_CATCH_FINAL=115;
	public const int TRY_CATCH_TRHOW=116;
	public const int TYPE=117;
	public const int TYPEOF=118;
	public const int UNDEFINED=119;
	public const int WHILE_STATEMENT=120;
	public const int WS=121;
	public const int XOR=122;

	public ReoScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ReoScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ReoScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "E:\\dotnet-projects\\ReoScript\\ReoScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_script();
	partial void LeaveRule_script();

	// $ANTLR start "script"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:72:1: public script : ( statement )* ;
	[GrammarRule("script")]
	public AstParserRuleReturnScope<CommonTree, IToken> script()
	{
		EnterRule_script();
		EnterRule("script", 1);
		TraceIn("script", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "script");
		DebugLocation(72, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:73:2: ( ( statement )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:74:2: ( statement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(74, 2);
			PushLocalStack();
			DebugLocation(75, 2);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:75:2: ( statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==BINARY_LITERATE||LA1_0==DECREMENT||(LA1_0>=HEX_LITERATE && LA1_0<=IDENTIFIER)||LA1_0==INCREMENT||LA1_0==INTERNAL||(LA1_0>=LBRACE && LA1_0<=LCURLY)||(LA1_0>=LIT_FALSE && LA1_0<=LIT_TRUE)||LA1_0==LPAREN||LA1_0==NAN||LA1_0==NUMBER_LITERATE||LA1_0==PRIVATE||(LA1_0>=PROTECTED && LA1_0<=PUBLIC)||LA1_0==STRING_LITERATE||LA1_0==THIS||LA1_0==TYPE||LA1_0==UNDEFINED||LA1_0==126||LA1_0==129||LA1_0==131||(LA1_0>=133 && LA1_0<=136)||(LA1_0>=138 && LA1_0<=143)||LA1_0==145))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:75:2: statement
					{
					DebugLocation(75, 2);
					PushFollow(Follow._statement_in_script547);
					statement1=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(76, 2);
			PopLocalStack();

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("script", 1);
			LeaveRule("script", 1);
			LeaveRule_script();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "script"); }
		return retval;

	}
	// $ANTLR end "script"

	partial void EnterRule_function_defines();
	partial void LeaveRule_function_defines();

	// $ANTLR start "function_defines"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:79:1: function_defines : ( function_define )* ;
	[GrammarRule("function_defines")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_defines()
	{
		EnterRule_function_defines();
		EnterRule("function_defines", 2);
		TraceIn("function_defines", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> function_define2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "function_defines");
		DebugLocation(79, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:80:2: ( ( function_define )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:80:4: ( function_define )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(80, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:80:4: ( function_define )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==INTERNAL||LA2_0==PRIVATE||(LA2_0>=PROTECTED && LA2_0<=PUBLIC)||LA2_0==134))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:80:4: function_define
					{
					DebugLocation(80, 4);
					PushFollow(Follow._function_define_in_function_defines563);
					function_define2=function_define();
					PopFollow();

					adaptor.AddChild(root_0, function_define2.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_defines", 2);
			LeaveRule("function_defines", 2);
			LeaveRule_function_defines();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "function_defines"); }
		return retval;

	}
	// $ANTLR end "function_defines"

	partial void EnterRule_function_define();
	partial void LeaveRule_function_define();

	// $ANTLR start "function_define"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:83:1: function_define : (mod= memberModifier )? 'function' id= IDENTIFIER '(' (pl= parameterDeclarationList )? ')' body= functionBody ->;
	[GrammarRule("function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> function_define()
	{
		EnterRule_function_define();
		EnterRule("function_define", 3);
		TraceIn("function_define", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken string_literal3 = default(IToken);
		IToken char_literal4 = default(IToken);
		IToken char_literal5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> mod = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> pl = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> body = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree string_literal3_tree = default(CommonTree);
		CommonTree char_literal4_tree = default(CommonTree);
		CommonTree char_literal5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_memberModifier=new RewriteRuleSubtreeStream(adaptor,"rule memberModifier");
		RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "function_define");
		DebugLocation(83, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:84:2: ( (mod= memberModifier )? 'function' id= IDENTIFIER '(' (pl= parameterDeclarationList )? ')' body= functionBody ->)
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:85:2: (mod= memberModifier )? 'function' id= IDENTIFIER '(' (pl= parameterDeclarationList )? ')' body= functionBody
			{
			DebugLocation(85, 5);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:85:5: (mod= memberModifier )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==INTERNAL||LA3_0==PRIVATE||(LA3_0>=PROTECTED && LA3_0<=PUBLIC)))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:85:5: mod= memberModifier
				{
				DebugLocation(85, 5);
				PushFollow(Follow._memberModifier_in_function_define579);
				mod=memberModifier();
				PopFollow();

				stream_memberModifier.Add(mod.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(85, 22);
			string_literal3=(IToken)Match(input,134,Follow._134_in_function_define582);  
			stream_134.Add(string_literal3);

			DebugLocation(85, 35);
			id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_function_define586);  
			stream_IDENTIFIER.Add(id);

			DebugLocation(85, 47);
			char_literal4=(IToken)Match(input,LPAREN,Follow._LPAREN_in_function_define588);  
			stream_LPAREN.Add(char_literal4);

			DebugLocation(85, 53);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:85:53: (pl= parameterDeclarationList )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==IDENTIFIER))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:85:53: pl= parameterDeclarationList
				{
				DebugLocation(85, 53);
				PushFollow(Follow._parameterDeclarationList_in_function_define592);
				pl=parameterDeclarationList();
				PopFollow();

				stream_parameterDeclarationList.Add(pl.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(85, 80);
			char_literal5=(IToken)Match(input,RPAREN,Follow._RPAREN_in_function_define595);  
			stream_RPAREN.Add(char_literal5);

			DebugLocation(85, 88);
			PushFollow(Follow._functionBody_in_function_define599);
			body=functionBody();
			PopFollow();

			stream_functionBody.Add(body.Tree);


			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 89:3: ->
			{
				DebugLocation(89, 6);
				adaptor.AddChild(root_0, DefineLocalFunction(id.Text, pl == null ? null : pl.Tree, body.Tree, 
						mod == null ? 0 : mod.Tree.Type, retval.Start.Line, retval.Start.CharPositionInLine));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_define", 3);
			LeaveRule("function_define", 3);
			LeaveRule_function_define();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "function_define"); }
		return retval;

	}
	// $ANTLR end "function_define"

	partial void EnterRule_anonymous_function_define();
	partial void LeaveRule_anonymous_function_define();

	// $ANTLR start "anonymous_function_define"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:96:1: anonymous_function_define : ( 'function' '(' (pl= parameterDeclarationList )? ')' b= functionBody ->| '(' (pl= parameterDeclarationList )? ')' '=>' (b= functionBody ->|exp= assignmentExpression ->) |id= IDENTIFIER '=>' (b= functionBody ->|exp= assignmentExpression ->) );
	[GrammarRule("anonymous_function_define")]
	private AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define()
	{
		EnterRule_anonymous_function_define();
		EnterRule("anonymous_function_define", 4);
		TraceIn("anonymous_function_define", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken string_literal6 = default(IToken);
		IToken char_literal7 = default(IToken);
		IToken char_literal8 = default(IToken);
		IToken char_literal9 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken string_literal11 = default(IToken);
		IToken string_literal12 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> pl = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree string_literal6_tree = default(CommonTree);
		CommonTree char_literal7_tree = default(CommonTree);
		CommonTree char_literal8_tree = default(CommonTree);
		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree string_literal11_tree = default(CommonTree);
		CommonTree string_literal12_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_functionBody=new RewriteRuleSubtreeStream(adaptor,"rule functionBody");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "anonymous_function_define");
		DebugLocation(96, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:97:2: ( 'function' '(' (pl= parameterDeclarationList )? ')' b= functionBody ->| '(' (pl= parameterDeclarationList )? ')' '=>' (b= functionBody ->|exp= assignmentExpression ->) |id= IDENTIFIER '=>' (b= functionBody ->|exp= assignmentExpression ->) )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 134:
				{
				alt9 = 1;
				}
				break;
			case LPAREN:
				{
				alt9 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:97:4: 'function' '(' (pl= parameterDeclarationList )? ')' b= functionBody
				{
				DebugLocation(97, 4);
				string_literal6=(IToken)Match(input,134,Follow._134_in_anonymous_function_define630);  
				stream_134.Add(string_literal6);

				DebugLocation(97, 15);
				char_literal7=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define632);  
				stream_LPAREN.Add(char_literal7);

				DebugLocation(97, 21);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:97:21: (pl= parameterDeclarationList )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==IDENTIFIER))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:97:21: pl= parameterDeclarationList
					{
					DebugLocation(97, 21);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define636);
					pl=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(pl.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(97, 48);
				char_literal8=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define639);  
				stream_RPAREN.Add(char_literal8);

				DebugLocation(97, 53);
				PushFollow(Follow._functionBody_in_anonymous_function_define643);
				b=functionBody();
				PopFollow();

				stream_functionBody.Add(b.Tree);


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 98:3: ->
				{
					DebugLocation(98, 6);
					adaptor.AddChild(root_0, DefineAnonymousFunction(null, pl == null ? null : pl.Tree, b.Tree, 
							0, retval.Start.Line, retval.Start.CharPositionInLine));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:101:4: '(' (pl= parameterDeclarationList )? ')' '=>' (b= functionBody ->|exp= assignmentExpression ->)
				{
				DebugLocation(101, 4);
				char_literal9=(IToken)Match(input,LPAREN,Follow._LPAREN_in_anonymous_function_define655);  
				stream_LPAREN.Add(char_literal9);

				DebugLocation(101, 10);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:101:10: (pl= parameterDeclarationList )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==IDENTIFIER))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:101:10: pl= parameterDeclarationList
					{
					DebugLocation(101, 10);
					PushFollow(Follow._parameterDeclarationList_in_anonymous_function_define659);
					pl=parameterDeclarationList();
					PopFollow();

					stream_parameterDeclarationList.Add(pl.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(101, 37);
				char_literal10=(IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_define662);  
				stream_RPAREN.Add(char_literal10);

				DebugLocation(101, 41);
				string_literal11=(IToken)Match(input,125,Follow._125_in_anonymous_function_define664);  
				stream_125.Add(string_literal11);

				DebugLocation(101, 46);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:101:46: (b= functionBody ->|exp= assignmentExpression ->)
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case INTERNAL:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case PRIVATE:
					case PROTECTED:
					case PUBLIC:
					case THIS:
					case TYPE:
					case 126:
					case 129:
					case 131:
					case 133:
					case 134:
					case 135:
					case 136:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 145:
						{
						alt7 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA7_4 = input.LA(3);

						if (((LA7_4>=ASSIGNMENT && LA7_4<=ASSIGN_RSHIFT)||LA7_4==DECREMENT||LA7_4==DOT||LA7_4==INCREMENT||(LA7_4>=LBRACE && LA7_4<=LCURLY)||LA7_4==LPAREN||LA7_4==SEMI||LA7_4==125))
						{
							alt7 = 1;
						}
						else if ((LA7_4==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA7_5 = input.LA(3);

						if (((LA7_5>=ASSIGNMENT && LA7_5<=ASSIGN_RSHIFT)||LA7_5==DECREMENT||LA7_5==DOT||LA7_5==INCREMENT||(LA7_5>=LBRACE && LA7_5<=LCURLY)||LA7_5==LPAREN||LA7_5==SEMI))
						{
							alt7 = 1;
						}
						else if ((LA7_5==COLON))
						{
							alt7 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case HEX_LITERATE:
					case LIT_FALSE:
					case LIT_NULL:
					case LIT_TRUE:
					case NAN:
					case NUMBER_LITERATE:
					case RCURLY:
					case UNDEFINED:
						{
						alt7 = 1;
						}
						break;
					case COMMA:
						{
						alt7 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 7, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA7_0==BINARY_LITERATE||LA7_0==DECREMENT||(LA7_0>=HEX_LITERATE && LA7_0<=IDENTIFIER)||LA7_0==INCREMENT||LA7_0==LBRACE||(LA7_0>=LIT_FALSE && LA7_0<=LIT_TRUE)||LA7_0==LPAREN||LA7_0==MINUS||LA7_0==NAN||LA7_0==NOT||LA7_0==NUMBER_LITERATE||LA7_0==PLUS||LA7_0==STRING_LITERATE||LA7_0==THIS||LA7_0==UNDEFINED||LA7_0==134||LA7_0==138||LA7_0==144||LA7_0==146))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:102:5: b= functionBody
					{
					DebugLocation(102, 6);
					PushFollow(Follow._functionBody_in_anonymous_function_define674);
					b=functionBody();
					PopFollow();

					stream_functionBody.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 103:6: ->
					{
						DebugLocation(103, 9);
						adaptor.AddChild(root_0, DefineAnonymousFunction(null, pl == null ? null : pl.Tree, b.Tree,
								  	0, retval.Start.Line, retval.Start.CharPositionInLine));

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:106:5: exp= assignmentExpression
					{
					DebugLocation(106, 8);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define692);
					exp=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(exp.Tree);


					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 107:4: ->
					{
						DebugLocation(107, 7);
						adaptor.AddChild(root_0, DefineAnonymousFunction(null, pl == null ? null : pl.Tree, 
						   				(CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), exp.Tree),
						   				0, retval.Start.Line, retval.Start.CharPositionInLine));

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:112:4: id= IDENTIFIER '=>' (b= functionBody ->|exp= assignmentExpression ->)
				{
				DebugLocation(112, 6);
				id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_anonymous_function_define711);  
				stream_IDENTIFIER.Add(id);

				DebugLocation(112, 18);
				string_literal12=(IToken)Match(input,125,Follow._125_in_anonymous_function_define713);  
				stream_125.Add(string_literal12);

				DebugLocation(112, 23);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:112:23: (b= functionBody ->|exp= assignmentExpression ->)
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==LCURLY))
				{
					switch (input.LA(2))
					{
					case DECREMENT:
					case INCREMENT:
					case INTERNAL:
					case LBRACE:
					case LCURLY:
					case LPAREN:
					case PRIVATE:
					case PROTECTED:
					case PUBLIC:
					case THIS:
					case TYPE:
					case 126:
					case 129:
					case 131:
					case 133:
					case 134:
					case 135:
					case 136:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 145:
						{
						alt8 = 1;
						}
						break;
					case IDENTIFIER:
						{
						int LA8_4 = input.LA(3);

						if (((LA8_4>=ASSIGNMENT && LA8_4<=ASSIGN_RSHIFT)||LA8_4==DECREMENT||LA8_4==DOT||LA8_4==INCREMENT||(LA8_4>=LBRACE && LA8_4<=LCURLY)||LA8_4==LPAREN||LA8_4==SEMI||LA8_4==125))
						{
							alt8 = 1;
						}
						else if ((LA8_4==COLON))
						{
							alt8 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case STRING_LITERATE:
						{
						int LA8_5 = input.LA(3);

						if (((LA8_5>=ASSIGNMENT && LA8_5<=ASSIGN_RSHIFT)||LA8_5==DECREMENT||LA8_5==DOT||LA8_5==INCREMENT||(LA8_5>=LBRACE && LA8_5<=LCURLY)||LA8_5==LPAREN||LA8_5==SEMI))
						{
							alt8 = 1;
						}
						else if ((LA8_5==COLON))
						{
							alt8 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case HEX_LITERATE:
					case LIT_FALSE:
					case LIT_NULL:
					case LIT_TRUE:
					case NAN:
					case NUMBER_LITERATE:
					case RCURLY:
					case UNDEFINED:
						{
						alt8 = 1;
						}
						break;
					case COMMA:
						{
						alt8 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else if ((LA8_0==BINARY_LITERATE||LA8_0==DECREMENT||(LA8_0>=HEX_LITERATE && LA8_0<=IDENTIFIER)||LA8_0==INCREMENT||LA8_0==LBRACE||(LA8_0>=LIT_FALSE && LA8_0<=LIT_TRUE)||LA8_0==LPAREN||LA8_0==MINUS||LA8_0==NAN||LA8_0==NOT||LA8_0==NUMBER_LITERATE||LA8_0==PLUS||LA8_0==STRING_LITERATE||LA8_0==THIS||LA8_0==UNDEFINED||LA8_0==134||LA8_0==138||LA8_0==144||LA8_0==146))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:113:5: b= functionBody
					{
					DebugLocation(113, 6);
					PushFollow(Follow._functionBody_in_anonymous_function_define723);
					b=functionBody();
					PopFollow();

					stream_functionBody.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 114:6: ->
					{
						DebugLocation(114, 9);
						adaptor.AddChild(root_0, DefineAnonymousFunction(id.Text, null, b.Tree,
								  	0, retval.Start.Line, retval.Start.CharPositionInLine));

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:117:5: exp= assignmentExpression
					{
					DebugLocation(117, 8);
					PushFollow(Follow._assignmentExpression_in_anonymous_function_define741);
					exp=assignmentExpression();
					PopFollow();

					stream_assignmentExpression.Add(exp.Tree);


					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 118:4: ->
					{
						DebugLocation(118, 7);
						adaptor.AddChild(root_0, DefineAnonymousFunction(id.Text, null, 
						   				(CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), exp.Tree),
						   				0, retval.Start.Line, retval.Start.CharPositionInLine));

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(8); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_define", 4);
			LeaveRule("anonymous_function_define", 4);
			LeaveRule_anonymous_function_define();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_define"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_define"

	partial void EnterRule_parameterDeclarationList();
	partial void LeaveRule_parameterDeclarationList();

	// $ANTLR start "parameterDeclarationList"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:125:1: parameterDeclarationList : IDENTIFIER ( COMMA ! IDENTIFIER )* ;
	[GrammarRule("parameterDeclarationList")]
	private AstParserRuleReturnScope<CommonTree, IToken> parameterDeclarationList()
	{
		EnterRule_parameterDeclarationList();
		EnterRule("parameterDeclarationList", 5);
		TraceIn("parameterDeclarationList", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER13 = default(IToken);
		IToken COMMA14 = default(IToken);
		IToken IDENTIFIER15 = default(IToken);

		CommonTree IDENTIFIER13_tree = default(CommonTree);
		CommonTree COMMA14_tree = default(CommonTree);
		CommonTree IDENTIFIER15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "parameterDeclarationList");
		DebugLocation(125, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:126:2: ( IDENTIFIER ( COMMA ! IDENTIFIER )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:126:4: IDENTIFIER ( COMMA ! IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(126, 4);
			IDENTIFIER13=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList764); 
			IDENTIFIER13_tree = (CommonTree)adaptor.Create(IDENTIFIER13);
			adaptor.AddChild(root_0, IDENTIFIER13_tree);
			DebugLocation(126, 15);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:126:15: ( COMMA ! IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==COMMA))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:126:16: COMMA ! IDENTIFIER
					{
					DebugLocation(126, 21);
					COMMA14=(IToken)Match(input,COMMA,Follow._COMMA_in_parameterDeclarationList767); 
					DebugLocation(126, 23);
					IDENTIFIER15=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_parameterDeclarationList770); 
					IDENTIFIER15_tree = (CommonTree)adaptor.Create(IDENTIFIER15);
					adaptor.AddChild(root_0, IDENTIFIER15_tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameterDeclarationList", 5);
			LeaveRule("parameterDeclarationList", 5);
			LeaveRule_parameterDeclarationList();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "parameterDeclarationList"); }
		return retval;

	}
	// $ANTLR end "parameterDeclarationList"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:129:1: block : '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 6);
		TraceIn("block", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal16 = default(IToken);
		IToken char_literal18 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement17 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal16_tree = default(CommonTree);
		CommonTree char_literal18_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(129, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:130:2: ( '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:130:4: '{' ( statement )* '}'
			{
			DebugLocation(130, 4);
			char_literal16=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block784);  
			stream_LCURLY.Add(char_literal16);

			DebugLocation(130, 8);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:130:8: ( statement )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==BINARY_LITERATE||LA11_0==DECREMENT||(LA11_0>=HEX_LITERATE && LA11_0<=IDENTIFIER)||LA11_0==INCREMENT||LA11_0==INTERNAL||(LA11_0>=LBRACE && LA11_0<=LCURLY)||(LA11_0>=LIT_FALSE && LA11_0<=LIT_TRUE)||LA11_0==LPAREN||LA11_0==NAN||LA11_0==NUMBER_LITERATE||LA11_0==PRIVATE||(LA11_0>=PROTECTED && LA11_0<=PUBLIC)||LA11_0==STRING_LITERATE||LA11_0==THIS||LA11_0==TYPE||LA11_0==UNDEFINED||LA11_0==126||LA11_0==129||LA11_0==131||(LA11_0>=133 && LA11_0<=136)||(LA11_0>=138 && LA11_0<=143)||LA11_0==145))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:130:8: statement
					{
					DebugLocation(130, 8);
					PushFollow(Follow._statement_in_block786);
					statement17=statement();
					PopFollow();

					stream_statement.Add(statement17.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(130, 19);
			char_literal18=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block789);  
			stream_RCURLY.Add(char_literal18);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 131:3: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(131, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:131:6: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(131, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(131, 14);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:131:14: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(131, 14);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 6);
			LeaveRule("block", 6);
			LeaveRule_block();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();

	// $ANTLR start "functionBody"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:134:1: functionBody : '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("functionBody")]
	private AstParserRuleReturnScope<CommonTree, IToken> functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 7);
		TraceIn("functionBody", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal19 = default(IToken);
		IToken char_literal21 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statement20 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal19_tree = default(CommonTree);
		CommonTree char_literal21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(134, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:135:2: ( '{' ( statement )* '}' -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:136:2: '{' ( statement )* '}'
			{
			DebugLocation(136, 2);
			char_literal19=(IToken)Match(input,LCURLY,Follow._LCURLY_in_functionBody813);  
			stream_LCURLY.Add(char_literal19);

			DebugLocation(137, 2);
			PushLocalStack();
			DebugLocation(138, 3);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:138:3: ( statement )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==BINARY_LITERATE||LA12_0==DECREMENT||(LA12_0>=HEX_LITERATE && LA12_0<=IDENTIFIER)||LA12_0==INCREMENT||LA12_0==INTERNAL||(LA12_0>=LBRACE && LA12_0<=LCURLY)||(LA12_0>=LIT_FALSE && LA12_0<=LIT_TRUE)||LA12_0==LPAREN||LA12_0==NAN||LA12_0==NUMBER_LITERATE||LA12_0==PRIVATE||(LA12_0>=PROTECTED && LA12_0<=PUBLIC)||LA12_0==STRING_LITERATE||LA12_0==THIS||LA12_0==TYPE||LA12_0==UNDEFINED||LA12_0==126||LA12_0==129||LA12_0==131||(LA12_0>=133 && LA12_0<=136)||(LA12_0>=138 && LA12_0<=143)||LA12_0==145))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:138:3: statement
					{
					DebugLocation(138, 3);
					PushFollow(Follow._statement_in_functionBody820);
					statement20=statement();
					PopFollow();

					stream_statement.Add(statement20.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(139, 2);
			PopLocalStack();
			DebugLocation(140, 2);
			char_literal21=(IToken)Match(input,RCURLY,Follow._RCURLY_in_functionBody827);  
			stream_RCURLY.Add(char_literal21);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 141:2: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(141, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:141:5: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(141, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(141, 13);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:141:13: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(141, 13);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionBody", 7);
			LeaveRule("functionBody", 7);
			LeaveRule_functionBody();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return retval;

	}
	// $ANTLR end "functionBody"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:156:1: statement : ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | tagTemplateDefine ( SEMI !)? | embeddedStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 8);
		TraceIn("statement", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI23 = default(IToken);
		IToken SEMI25 = default(IToken);
		IToken SEMI27 = default(IToken);
		IToken SEMI29 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> importStatement22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> function_define26 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tagTemplateDefine28 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI23_tree = default(CommonTree);
		CommonTree SEMI25_tree = default(CommonTree);
		CommonTree SEMI27_tree = default(CommonTree);
		CommonTree SEMI29_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(156, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:157:2: ( importStatement SEMI !| localVariableDeclaration SEMI !| function_define ( SEMI !)? | tagTemplateDefine ( SEMI !)? | embeddedStatement )
			int alt15=5;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case 136:
				{
				alt15 = 1;
				}
				break;
			case TYPE:
				{
				alt15 = 2;
				}
				break;
			case INTERNAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
				{
				int LA15_3 = input.LA(2);

				if ((LA15_3==134))
				{
					alt15 = 3;
				}
				else if ((LA15_3==141))
				{
					alt15 = 4;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 134:
				{
				int LA15_4 = input.LA(2);

				if ((LA15_4==IDENTIFIER))
				{
					alt15 = 3;
				}
				else if ((LA15_4==LPAREN))
				{
					alt15 = 5;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 141:
				{
				alt15 = 4;
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LCURLY:
			case LIT_FALSE:
			case LIT_NULL:
			case LIT_TRUE:
			case LPAREN:
			case NAN:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case UNDEFINED:
			case 126:
			case 129:
			case 131:
			case 133:
			case 135:
			case 138:
			case 139:
			case 140:
			case 142:
			case 143:
			case 145:
				{
				alt15 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:158:4: importStatement SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._importStatement_in_statement857);
				importStatement22=importStatement();
				PopFollow();

				adaptor.AddChild(root_0, importStatement22.Tree);
				DebugLocation(158, 24);
				SEMI23=(IToken)Match(input,SEMI,Follow._SEMI_in_statement859); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:159:4: localVariableDeclaration SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._localVariableDeclaration_in_statement865);
				localVariableDeclaration24=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration24.Tree);
				DebugLocation(159, 33);
				SEMI25=(IToken)Match(input,SEMI,Follow._SEMI_in_statement867); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:160:4: function_define ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._function_define_in_statement873);
				function_define26=function_define();
				PopFollow();

				adaptor.AddChild(root_0, function_define26.Tree);
				DebugLocation(160, 24);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:160:24: ( SEMI !)?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==SEMI))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:160:24: SEMI !
					{
					DebugLocation(160, 24);
					SEMI27=(IToken)Match(input,SEMI,Follow._SEMI_in_statement875); 

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:162:4: tagTemplateDefine ( SEMI !)?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._tagTemplateDefine_in_statement883);
				tagTemplateDefine28=tagTemplateDefine();
				PopFollow();

				adaptor.AddChild(root_0, tagTemplateDefine28.Tree);
				DebugLocation(162, 26);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:162:26: ( SEMI !)?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==SEMI))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:162:26: SEMI !
					{
					DebugLocation(162, 26);
					SEMI29=(IToken)Match(input,SEMI,Follow._SEMI_in_statement885); 

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:163:4: embeddedStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(163, 4);
				PushFollow(Follow._embeddedStatement_in_statement892);
				embeddedStatement30=embeddedStatement();
				PopFollow();

				adaptor.AddChild(root_0, embeddedStatement30.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 8);
			LeaveRule("statement", 8);
			LeaveRule_statement();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_importStatement();
	partial void LeaveRule_importStatement();

	// $ANTLR start "importStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:166:1: importStatement : 'import' ( namespaceDeclare -> ^( IMPORT namespaceDeclare ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) ) ;
	[GrammarRule("importStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> importStatement()
	{
		EnterRule_importStatement();
		EnterRule("importStatement", 9);
		TraceIn("importStatement", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal31 = default(IToken);
		IToken STRING_LITERATE33 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> namespaceDeclare32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal31_tree = default(CommonTree);
		CommonTree STRING_LITERATE33_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERATE=new RewriteRuleITokenStream(adaptor,"token STRING_LITERATE");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleSubtreeStream stream_namespaceDeclare=new RewriteRuleSubtreeStream(adaptor,"rule namespaceDeclare");
		try { DebugEnterRule(GrammarFileName, "importStatement");
		DebugLocation(166, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:167:2: ( 'import' ( namespaceDeclare -> ^( IMPORT namespaceDeclare ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:167:4: 'import' ( namespaceDeclare -> ^( IMPORT namespaceDeclare ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) )
			{
			DebugLocation(167, 4);
			string_literal31=(IToken)Match(input,136,Follow._136_in_importStatement903);  
			stream_136.Add(string_literal31);

			DebugLocation(168, 3);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:168:3: ( namespaceDeclare -> ^( IMPORT namespaceDeclare ) | STRING_LITERATE -> ^( IMPORT STRING_LITERATE ) )
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==IDENTIFIER))
			{
				alt16 = 1;
			}
			else if ((LA16_0==STRING_LITERATE))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:169:5: namespaceDeclare
				{
				DebugLocation(169, 5);
				PushFollow(Follow._namespaceDeclare_in_importStatement914);
				namespaceDeclare32=namespaceDeclare();
				PopFollow();

				stream_namespaceDeclare.Add(namespaceDeclare32.Tree);


				{
				// AST REWRITE
				// elements: namespaceDeclare
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 169:23: -> ^( IMPORT namespaceDeclare )
				{
					DebugLocation(169, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:169:26: ^( IMPORT namespaceDeclare )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(169, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(169, 35);
					adaptor.AddChild(root_1, stream_namespaceDeclare.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:170:5: STRING_LITERATE
				{
				DebugLocation(170, 5);
				STRING_LITERATE33=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_importStatement929);  
				stream_STRING_LITERATE.Add(STRING_LITERATE33);



				{
				// AST REWRITE
				// elements: STRING_LITERATE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 170:23: -> ^( IMPORT STRING_LITERATE )
				{
					DebugLocation(170, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:170:26: ^( IMPORT STRING_LITERATE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(170, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IMPORT, "IMPORT"), root_1);

					DebugLocation(170, 35);
					adaptor.AddChild(root_1, stream_STRING_LITERATE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importStatement", 9);
			LeaveRule("importStatement", 9);
			LeaveRule_importStatement();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "importStatement"); }
		return retval;

	}
	// $ANTLR end "importStatement"

	partial void EnterRule_namespaceDeclare();
	partial void LeaveRule_namespaceDeclare();

	// $ANTLR start "namespaceDeclare"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:174:1: namespaceDeclare : IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* ;
	[GrammarRule("namespaceDeclare")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespaceDeclare()
	{
		EnterRule_namespaceDeclare();
		EnterRule("namespaceDeclare", 10);
		TraceIn("namespaceDeclare", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER34 = default(IToken);
		IToken char_literal35 = default(IToken);
		IToken set36 = default(IToken);

		CommonTree IDENTIFIER34_tree = default(CommonTree);
		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree set36_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "namespaceDeclare");
		DebugLocation(174, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:175:2: ( IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:175:4: IDENTIFIER ( '.' ( IDENTIFIER | '*' ) )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(175, 4);
			IDENTIFIER34=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_namespaceDeclare954); 
			IDENTIFIER34_tree = (CommonTree)adaptor.Create(IDENTIFIER34);
			adaptor.AddChild(root_0, IDENTIFIER34_tree);
			DebugLocation(175, 15);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:175:15: ( '.' ( IDENTIFIER | '*' ) )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==DOT))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:175:16: '.' ( IDENTIFIER | '*' )
					{
					DebugLocation(175, 16);
					char_literal35=(IToken)Match(input,DOT,Follow._DOT_in_namespaceDeclare957); 
					char_literal35_tree = (CommonTree)adaptor.Create(char_literal35);
					adaptor.AddChild(root_0, char_literal35_tree);
					DebugLocation(175, 20);

					set36=(IToken)input.LT(1);
					if (input.LA(1)==IDENTIFIER||input.LA(1)==MUL)
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set36));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespaceDeclare", 10);
			LeaveRule("namespaceDeclare", 10);
			LeaveRule_namespaceDeclare();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "namespaceDeclare"); }
		return retval;

	}
	// $ANTLR end "namespaceDeclare"

	partial void EnterRule_embeddedStatement();
	partial void LeaveRule_embeddedStatement();

	// $ANTLR start "embeddedStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:178:1: embeddedStatement : ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement | tryCatchStatement );
	[GrammarRule("embeddedStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement()
	{
		EnterRule_embeddedStatement();
		EnterRule("embeddedStatement", 11);
		TraceIn("embeddedStatement", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken SEMI39 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> block37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ifelse40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> forStatement41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> foreachStatement42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> whileStatement43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchStatement44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> terminalStatement45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tryCatchStatement46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree SEMI39_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "embeddedStatement");
		DebugLocation(178, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:179:2: ( block | statementExpression SEMI !| ifelse | forStatement | foreachStatement | whileStatement | switchStatement | terminalStatement | tryCatchStatement )
			int alt18=9;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case LCURLY:
				{
				switch (input.LA(2))
				{
				case BINARY_LITERATE:
				case DECREMENT:
				case HEX_LITERATE:
				case INCREMENT:
				case INTERNAL:
				case LBRACE:
				case LCURLY:
				case LIT_FALSE:
				case LIT_NULL:
				case LIT_TRUE:
				case LPAREN:
				case NAN:
				case NUMBER_LITERATE:
				case PRIVATE:
				case PROTECTED:
				case PUBLIC:
				case THIS:
				case TYPE:
				case UNDEFINED:
				case 126:
				case 129:
				case 131:
				case 133:
				case 134:
				case 135:
				case 136:
				case 138:
				case 139:
				case 140:
				case 141:
				case 142:
				case 143:
				case 145:
					{
					alt18 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA18_10 = input.LA(3);

					if (((LA18_10>=ASSIGNMENT && LA18_10<=ASSIGN_RSHIFT)||LA18_10==DECREMENT||LA18_10==DOT||LA18_10==INCREMENT||(LA18_10>=LBRACE && LA18_10<=LCURLY)||LA18_10==LPAREN||LA18_10==SEMI||LA18_10==125))
					{
						alt18 = 1;
					}
					else if ((LA18_10==COLON))
					{
						alt18 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING_LITERATE:
					{
					int LA18_11 = input.LA(3);

					if (((LA18_11>=ASSIGNMENT && LA18_11<=ASSIGN_RSHIFT)||LA18_11==DECREMENT||LA18_11==DOT||LA18_11==INCREMENT||(LA18_11>=LBRACE && LA18_11<=LCURLY)||LA18_11==LPAREN||LA18_11==SEMI))
					{
						alt18 = 1;
					}
					else if ((LA18_11==COLON))
					{
						alt18 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case RCURLY:
					{
					switch (input.LA(3))
					{
					case EOF:
					case BINARY_LITERATE:
					case ELSE:
					case HEX_LITERATE:
					case IDENTIFIER:
					case INTERNAL:
					case LBRACE:
					case LCURLY:
					case LESS_THAN:
					case LIT_FALSE:
					case LIT_NULL:
					case LIT_TRUE:
					case LPAREN:
					case NAN:
					case NUMBER_LITERATE:
					case PRIVATE:
					case PROTECTED:
					case PUBLIC:
					case RCURLY:
					case STRING_LITERATE:
					case THIS:
					case TYPE:
					case UNDEFINED:
					case 124:
					case 126:
					case 127:
					case 129:
					case 130:
					case 131:
					case 133:
					case 134:
					case 135:
					case 136:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 145:
						{
						alt18 = 1;
						}
						break;
					case INCREMENT:
						{
						int LA18_14 = input.LA(4);

						if ((LA18_14==BINARY_LITERATE||(LA18_14>=HEX_LITERATE && LA18_14<=IDENTIFIER)||(LA18_14>=LBRACE && LA18_14<=LCURLY)||(LA18_14>=LIT_FALSE && LA18_14<=LIT_TRUE)||LA18_14==LPAREN||LA18_14==NAN||LA18_14==NUMBER_LITERATE||LA18_14==STRING_LITERATE||LA18_14==THIS||LA18_14==UNDEFINED||LA18_14==134))
						{
							alt18 = 1;
						}
						else if ((LA18_14==SEMI))
						{
							alt18 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 18, 14, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case DECREMENT:
						{
						int LA18_15 = input.LA(4);

						if ((LA18_15==BINARY_LITERATE||(LA18_15>=HEX_LITERATE && LA18_15<=IDENTIFIER)||(LA18_15>=LBRACE && LA18_15<=LCURLY)||(LA18_15>=LIT_FALSE && LA18_15<=LIT_TRUE)||LA18_15==LPAREN||LA18_15==NAN||LA18_15==NUMBER_LITERATE||LA18_15==STRING_LITERATE||LA18_15==THIS||LA18_15==UNDEFINED||LA18_15==134))
						{
							alt18 = 1;
						}
						else if ((LA18_15==SEMI))
						{
							alt18 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 18, 15, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case ASSIGNMENT:
					case ASSIGN_AND:
					case ASSIGN_DIV:
					case ASSIGN_LSHIFT:
					case ASSIGN_MINUS:
					case ASSIGN_MUL:
					case ASSIGN_OR:
					case ASSIGN_PLUS:
					case ASSIGN_REM:
					case ASSIGN_REV:
					case ASSIGN_RSHIFT:
					case DOT:
					case SEMI:
						{
						alt18 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 18, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case COMMA:
					{
					alt18 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case LBRACE:
			case LIT_FALSE:
			case LIT_NULL:
			case LIT_TRUE:
			case LPAREN:
			case NAN:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case UNDEFINED:
			case 131:
			case 134:
			case 138:
				{
				alt18 = 2;
				}
				break;
			case 135:
				{
				alt18 = 3;
				}
				break;
			case 133:
				{
				int LA18_4 = input.LA(2);

				if ((LA18_4==LPAREN))
				{
					switch (input.LA(3))
					{
					case TYPE:
						{
						int LA18_16 = input.LA(4);

						if ((LA18_16==IDENTIFIER))
						{
							int LA18_19 = input.LA(5);

							if ((LA18_19==137))
							{
								alt18 = 5;
							}
							else if ((LA18_19==ASSIGNMENT||LA18_19==COMMA||LA18_19==SEMI))
							{
								alt18 = 4;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 18, 19, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 18, 16, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA18_17 = input.LA(4);

						if (((LA18_17>=ASSIGNMENT && LA18_17<=ASSIGN_RSHIFT)||LA18_17==COMMA||LA18_17==DECREMENT||LA18_17==DOT||LA18_17==INCREMENT||(LA18_17>=LBRACE && LA18_17<=LCURLY)||LA18_17==LPAREN||LA18_17==SEMI||LA18_17==125))
						{
							alt18 = 4;
						}
						else if ((LA18_17==137))
						{
							alt18 = 5;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 18, 17, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LIT_FALSE:
					case LIT_NULL:
					case LIT_TRUE:
					case LPAREN:
					case NAN:
					case NUMBER_LITERATE:
					case SEMI:
					case STRING_LITERATE:
					case THIS:
					case UNDEFINED:
					case 131:
					case 134:
					case 138:
						{
						alt18 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 18, 13, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 145:
				{
				alt18 = 6;
				}
				break;
			case 140:
				{
				alt18 = 7;
				}
				break;
			case 126:
			case 129:
			case 139:
				{
				alt18 = 8;
				}
				break;
			case 142:
			case 143:
				{
				alt18 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:180:4: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._block_in_embeddedStatement980);
				block37=block();
				PopFollow();

				adaptor.AddChild(root_0, block37.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:181:4: statementExpression SEMI !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._statementExpression_in_embeddedStatement985);
				statementExpression38=statementExpression();
				PopFollow();

				adaptor.AddChild(root_0, statementExpression38.Tree);
				DebugLocation(181, 28);
				SEMI39=(IToken)Match(input,SEMI,Follow._SEMI_in_embeddedStatement987); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:182:4: ifelse
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._ifelse_in_embeddedStatement993);
				ifelse40=ifelse();
				PopFollow();

				adaptor.AddChild(root_0, ifelse40.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:183:4: forStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._forStatement_in_embeddedStatement998);
				forStatement41=forStatement();
				PopFollow();

				adaptor.AddChild(root_0, forStatement41.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:184:4: foreachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._foreachStatement_in_embeddedStatement1003);
				foreachStatement42=foreachStatement();
				PopFollow();

				adaptor.AddChild(root_0, foreachStatement42.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:185:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				PushFollow(Follow._whileStatement_in_embeddedStatement1008);
				whileStatement43=whileStatement();
				PopFollow();

				adaptor.AddChild(root_0, whileStatement43.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:186:4: switchStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._switchStatement_in_embeddedStatement1013);
				switchStatement44=switchStatement();
				PopFollow();

				adaptor.AddChild(root_0, switchStatement44.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:187:4: terminalStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				PushFollow(Follow._terminalStatement_in_embeddedStatement1018);
				terminalStatement45=terminalStatement();
				PopFollow();

				adaptor.AddChild(root_0, terminalStatement45.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:188:4: tryCatchStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._tryCatchStatement_in_embeddedStatement1023);
				tryCatchStatement46=tryCatchStatement();
				PopFollow();

				adaptor.AddChild(root_0, tryCatchStatement46.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embeddedStatement", 11);
			LeaveRule("embeddedStatement", 11);
			LeaveRule_embeddedStatement();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "embeddedStatement"); }
		return retval;

	}
	// $ANTLR end "embeddedStatement"

	partial void EnterRule_statementExpression();
	partial void LeaveRule_statementExpression();

	// $ANTLR start "statementExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:191:1: statementExpression : ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE_PROP primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) );
	[GrammarRule("statementExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpression()
	{
		EnterRule_statementExpression();
		EnterRule("statementExpression", 12);
		TraceIn("statementExpression", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal48 = default(IToken);
		IToken string_literal50 = default(IToken);
		IToken string_literal52 = default(IToken);
		IToken string_literal54 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> invocationExpression47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal48_tree = default(CommonTree);
		CommonTree string_literal50_tree = default(CommonTree);
		CommonTree string_literal52_tree = default(CommonTree);
		CommonTree string_literal54_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "statementExpression");
		DebugLocation(191, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:192:2: ( invocationExpression | 'new' primaryExpression -> ^( CREATE primaryExpression ) | 'delete' primaryExpression -> ^( DELETE_PROP primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) )
			int alt19=5;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LIT_FALSE:
			case LIT_NULL:
			case LIT_TRUE:
			case LPAREN:
			case NAN:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case UNDEFINED:
			case 134:
				{
				alt19 = 1;
				}
				break;
			case 138:
				{
				alt19 = 2;
				}
				break;
			case 131:
				{
				alt19 = 3;
				}
				break;
			case INCREMENT:
				{
				alt19 = 4;
				}
				break;
			case DECREMENT:
				{
				alt19 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:194:2: invocationExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(194, 2);
				PushFollow(Follow._invocationExpression_in_statementExpression1038);
				invocationExpression47=invocationExpression();
				PopFollow();

				adaptor.AddChild(root_0, invocationExpression47.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:195:4: 'new' primaryExpression
				{
				DebugLocation(195, 4);
				string_literal48=(IToken)Match(input,138,Follow._138_in_statementExpression1043);  
				stream_138.Add(string_literal48);

				DebugLocation(195, 10);
				PushFollow(Follow._primaryExpression_in_statementExpression1045);
				primaryExpression49=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression49.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(196, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:196:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(196, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:197:4: 'delete' primaryExpression
				{
				DebugLocation(197, 4);
				string_literal50=(IToken)Match(input,131,Follow._131_in_statementExpression1060);  
				stream_131.Add(string_literal50);

				DebugLocation(197, 13);
				PushFollow(Follow._primaryExpression_in_statementExpression1062);
				primaryExpression51=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression51.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:3: -> ^( DELETE_PROP primaryExpression )
				{
					DebugLocation(198, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:198:6: ^( DELETE_PROP primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DELETE_PROP, "DELETE_PROP"), root_1);

					DebugLocation(198, 20);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:199:4: '++' primaryExpression
				{
				DebugLocation(199, 4);
				string_literal52=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_statementExpression1078);  
				stream_INCREMENT.Add(string_literal52);

				DebugLocation(199, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression1080);
				primaryExpression53=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression53.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression, INCREMENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 200:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(200, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:200:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(200, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(200, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(200, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:201:4: '--' primaryExpression
				{
				DebugLocation(201, 4);
				string_literal54=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_statementExpression1097);  
				stream_DECREMENT.Add(string_literal54);

				DebugLocation(201, 9);
				PushFollow(Follow._primaryExpression_in_statementExpression1099);
				primaryExpression55=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression55.Tree);


				{
				// AST REWRITE
				// elements: DECREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 202:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(202, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:202:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(202, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(202, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(202, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpression", 12);
			LeaveRule("statementExpression", 12);
			LeaveRule_statementExpression();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpression"); }
		return retval;

	}
	// $ANTLR end "statementExpression"

	partial void EnterRule_localMemberVariableDeclaration();
	partial void LeaveRule_localMemberVariableDeclaration();

	// $ANTLR start "localMemberVariableDeclaration"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:205:1: localMemberVariableDeclaration : ( memberModifier )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) ) ;
	[GrammarRule("localMemberVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localMemberVariableDeclaration()
	{
		EnterRule_localMemberVariableDeclaration();
		EnterRule("localMemberVariableDeclaration", 13);
		TraceIn("localMemberVariableDeclaration", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE57 = default(IToken);
		IToken char_literal59 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> memberModifier56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment58 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment60 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE57_tree = default(CommonTree);
		CommonTree char_literal59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_memberModifier=new RewriteRuleSubtreeStream(adaptor,"rule memberModifier");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localMemberVariableDeclaration");
		DebugLocation(205, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:206:2: ( ( memberModifier )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:206:4: ( memberModifier )? TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(206, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:206:4: ( memberModifier )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==INTERNAL||LA20_0==PRIVATE||(LA20_0>=PROTECTED && LA20_0<=PUBLIC)))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:206:4: memberModifier
				{
				DebugLocation(206, 4);
				PushFollow(Follow._memberModifier_in_localMemberVariableDeclaration1122);
				memberModifier56=memberModifier();
				PopFollow();

				stream_memberModifier.Add(memberModifier56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(206, 20);
			TYPE57=(IToken)Match(input,TYPE,Follow._TYPE_in_localMemberVariableDeclaration1125);  
			stream_TYPE.Add(TYPE57);

			DebugLocation(206, 25);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration1127);
			localVariableDeclarationAssignment58=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment58.Tree);
			DebugLocation(206, 60);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:206:60: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==COMMA))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:206:61: ',' localVariableDeclarationAssignment
					{
					DebugLocation(206, 61);
					char_literal59=(IToken)Match(input,COMMA,Follow._COMMA_in_localMemberVariableDeclaration1130);  
					stream_COMMA.Add(char_literal59);

					DebugLocation(206, 65);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localMemberVariableDeclaration1132);
					localVariableDeclarationAssignment60=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment60.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: TYPE, localVariableDeclarationAssignment, memberModifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 207:3: -> ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) )
			{
				DebugLocation(207, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:207:6: ^( MEMBER_DECLARATION ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ^( MEMBER_MODIFIER ( memberModifier )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(207, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEMBER_DECLARATION, "MEMBER_DECLARATION"), root_1);

				DebugLocation(207, 27);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:207:27: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(207, 29);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_2);

				DebugLocation(207, 41);
				adaptor.AddChild(root_2, stream_TYPE.NextNode());
				DebugLocation(207, 46);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(207, 46);
					adaptor.AddChild(root_2, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(207, 83);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:207:83: ^( MEMBER_MODIFIER ( memberModifier )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(207, 85);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEMBER_MODIFIER, "MEMBER_MODIFIER"), root_2);

				DebugLocation(207, 101);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:207:101: ( memberModifier )?
				if (stream_memberModifier.HasNext)
				{
					DebugLocation(207, 101);
					adaptor.AddChild(root_2, stream_memberModifier.NextTree());

				}
				stream_memberModifier.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localMemberVariableDeclaration", 13);
			LeaveRule("localMemberVariableDeclaration", 13);
			LeaveRule_localMemberVariableDeclaration();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "localMemberVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localMemberVariableDeclaration"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();

	// $ANTLR start "localVariableDeclaration"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:210:1: localVariableDeclaration : TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 14);
		TraceIn("localVariableDeclaration", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TYPE61 = default(IToken);
		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment64 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree TYPE61_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_localVariableDeclarationAssignment=new RewriteRuleSubtreeStream(adaptor,"rule localVariableDeclarationAssignment");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(210, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:211:2: ( TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )* -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:211:4: TYPE localVariableDeclarationAssignment ( ',' localVariableDeclarationAssignment )*
			{
			DebugLocation(211, 4);
			TYPE61=(IToken)Match(input,TYPE,Follow._TYPE_in_localVariableDeclaration1169);  
			stream_TYPE.Add(TYPE61);

			DebugLocation(211, 9);
			PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration1171);
			localVariableDeclarationAssignment62=localVariableDeclarationAssignment();
			PopFollow();

			stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment62.Tree);
			DebugLocation(211, 44);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:211:44: ( ',' localVariableDeclarationAssignment )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==COMMA))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:211:45: ',' localVariableDeclarationAssignment
					{
					DebugLocation(211, 45);
					char_literal63=(IToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration1174);  
					stream_COMMA.Add(char_literal63);

					DebugLocation(211, 49);
					PushFollow(Follow._localVariableDeclarationAssignment_in_localVariableDeclaration1176);
					localVariableDeclarationAssignment64=localVariableDeclarationAssignment();
					PopFollow();

					stream_localVariableDeclarationAssignment.Add(localVariableDeclarationAssignment64.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: localVariableDeclarationAssignment, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 212:3: -> ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
			{
				DebugLocation(212, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:212:6: ^( DECLARATION TYPE ( localVariableDeclarationAssignment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DECLARATION, "DECLARATION"), root_1);

				DebugLocation(212, 20);
				adaptor.AddChild(root_1, stream_TYPE.NextNode());
				DebugLocation(212, 25);
				if (!(stream_localVariableDeclarationAssignment.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_localVariableDeclarationAssignment.HasNext )
				{
					DebugLocation(212, 25);
					adaptor.AddChild(root_1, stream_localVariableDeclarationAssignment.NextTree());

				}
				stream_localVariableDeclarationAssignment.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 14);
			LeaveRule("localVariableDeclaration", 14);
			LeaveRule_localVariableDeclaration();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_localVariableDeclarationAssignment();
	partial void LeaveRule_localVariableDeclarationAssignment();

	// $ANTLR start "localVariableDeclarationAssignment"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:215:1: localVariableDeclarationAssignment : id= IDENTIFIER ( '=' exp= expression )? ->;
	[GrammarRule("localVariableDeclarationAssignment")]
	private AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclarationAssignment()
	{
		EnterRule_localVariableDeclarationAssignment();
		EnterRule("localVariableDeclarationAssignment", 15);
		TraceIn("localVariableDeclarationAssignment", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken char_literal65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree char_literal65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationAssignment");
		DebugLocation(215, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:216:2: (id= IDENTIFIER ( '=' exp= expression )? ->)
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:216:4: id= IDENTIFIER ( '=' exp= expression )?
			{
			DebugLocation(216, 6);
			id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableDeclarationAssignment1204);  
			stream_IDENTIFIER.Add(id);

			DebugLocation(216, 18);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:216:18: ( '=' exp= expression )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==ASSIGNMENT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:216:19: '=' exp= expression
				{
				DebugLocation(216, 19);
				char_literal65=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_localVariableDeclarationAssignment1207);  
				stream_ASSIGNMENT.Add(char_literal65);

				DebugLocation(216, 26);
				PushFollow(Follow._expression_in_localVariableDeclarationAssignment1211);
				exp=expression();
				PopFollow();

				stream_expression.Add(exp.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 217:3: ->
			{
				DebugLocation(217, 6);
				adaptor.AddChild(root_0,  DefineLocalVariable(id.Text, exp == null ? null : exp.Tree, retval.Start.Line, retval.Start.CharPositionInLine));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationAssignment", 15);
			LeaveRule("localVariableDeclarationAssignment", 15);
			LeaveRule_localVariableDeclarationAssignment();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationAssignment"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationAssignment"

	partial void EnterRule_memberModifier();
	partial void LeaveRule_memberModifier();

	// $ANTLR start "memberModifier"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:221:1: memberModifier : ( PRIVATE | INTERNAL | PROTECTED | PUBLIC );
	[GrammarRule("memberModifier")]
	private AstParserRuleReturnScope<CommonTree, IToken> memberModifier()
	{
		EnterRule_memberModifier();
		EnterRule("memberModifier", 16);
		TraceIn("memberModifier", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set66 = default(IToken);

		CommonTree set66_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "memberModifier");
		DebugLocation(221, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:221:15: ( PRIVATE | INTERNAL | PROTECTED | PUBLIC )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(221, 15);

			set66=(IToken)input.LT(1);
			if (input.LA(1)==INTERNAL||input.LA(1)==PRIVATE||(input.LA(1)>=PROTECTED && input.LA(1)<=PUBLIC))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set66));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberModifier", 16);
			LeaveRule("memberModifier", 16);
			LeaveRule_memberModifier();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "memberModifier"); }
		return retval;

	}
	// $ANTLR end "memberModifier"

	partial void EnterRule_invocationExpression();
	partial void LeaveRule_invocationExpression();

	// $ANTLR start "invocationExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:225:1: invocationExpression : id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression ) ;
	[GrammarRule("invocationExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> invocationExpression()
	{
		EnterRule_invocationExpression();
		EnterRule("invocationExpression", 17);
		TraceIn("invocationExpression", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal67 = default(IToken);
		IToken string_literal69 = default(IToken);
		IToken string_literal71 = default(IToken);
		IToken string_literal73 = default(IToken);
		IToken string_literal75 = default(IToken);
		IToken string_literal77 = default(IToken);
		IToken string_literal79 = default(IToken);
		IToken string_literal81 = default(IToken);
		IToken string_literal83 = default(IToken);
		IToken string_literal85 = default(IToken);
		IToken string_literal87 = default(IToken);
		IToken string_literal89 = default(IToken);
		IToken string_literal90 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> id = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression88 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal67_tree = default(CommonTree);
		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree string_literal71_tree = default(CommonTree);
		CommonTree string_literal73_tree = default(CommonTree);
		CommonTree string_literal75_tree = default(CommonTree);
		CommonTree string_literal77_tree = default(CommonTree);
		CommonTree string_literal79_tree = default(CommonTree);
		CommonTree string_literal81_tree = default(CommonTree);
		CommonTree string_literal83_tree = default(CommonTree);
		CommonTree string_literal85_tree = default(CommonTree);
		CommonTree string_literal87_tree = default(CommonTree);
		CommonTree string_literal89_tree = default(CommonTree);
		CommonTree string_literal90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_ASSIGN_OR=new RewriteRuleITokenStream(adaptor,"token ASSIGN_OR");
		RewriteRuleITokenStream stream_ASSIGN_MUL=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MUL");
		RewriteRuleITokenStream stream_ASSIGN_LSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_LSHIFT");
		RewriteRuleITokenStream stream_ASSIGN_REM=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REM");
		RewriteRuleITokenStream stream_ASSIGN_REV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_REV");
		RewriteRuleITokenStream stream_ASSIGN_AND=new RewriteRuleITokenStream(adaptor,"token ASSIGN_AND");
		RewriteRuleITokenStream stream_ASSIGN_PLUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_PLUS");
		RewriteRuleITokenStream stream_ASSIGN_RSHIFT=new RewriteRuleITokenStream(adaptor,"token ASSIGN_RSHIFT");
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleITokenStream stream_ASSIGN_MINUS=new RewriteRuleITokenStream(adaptor,"token ASSIGN_MINUS");
		RewriteRuleITokenStream stream_ASSIGN_DIV=new RewriteRuleITokenStream(adaptor,"token ASSIGN_DIV");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "invocationExpression");
		DebugLocation(225, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:226:2: (id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:227:4: id= primaryExpression ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression )
			{
			DebugLocation(227, 6);
			PushFollow(Follow._primaryExpression_in_invocationExpression1260);
			id=primaryExpression();
			PopFollow();

			stream_primaryExpression.Add(id.Tree);
			DebugLocation(228, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:228:4: ( '=' expression -> ^( ASSIGNMENT $id expression ) | '+=' expression -> ^( ASSIGNMENT $id ^( PLUS $id expression ) ) | '-=' expression -> ^( ASSIGNMENT $id ^( MINUS $id expression ) ) | '*=' expression -> ^( ASSIGNMENT $id ^( MUL $id expression ) ) | '/=' expression -> ^( ASSIGNMENT $id ^( DIV $id expression ) ) | '%=' expression -> ^( ASSIGNMENT $id ^( MOD $id expression ) ) | '&=' expression -> ^( ASSIGNMENT $id ^( AND $id expression ) ) | '|=' expression -> ^( ASSIGNMENT $id ^( OR $id expression ) ) | '^=' expression -> ^( ASSIGNMENT $id ^( XOR $id expression ) ) | '<<=' expression -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) ) | '>>=' expression -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) ) | '++' -> ^( POST_UNARY_STEP $id '++' ) | '--' -> ^( POST_UNARY_STEP $id '--' ) | -> primaryExpression )
			int alt24=14;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case ASSIGNMENT:
				{
				alt24 = 1;
				}
				break;
			case ASSIGN_PLUS:
				{
				alt24 = 2;
				}
				break;
			case ASSIGN_MINUS:
				{
				alt24 = 3;
				}
				break;
			case ASSIGN_MUL:
				{
				alt24 = 4;
				}
				break;
			case ASSIGN_DIV:
				{
				alt24 = 5;
				}
				break;
			case ASSIGN_REM:
				{
				alt24 = 6;
				}
				break;
			case ASSIGN_AND:
				{
				alt24 = 7;
				}
				break;
			case ASSIGN_OR:
				{
				alt24 = 8;
				}
				break;
			case ASSIGN_REV:
				{
				alt24 = 9;
				}
				break;
			case ASSIGN_LSHIFT:
				{
				alt24 = 10;
				}
				break;
			case ASSIGN_RSHIFT:
				{
				alt24 = 11;
				}
				break;
			case INCREMENT:
				{
				alt24 = 12;
				}
				break;
			case DECREMENT:
				{
				alt24 = 13;
				}
				break;
			case COMMA:
			case RPAREN:
			case SEMI:
				{
				alt24 = 14;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:229:5: '=' expression
				{
				DebugLocation(229, 5);
				char_literal67=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_invocationExpression1271);  
				stream_ASSIGNMENT.Add(char_literal67);

				DebugLocation(229, 9);
				PushFollow(Follow._expression_in_invocationExpression1273);
				expression68=expression();
				PopFollow();

				stream_expression.Add(expression68.Tree);


				{
				// AST REWRITE
				// elements: id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 229:21: -> ^( ASSIGNMENT $id expression )
				{
					DebugLocation(229, 24);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:229:24: ^( ASSIGNMENT $id expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(229, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(229, 38);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(229, 41);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:230:6: '+=' expression
				{
				DebugLocation(230, 6);
				string_literal69=(IToken)Match(input,ASSIGN_PLUS,Follow._ASSIGN_PLUS_in_invocationExpression1292);  
				stream_ASSIGN_PLUS.Add(string_literal69);

				DebugLocation(230, 11);
				PushFollow(Follow._expression_in_invocationExpression1294);
				expression70=expression();
				PopFollow();

				stream_expression.Add(expression70.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 230:23: -> ^( ASSIGNMENT $id ^( PLUS $id expression ) )
				{
					DebugLocation(230, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:230:26: ^( ASSIGNMENT $id ^( PLUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(230, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(230, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(230, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:230:43: ^( PLUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(230, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PLUS, "PLUS"), root_2);

					DebugLocation(230, 51);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(230, 54);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:231:6: '-=' expression
				{
				DebugLocation(231, 6);
				string_literal71=(IToken)Match(input,ASSIGN_MINUS,Follow._ASSIGN_MINUS_in_invocationExpression1320);  
				stream_ASSIGN_MINUS.Add(string_literal71);

				DebugLocation(231, 11);
				PushFollow(Follow._expression_in_invocationExpression1322);
				expression72=expression();
				PopFollow();

				stream_expression.Add(expression72.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 231:23: -> ^( ASSIGNMENT $id ^( MINUS $id expression ) )
				{
					DebugLocation(231, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:231:26: ^( ASSIGNMENT $id ^( MINUS $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(231, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(231, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(231, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:231:43: ^( MINUS $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(231, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MINUS, "MINUS"), root_2);

					DebugLocation(231, 52);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(231, 55);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:232:6: '*=' expression
				{
				DebugLocation(232, 6);
				string_literal73=(IToken)Match(input,ASSIGN_MUL,Follow._ASSIGN_MUL_in_invocationExpression1348);  
				stream_ASSIGN_MUL.Add(string_literal73);

				DebugLocation(232, 11);
				PushFollow(Follow._expression_in_invocationExpression1350);
				expression74=expression();
				PopFollow();

				stream_expression.Add(expression74.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:23: -> ^( ASSIGNMENT $id ^( MUL $id expression ) )
				{
					DebugLocation(232, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:232:26: ^( ASSIGNMENT $id ^( MUL $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(232, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(232, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:232:43: ^( MUL $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MUL, "MUL"), root_2);

					DebugLocation(232, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(232, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:233:6: '/=' expression
				{
				DebugLocation(233, 6);
				string_literal75=(IToken)Match(input,ASSIGN_DIV,Follow._ASSIGN_DIV_in_invocationExpression1376);  
				stream_ASSIGN_DIV.Add(string_literal75);

				DebugLocation(233, 11);
				PushFollow(Follow._expression_in_invocationExpression1378);
				expression76=expression();
				PopFollow();

				stream_expression.Add(expression76.Tree);


				{
				// AST REWRITE
				// elements: id, expression, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:23: -> ^( ASSIGNMENT $id ^( DIV $id expression ) )
				{
					DebugLocation(233, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:233:26: ^( ASSIGNMENT $id ^( DIV $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(233, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(233, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:233:43: ^( DIV $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(DIV, "DIV"), root_2);

					DebugLocation(233, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(233, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:234:6: '%=' expression
				{
				DebugLocation(234, 6);
				string_literal77=(IToken)Match(input,ASSIGN_REM,Follow._ASSIGN_REM_in_invocationExpression1404);  
				stream_ASSIGN_REM.Add(string_literal77);

				DebugLocation(234, 11);
				PushFollow(Follow._expression_in_invocationExpression1406);
				expression78=expression();
				PopFollow();

				stream_expression.Add(expression78.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 234:23: -> ^( ASSIGNMENT $id ^( MOD $id expression ) )
				{
					DebugLocation(234, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:234:26: ^( ASSIGNMENT $id ^( MOD $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(234, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(234, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(234, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:234:43: ^( MOD $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(234, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MOD, "MOD"), root_2);

					DebugLocation(234, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(234, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:235:6: '&=' expression
				{
				DebugLocation(235, 6);
				string_literal79=(IToken)Match(input,ASSIGN_AND,Follow._ASSIGN_AND_in_invocationExpression1432);  
				stream_ASSIGN_AND.Add(string_literal79);

				DebugLocation(235, 11);
				PushFollow(Follow._expression_in_invocationExpression1434);
				expression80=expression();
				PopFollow();

				stream_expression.Add(expression80.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 235:23: -> ^( ASSIGNMENT $id ^( AND $id expression ) )
				{
					DebugLocation(235, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:235:26: ^( ASSIGNMENT $id ^( AND $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(235, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(235, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(235, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:235:43: ^( AND $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(235, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(AND, "AND"), root_2);

					DebugLocation(235, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(235, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:236:6: '|=' expression
				{
				DebugLocation(236, 6);
				string_literal81=(IToken)Match(input,ASSIGN_OR,Follow._ASSIGN_OR_in_invocationExpression1460);  
				stream_ASSIGN_OR.Add(string_literal81);

				DebugLocation(236, 11);
				PushFollow(Follow._expression_in_invocationExpression1462);
				expression82=expression();
				PopFollow();

				stream_expression.Add(expression82.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 236:23: -> ^( ASSIGNMENT $id ^( OR $id expression ) )
				{
					DebugLocation(236, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:236:26: ^( ASSIGNMENT $id ^( OR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(236, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(236, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:236:43: ^( OR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OR, "OR"), root_2);

					DebugLocation(236, 49);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(236, 52);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:237:6: '^=' expression
				{
				DebugLocation(237, 6);
				string_literal83=(IToken)Match(input,ASSIGN_REV,Follow._ASSIGN_REV_in_invocationExpression1488);  
				stream_ASSIGN_REV.Add(string_literal83);

				DebugLocation(237, 11);
				PushFollow(Follow._expression_in_invocationExpression1490);
				expression84=expression();
				PopFollow();

				stream_expression.Add(expression84.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 237:23: -> ^( ASSIGNMENT $id ^( XOR $id expression ) )
				{
					DebugLocation(237, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:237:26: ^( ASSIGNMENT $id ^( XOR $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(237, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(237, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(237, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:237:43: ^( XOR $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(237, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(XOR, "XOR"), root_2);

					DebugLocation(237, 50);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(237, 53);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:238:6: '<<=' expression
				{
				DebugLocation(238, 6);
				string_literal85=(IToken)Match(input,ASSIGN_LSHIFT,Follow._ASSIGN_LSHIFT_in_invocationExpression1516);  
				stream_ASSIGN_LSHIFT.Add(string_literal85);

				DebugLocation(238, 12);
				PushFollow(Follow._expression_in_invocationExpression1518);
				expression86=expression();
				PopFollow();

				stream_expression.Add(expression86.Tree);


				{
				// AST REWRITE
				// elements: expression, id, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 238:23: -> ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
				{
					DebugLocation(238, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:238:26: ^( ASSIGNMENT $id ^( LSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(238, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(238, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:238:43: ^( LSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LSHIFT, "LSHIFT"), root_2);

					DebugLocation(238, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(238, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:239:6: '>>=' expression
				{
				DebugLocation(239, 6);
				string_literal87=(IToken)Match(input,ASSIGN_RSHIFT,Follow._ASSIGN_RSHIFT_in_invocationExpression1543);  
				stream_ASSIGN_RSHIFT.Add(string_literal87);

				DebugLocation(239, 12);
				PushFollow(Follow._expression_in_invocationExpression1545);
				expression88=expression();
				PopFollow();

				stream_expression.Add(expression88.Tree);


				{
				// AST REWRITE
				// elements: id, id, expression
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:23: -> ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
				{
					DebugLocation(239, 26);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:239:26: ^( ASSIGNMENT $id ^( RSHIFT $id expression ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

					DebugLocation(239, 40);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(239, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:239:43: ^( RSHIFT $id expression )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 45);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RSHIFT, "RSHIFT"), root_2);

					DebugLocation(239, 53);
					adaptor.AddChild(root_2, stream_id.NextTree());
					DebugLocation(239, 56);
					adaptor.AddChild(root_2, stream_expression.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:240:6: '++'
				{
				DebugLocation(240, 6);
				string_literal89=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_invocationExpression1570);  
				stream_INCREMENT.Add(string_literal89);



				{
				// AST REWRITE
				// elements: INCREMENT, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:14: -> ^( POST_UNARY_STEP $id '++' )
				{
					DebugLocation(240, 17);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:240:17: ^( POST_UNARY_STEP $id '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(240, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(240, 39);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:241:6: '--'
				{
				DebugLocation(241, 6);
				string_literal90=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_invocationExpression1591);  
				stream_DECREMENT.Add(string_literal90);



				{
				// AST REWRITE
				// elements: DECREMENT, id
				// token labels: 
				// rule labels: id, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id",id!=null?id.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:14: -> ^( POST_UNARY_STEP $id '--' )
				{
					DebugLocation(241, 17);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:241:17: ^( POST_UNARY_STEP $id '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

					DebugLocation(241, 36);
					adaptor.AddChild(root_1, stream_id.NextTree());
					DebugLocation(241, 39);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:242:11: 
				{

				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:11: -> primaryExpression
				{
					DebugLocation(242, 14);
					adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocationExpression", 17);
			LeaveRule("invocationExpression", 17);
			LeaveRule_invocationExpression();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "invocationExpression"); }
		return retval;

	}
	// $ANTLR end "invocationExpression"

	partial void EnterRule_statementExpressionList();
	partial void LeaveRule_statementExpressionList();

	// $ANTLR start "statementExpressionList"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:246:1: statementExpressionList : statementExpression ( COMMA ! statementExpression )* ;
	[GrammarRule("statementExpressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList()
	{
		EnterRule_statementExpressionList();
		EnterRule("statementExpressionList", 18);
		TraceIn("statementExpressionList", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA92 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpression93 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statementExpressionList");
		DebugLocation(246, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:247:2: ( statementExpression ( COMMA ! statementExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:247:4: statementExpression ( COMMA ! statementExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(247, 4);
			PushFollow(Follow._statementExpression_in_statementExpressionList1635);
			statementExpression91=statementExpression();
			PopFollow();

			adaptor.AddChild(root_0, statementExpression91.Tree);
			DebugLocation(247, 24);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:247:24: ( COMMA ! statementExpression )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==COMMA))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:247:25: COMMA ! statementExpression
					{
					DebugLocation(247, 30);
					COMMA92=(IToken)Match(input,COMMA,Follow._COMMA_in_statementExpressionList1638); 
					DebugLocation(247, 32);
					PushFollow(Follow._statementExpression_in_statementExpressionList1641);
					statementExpression93=statementExpression();
					PopFollow();

					adaptor.AddChild(root_0, statementExpression93.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementExpressionList", 18);
			LeaveRule("statementExpressionList", 18);
			LeaveRule_statementExpressionList();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "statementExpressionList"); }
		return retval;

	}
	// $ANTLR end "statementExpressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:251:1: public expression : ( tag | assignmentExpression ) ( EOF !)? ;
	[GrammarRule("expression")]
	public AstParserRuleReturnScope<CommonTree, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 19);
		TraceIn("expression", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> tag94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EOF96_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(251, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:252:2: ( ( tag | assignmentExpression ) ( EOF !)? )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:256:4: ( tag | assignmentExpression ) ( EOF !)?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(256, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:256:4: ( tag | assignmentExpression )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==LESS_THAN))
			{
				alt26 = 1;
			}
			else if ((LA26_0==BINARY_LITERATE||LA26_0==DECREMENT||(LA26_0>=HEX_LITERATE && LA26_0<=IDENTIFIER)||LA26_0==INCREMENT||(LA26_0>=LBRACE && LA26_0<=LCURLY)||(LA26_0>=LIT_FALSE && LA26_0<=LIT_TRUE)||LA26_0==LPAREN||LA26_0==MINUS||LA26_0==NAN||LA26_0==NOT||LA26_0==NUMBER_LITERATE||LA26_0==PLUS||LA26_0==STRING_LITERATE||LA26_0==THIS||LA26_0==UNDEFINED||LA26_0==134||LA26_0==138||LA26_0==144||LA26_0==146))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:256:6: tag
				{
				DebugLocation(256, 6);
				PushFollow(Follow._tag_in_expression1668);
				tag94=tag();
				PopFollow();

				adaptor.AddChild(root_0, tag94.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:258:6: assignmentExpression
				{
				DebugLocation(258, 6);
				PushFollow(Follow._assignmentExpression_in_expression1680);
				assignmentExpression95=assignmentExpression();
				PopFollow();

				adaptor.AddChild(root_0, assignmentExpression95.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(258, 32);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:258:32: ( EOF !)?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==EOF))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:258:32: EOF !
				{
				DebugLocation(258, 32);
				EOF96=(IToken)Match(input,EOF,Follow._EOF_in_expression1684); 

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 19);
			LeaveRule("expression", 19);
			LeaveRule_expression();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_range_literal();
	partial void LeaveRule_range_literal();

	// $ANTLR start "range_literal"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:261:1: range_literal : from= IDENTIFIER ':' to= IDENTIFIER -> ^( RANGE_LITERAL $from $to) ;
	[GrammarRule("range_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> range_literal()
	{
		EnterRule_range_literal();
		EnterRule("range_literal", 20);
		TraceIn("range_literal", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken from = default(IToken);
		IToken to = default(IToken);
		IToken char_literal97 = default(IToken);

		CommonTree from_tree = default(CommonTree);
		CommonTree to_tree = default(CommonTree);
		CommonTree char_literal97_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		try { DebugEnterRule(GrammarFileName, "range_literal");
		DebugLocation(261, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:262:2: (from= IDENTIFIER ':' to= IDENTIFIER -> ^( RANGE_LITERAL $from $to) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:262:4: from= IDENTIFIER ':' to= IDENTIFIER
			{
			DebugLocation(262, 8);
			from=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_range_literal1699);  
			stream_IDENTIFIER.Add(from);

			DebugLocation(262, 20);
			char_literal97=(IToken)Match(input,COLON,Follow._COLON_in_range_literal1701);  
			stream_COLON.Add(char_literal97);

			DebugLocation(262, 26);
			to=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_range_literal1705);  
			stream_IDENTIFIER.Add(to);



			{
			// AST REWRITE
			// elements: from, to
			// token labels: to, from
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_to=new RewriteRuleITokenStream(adaptor,"token to",to);
			RewriteRuleITokenStream stream_from=new RewriteRuleITokenStream(adaptor,"token from",from);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:38: -> ^( RANGE_LITERAL $from $to)
			{
				DebugLocation(262, 41);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:262:41: ^( RANGE_LITERAL $from $to)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 43);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RANGE_LITERAL, "RANGE_LITERAL"), root_1);

				DebugLocation(262, 58);
				adaptor.AddChild(root_1, stream_from.NextNode());
				DebugLocation(262, 64);
				adaptor.AddChild(root_1, stream_to.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("range_literal", 20);
			LeaveRule("range_literal", 20);
			LeaveRule_range_literal();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "range_literal"); }
		return retval;

	}
	// $ANTLR end "range_literal"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();

	// $ANTLR start "expressionList"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:265:1: expressionList : expression ( COMMA ! expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, IToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 21);
		TraceIn("expressionList", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMMA99 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression100 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree COMMA99_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(265, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:266:2: ( expression ( COMMA ! expression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:266:4: expression ( COMMA ! expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(266, 4);
			PushFollow(Follow._expression_in_expressionList1729);
			expression98=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression98.Tree);
			DebugLocation(266, 15);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:266:15: ( COMMA ! expression )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==COMMA))
				{
					int LA28_2 = input.LA(2);

					if ((LA28_2==BINARY_LITERATE||LA28_2==DECREMENT||(LA28_2>=HEX_LITERATE && LA28_2<=IDENTIFIER)||LA28_2==INCREMENT||(LA28_2>=LBRACE && LA28_2<=LCURLY)||LA28_2==LESS_THAN||(LA28_2>=LIT_FALSE && LA28_2<=LIT_TRUE)||LA28_2==LPAREN||LA28_2==MINUS||LA28_2==NAN||LA28_2==NOT||LA28_2==NUMBER_LITERATE||LA28_2==PLUS||LA28_2==STRING_LITERATE||LA28_2==THIS||LA28_2==UNDEFINED||LA28_2==134||LA28_2==138||LA28_2==144||LA28_2==146))
					{
						alt28 = 1;
					}


				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:266:16: COMMA ! expression
					{
					DebugLocation(266, 21);
					COMMA99=(IToken)Match(input,COMMA,Follow._COMMA_in_expressionList1732); 
					DebugLocation(266, 23);
					PushFollow(Follow._expression_in_expressionList1735);
					expression100=expression();
					PopFollow();

					adaptor.AddChild(root_0, expression100.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 21);
			LeaveRule("expressionList", 21);
			LeaveRule_expressionList();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:269:1: assignmentExpression : conditionalExpression ( ASSIGNMENT ^ expression )? ;
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 22);
		TraceIn("assignmentExpression", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ASSIGNMENT102 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression103 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ASSIGNMENT102_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(269, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:270:2: ( conditionalExpression ( ASSIGNMENT ^ expression )? )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:270:4: conditionalExpression ( ASSIGNMENT ^ expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(270, 4);
			PushFollow(Follow._conditionalExpression_in_assignmentExpression1749);
			conditionalExpression101=conditionalExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalExpression101.Tree);
			DebugLocation(270, 26);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:270:26: ( ASSIGNMENT ^ expression )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==ASSIGNMENT))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:270:27: ASSIGNMENT ^ expression
				{
				DebugLocation(270, 37);
				ASSIGNMENT102=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_assignmentExpression1752); 
				ASSIGNMENT102_tree = (CommonTree)adaptor.Create(ASSIGNMENT102);
				root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGNMENT102_tree, root_0);
				DebugLocation(270, 39);
				PushFollow(Follow._expression_in_assignmentExpression1755);
				expression103=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 22);
			LeaveRule("assignmentExpression", 22);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:273:1: conditionalExpression : conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 23);
		TraceIn("conditionalExpression", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken CONDITION105 = default(IToken);
		IToken COLON107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression108 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree CONDITION105_tree = default(CommonTree);
		CommonTree COLON107_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(273, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:274:2: ( conditionalOrExpression ( CONDITION ^ expression COLON ! expression )? )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:274:4: conditionalOrExpression ( CONDITION ^ expression COLON ! expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(274, 4);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression1769);
			conditionalOrExpression104=conditionalOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalOrExpression104.Tree);
			DebugLocation(274, 28);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:274:28: ( CONDITION ^ expression COLON ! expression )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==CONDITION))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:274:29: CONDITION ^ expression COLON ! expression
				{
				DebugLocation(274, 38);
				CONDITION105=(IToken)Match(input,CONDITION,Follow._CONDITION_in_conditionalExpression1772); 
				CONDITION105_tree = (CommonTree)adaptor.Create(CONDITION105);
				root_0 = (CommonTree)adaptor.BecomeRoot(CONDITION105_tree, root_0);
				DebugLocation(274, 40);
				PushFollow(Follow._expression_in_conditionalExpression1775);
				expression106=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression106.Tree);
				DebugLocation(274, 56);
				COLON107=(IToken)Match(input,COLON,Follow._COLON_in_conditionalExpression1777); 
				DebugLocation(274, 58);
				PushFollow(Follow._expression_in_conditionalExpression1780);
				expression108=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression108.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 23);
			LeaveRule("conditionalExpression", 23);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();

	// $ANTLR start "conditionalOrExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:277:1: conditionalOrExpression : conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 24);
		TraceIn("conditionalOrExpression", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_OR110 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression111 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_OR110_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(277, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:278:2: ( conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:278:4: conditionalAndExpression ( LOGICAL_OR ^ conditionalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(278, 4);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1793);
			conditionalAndExpression109=conditionalAndExpression();
			PopFollow();

			adaptor.AddChild(root_0, conditionalAndExpression109.Tree);
			DebugLocation(278, 29);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:278:29: ( LOGICAL_OR ^ conditionalAndExpression )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==LOGICAL_OR))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:278:30: LOGICAL_OR ^ conditionalAndExpression
					{
					DebugLocation(278, 40);
					LOGICAL_OR110=(IToken)Match(input,LOGICAL_OR,Follow._LOGICAL_OR_in_conditionalOrExpression1796); 
					LOGICAL_OR110_tree = (CommonTree)adaptor.Create(LOGICAL_OR110);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_OR110_tree, root_0);
					DebugLocation(278, 42);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression1799);
					conditionalAndExpression111=conditionalAndExpression();
					PopFollow();

					adaptor.AddChild(root_0, conditionalAndExpression111.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 24);
			LeaveRule("conditionalOrExpression", 24);
			LeaveRule_conditionalOrExpression();
		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();

	// $ANTLR start "conditionalAndExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:281:1: conditionalAndExpression : inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 25);
		TraceIn("conditionalAndExpression", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken LOGICAL_AND113 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree LOGICAL_AND113_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(281, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:282:2: ( inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:282:4: inclusiveOrExpression ( LOGICAL_AND ^ inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(282, 4);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1812);
			inclusiveOrExpression112=inclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, inclusiveOrExpression112.Tree);
			DebugLocation(282, 26);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:282:26: ( LOGICAL_AND ^ inclusiveOrExpression )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==LOGICAL_AND))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:282:27: LOGICAL_AND ^ inclusiveOrExpression
					{
					DebugLocation(282, 38);
					LOGICAL_AND113=(IToken)Match(input,LOGICAL_AND,Follow._LOGICAL_AND_in_conditionalAndExpression1815); 
					LOGICAL_AND113_tree = (CommonTree)adaptor.Create(LOGICAL_AND113);
					root_0 = (CommonTree)adaptor.BecomeRoot(LOGICAL_AND113_tree, root_0);
					DebugLocation(282, 40);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression1818);
					inclusiveOrExpression114=inclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, inclusiveOrExpression114.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 25);
			LeaveRule("conditionalAndExpression", 25);
			LeaveRule_conditionalAndExpression();
		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();

	// $ANTLR start "inclusiveOrExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:285:1: inclusiveOrExpression : exclusiveOrExpression ( OR ^ exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 26);
		TraceIn("inclusiveOrExpression", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken OR116 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree OR116_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(285, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:286:2: ( exclusiveOrExpression ( OR ^ exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:286:4: exclusiveOrExpression ( OR ^ exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(286, 4);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1833);
			exclusiveOrExpression115=exclusiveOrExpression();
			PopFollow();

			adaptor.AddChild(root_0, exclusiveOrExpression115.Tree);
			DebugLocation(286, 26);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:286:26: ( OR ^ exclusiveOrExpression )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==OR))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:286:27: OR ^ exclusiveOrExpression
					{
					DebugLocation(286, 29);
					OR116=(IToken)Match(input,OR,Follow._OR_in_inclusiveOrExpression1836); 
					OR116_tree = (CommonTree)adaptor.Create(OR116);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR116_tree, root_0);
					DebugLocation(286, 31);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression1839);
					exclusiveOrExpression117=exclusiveOrExpression();
					PopFollow();

					adaptor.AddChild(root_0, exclusiveOrExpression117.Tree);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 26);
			LeaveRule("inclusiveOrExpression", 26);
			LeaveRule_inclusiveOrExpression();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();

	// $ANTLR start "exclusiveOrExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:289:1: exclusiveOrExpression : andExpression ( XOR ^ andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 27);
		TraceIn("exclusiveOrExpression", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken XOR119 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> andExpression120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree XOR119_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(289, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:290:2: ( andExpression ( XOR ^ andExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:290:4: andExpression ( XOR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(290, 4);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression1853);
			andExpression118=andExpression();
			PopFollow();

			adaptor.AddChild(root_0, andExpression118.Tree);
			DebugLocation(290, 18);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:290:18: ( XOR ^ andExpression )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==XOR))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:290:19: XOR ^ andExpression
					{
					DebugLocation(290, 22);
					XOR119=(IToken)Match(input,XOR,Follow._XOR_in_exclusiveOrExpression1856); 
					XOR119_tree = (CommonTree)adaptor.Create(XOR119);
					root_0 = (CommonTree)adaptor.BecomeRoot(XOR119_tree, root_0);
					DebugLocation(290, 24);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression1859);
					andExpression120=andExpression();
					PopFollow();

					adaptor.AddChild(root_0, andExpression120.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 27);
			LeaveRule("exclusiveOrExpression", 27);
			LeaveRule_exclusiveOrExpression();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();

	// $ANTLR start "andExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:293:1: andExpression : instanceOfExpression ( AND ^ instanceOfExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 28);
		TraceIn("andExpression", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken AND122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression123 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree AND122_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(293, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:294:2: ( instanceOfExpression ( AND ^ instanceOfExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:294:4: instanceOfExpression ( AND ^ instanceOfExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(294, 4);
			PushFollow(Follow._instanceOfExpression_in_andExpression1873);
			instanceOfExpression121=instanceOfExpression();
			PopFollow();

			adaptor.AddChild(root_0, instanceOfExpression121.Tree);
			DebugLocation(294, 25);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:294:25: ( AND ^ instanceOfExpression )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==AND))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:294:26: AND ^ instanceOfExpression
					{
					DebugLocation(294, 29);
					AND122=(IToken)Match(input,AND,Follow._AND_in_andExpression1876); 
					AND122_tree = (CommonTree)adaptor.Create(AND122);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND122_tree, root_0);
					DebugLocation(294, 31);
					PushFollow(Follow._instanceOfExpression_in_andExpression1879);
					instanceOfExpression123=instanceOfExpression();
					PopFollow();

					adaptor.AddChild(root_0, instanceOfExpression123.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 28);
			LeaveRule("andExpression", 28);
			LeaveRule_andExpression();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();

	// $ANTLR start "instanceOfExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:297:1: instanceOfExpression : equalityExpression ( 'instanceof' ^ expression )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 29);
		TraceIn("instanceOfExpression", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal125 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> equalityExpression124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal125_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(297, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:298:2: ( equalityExpression ( 'instanceof' ^ expression )? )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:298:4: equalityExpression ( 'instanceof' ^ expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(298, 4);
			PushFollow(Follow._equalityExpression_in_instanceOfExpression1893);
			equalityExpression124=equalityExpression();
			PopFollow();

			adaptor.AddChild(root_0, equalityExpression124.Tree);
			DebugLocation(298, 23);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:298:23: ( 'instanceof' ^ expression )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==INSTANCEOF))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:298:24: 'instanceof' ^ expression
				{
				DebugLocation(298, 36);
				string_literal125=(IToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression1896); 
				string_literal125_tree = (CommonTree)adaptor.Create(string_literal125);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal125_tree, root_0);
				DebugLocation(298, 38);
				PushFollow(Follow._expression_in_instanceOfExpression1899);
				expression126=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 29);
			LeaveRule("instanceOfExpression", 29);
			LeaveRule_instanceOfExpression();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:301:1: equalityExpression : relationalExpression ( ( EQUALS | NOT_EQUALS | STRICT_EQUALS | STRICT_NOT_EQUALS ) ^ relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 30);
		TraceIn("equalityExpression", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> relationalExpression129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set128_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(301, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:302:2: ( relationalExpression ( ( EQUALS | NOT_EQUALS | STRICT_EQUALS | STRICT_NOT_EQUALS ) ^ relationalExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:302:4: relationalExpression ( ( EQUALS | NOT_EQUALS | STRICT_EQUALS | STRICT_NOT_EQUALS ) ^ relationalExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(302, 4);
			PushFollow(Follow._relationalExpression_in_equalityExpression1913);
			relationalExpression127=relationalExpression();
			PopFollow();

			adaptor.AddChild(root_0, relationalExpression127.Tree);
			DebugLocation(302, 25);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:302:25: ( ( EQUALS | NOT_EQUALS | STRICT_EQUALS | STRICT_NOT_EQUALS ) ^ relationalExpression )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==EQUALS||LA37_0==NOT_EQUALS||(LA37_0>=STRICT_EQUALS && LA37_0<=STRICT_NOT_EQUALS)))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:302:26: ( EQUALS | NOT_EQUALS | STRICT_EQUALS | STRICT_NOT_EQUALS ) ^ relationalExpression
					{
					DebugLocation(302, 83);

					set128=(IToken)input.LT(1);
					set128=(IToken)input.LT(1);
					if (input.LA(1)==EQUALS||input.LA(1)==NOT_EQUALS||(input.LA(1)>=STRICT_EQUALS && input.LA(1)<=STRICT_NOT_EQUALS))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set128), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(302, 85);
					PushFollow(Follow._relationalExpression_in_equalityExpression1933);
					relationalExpression129=relationalExpression();
					PopFollow();

					adaptor.AddChild(root_0, relationalExpression129.Tree);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 30);
			LeaveRule("equalityExpression", 30);
			LeaveRule_equalityExpression();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:305:1: relationalExpression : shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 31);
		TraceIn("relationalExpression", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shiftExpression132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set131_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(305, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:306:2: ( shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:306:4: shiftExpression ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(306, 4);
			PushFollow(Follow._shiftExpression_in_relationalExpression1948);
			shiftExpression130=shiftExpression();
			PopFollow();

			adaptor.AddChild(root_0, shiftExpression130.Tree);
			DebugLocation(306, 20);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:306:20: ( ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==GREAT_THAN))
				{
					alt38 = 1;
				}
				else if ((LA38_0==GREAT_EQUALS||(LA38_0>=LESS_EQUALS && LA38_0<=LESS_THAN)))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:306:21: ( GREAT_EQUALS | GREAT_THAN | LESS_EQUALS | LESS_THAN ) ^ shiftExpression
					{
					DebugLocation(306, 74);

					set131=(IToken)input.LT(1);
					set131=(IToken)input.LT(1);
					if ((input.LA(1)>=GREAT_EQUALS && input.LA(1)<=GREAT_THAN)||(input.LA(1)>=LESS_EQUALS && input.LA(1)<=LESS_THAN))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set131), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(306, 76);
					PushFollow(Follow._shiftExpression_in_relationalExpression1968);
					shiftExpression132=shiftExpression();
					PopFollow();

					adaptor.AddChild(root_0, shiftExpression132.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 31);
			LeaveRule("relationalExpression", 31);
			LeaveRule_relationalExpression();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:309:1: shiftExpression : additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 32);
		TraceIn("shiftExpression", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> additiveExpression135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set134_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(309, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:310:2: ( additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:310:4: additiveExpression ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(310, 4);
			PushFollow(Follow._additiveExpression_in_shiftExpression1982);
			additiveExpression133=additiveExpression();
			PopFollow();

			adaptor.AddChild(root_0, additiveExpression133.Tree);
			DebugLocation(310, 23);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:310:23: ( ( LSHIFT | RSHIFT ) ^ additiveExpression )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==LSHIFT||LA39_0==RSHIFT))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:310:24: ( LSHIFT | RSHIFT ) ^ additiveExpression
					{
					DebugLocation(310, 39);

					set134=(IToken)input.LT(1);
					set134=(IToken)input.LT(1);
					if (input.LA(1)==LSHIFT||input.LA(1)==RSHIFT)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set134), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(310, 41);
					PushFollow(Follow._additiveExpression_in_shiftExpression1992);
					additiveExpression135=additiveExpression();
					PopFollow();

					adaptor.AddChild(root_0, additiveExpression135.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 32);
			LeaveRule("shiftExpression", 32);
			LeaveRule_shiftExpression();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:313:1: additiveExpression : multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 33);
		TraceIn("additiveExpression", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set137_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(313, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:314:2: ( multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:314:4: multiplicativeExpression ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(314, 4);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression2007);
			multiplicativeExpression136=multiplicativeExpression();
			PopFollow();

			adaptor.AddChild(root_0, multiplicativeExpression136.Tree);
			DebugLocation(314, 29);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:314:29: ( ( PLUS | MINUS ) ^ multiplicativeExpression )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==MINUS||LA40_0==PLUS))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:314:30: ( PLUS | MINUS ) ^ multiplicativeExpression
					{
					DebugLocation(314, 42);

					set137=(IToken)input.LT(1);
					set137=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set137), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(314, 44);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression2017);
					multiplicativeExpression138=multiplicativeExpression();
					PopFollow();

					adaptor.AddChild(root_0, multiplicativeExpression138.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 33);
			LeaveRule("additiveExpression", 33);
			LeaveRule_additiveExpression();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:317:1: multiplicativeExpression : unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 34);
		TraceIn("multiplicativeExpression", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set140_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(317, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:318:2: ( unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:318:4: unaryExpression ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(318, 4);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression2031);
			unaryExpression139=unaryExpression();
			PopFollow();

			adaptor.AddChild(root_0, unaryExpression139.Tree);
			DebugLocation(318, 20);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:318:20: ( ( MUL | DIV | MOD ) ^ unaryExpression )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==DIV||(LA41_0>=MOD && LA41_0<=MUL)))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:318:21: ( MUL | DIV | MOD ) ^ unaryExpression
					{
					DebugLocation(318, 38);

					set140=(IToken)input.LT(1);
					set140=(IToken)input.LT(1);
					if (input.LA(1)==DIV||(input.LA(1)>=MOD && input.LA(1)<=MUL))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set140), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(318, 40);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression2047);
					unaryExpression141=unaryExpression();
					PopFollow();

					adaptor.AddChild(root_0, unaryExpression141.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 34);
			LeaveRule("multiplicativeExpression", 34);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:321:1: unaryExpression : ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | 'typeof' unaryExpression -> ^( TYPEOF unaryExpression ) );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 35);
		TraceIn("unaryExpression", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken op = default(IToken);
		IToken string_literal143 = default(IToken);
		IToken string_literal144 = default(IToken);
		IToken string_literal145 = default(IToken);
		IToken string_literal147 = default(IToken);
		IToken string_literal149 = default(IToken);
		IToken string_literal152 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> primaryExpression150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> unaryExpression153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree op_tree = default(CommonTree);
		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree string_literal144_tree = default(CommonTree);
		CommonTree string_literal145_tree = default(CommonTree);
		CommonTree string_literal147_tree = default(CommonTree);
		CommonTree string_literal149_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_INCREMENT=new RewriteRuleITokenStream(adaptor,"token INCREMENT");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
		RewriteRuleITokenStream stream_MINUS=new RewriteRuleITokenStream(adaptor,"token MINUS");
		RewriteRuleITokenStream stream_DECREMENT=new RewriteRuleITokenStream(adaptor,"token DECREMENT");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		RewriteRuleSubtreeStream stream_primaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(321, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:322:2: ( primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression ) | '++' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '++' ) | '--' primaryExpression -> ^( PRE_UNARY_STEP primaryExpression '--' ) | 'new' primaryExpression -> ^( CREATE primaryExpression ) | (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression -> ^( PRE_UNARY $op unaryExpression ) | 'typeof' unaryExpression -> ^( TYPEOF unaryExpression ) )
			int alt44=6;
			try { DebugEnterDecision(44, false);
			switch (input.LA(1))
			{
			case BINARY_LITERATE:
			case HEX_LITERATE:
			case IDENTIFIER:
			case LBRACE:
			case LCURLY:
			case LIT_FALSE:
			case LIT_NULL:
			case LIT_TRUE:
			case LPAREN:
			case NAN:
			case NUMBER_LITERATE:
			case STRING_LITERATE:
			case THIS:
			case UNDEFINED:
			case 134:
				{
				alt44 = 1;
				}
				break;
			case INCREMENT:
				{
				alt44 = 2;
				}
				break;
			case DECREMENT:
				{
				alt44 = 3;
				}
				break;
			case 138:
				{
				alt44 = 4;
				}
				break;
			case MINUS:
			case NOT:
			case PLUS:
			case 146:
				{
				alt44 = 5;
				}
				break;
			case 144:
				{
				alt44 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:323:4: primaryExpression ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				{
				DebugLocation(323, 4);
				PushFollow(Follow._primaryExpression_in_unaryExpression2066);
				primaryExpression142=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression142.Tree);
				DebugLocation(323, 22);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:323:22: ( '++' -> ^( POST_UNARY_STEP primaryExpression '++' ) | '--' -> ^( POST_UNARY_STEP primaryExpression '--' ) | -> primaryExpression )
				int alt42=3;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case INCREMENT:
					{
					alt42 = 1;
					}
					break;
				case DECREMENT:
					{
					alt42 = 2;
					}
					break;
				case EOF:
				case AND:
				case ASSIGNMENT:
				case ASSIGN_AND:
				case ASSIGN_DIV:
				case ASSIGN_LSHIFT:
				case ASSIGN_MINUS:
				case ASSIGN_MUL:
				case ASSIGN_OR:
				case ASSIGN_PLUS:
				case ASSIGN_REM:
				case ASSIGN_REV:
				case ASSIGN_RSHIFT:
				case COLON:
				case COMMA:
				case CONDITION:
				case DIV:
				case DOT:
				case EQUALS:
				case GREAT_EQUALS:
				case GREAT_THAN:
				case IDENTIFIER:
				case INSTANCEOF:
				case LBRACE:
				case LCURLY:
				case LESS_EQUALS:
				case LESS_THAN:
				case LOGICAL_AND:
				case LOGICAL_OR:
				case LPAREN:
				case LSHIFT:
				case MINUS:
				case MOD:
				case MUL:
				case NOT_EQUALS:
				case OR:
				case PLUS:
				case RBRACE:
				case RCURLY:
				case RPAREN:
				case RSHIFT:
				case SEMI:
				case STRICT_EQUALS:
				case STRICT_NOT_EQUALS:
				case XOR:
				case 123:
					{
					alt42 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:324:6: '++'
					{
					DebugLocation(324, 6);
					string_literal143=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression2076);  
					stream_INCREMENT.Add(string_literal143);



					{
					// AST REWRITE
					// elements: INCREMENT, primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 324:12: -> ^( POST_UNARY_STEP primaryExpression '++' )
					{
						DebugLocation(324, 15);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:324:15: ^( POST_UNARY_STEP primaryExpression '++' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(324, 17);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(324, 33);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(324, 51);
						adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:325:10: '--'
					{
					DebugLocation(325, 10);
					string_literal144=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression2098);  
					stream_DECREMENT.Add(string_literal144);



					{
					// AST REWRITE
					// elements: DECREMENT, primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 325:16: -> ^( POST_UNARY_STEP primaryExpression '--' )
					{
						DebugLocation(325, 19);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:325:19: ^( POST_UNARY_STEP primaryExpression '--' )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(325, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(POST_UNARY_STEP, "POST_UNARY_STEP"), root_1);

						DebugLocation(325, 37);
						adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
						DebugLocation(325, 55);
						adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:326:10: 
					{

					{
					// AST REWRITE
					// elements: primaryExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 326:10: -> primaryExpression
					{
						DebugLocation(326, 13);
						adaptor.AddChild(root_0, stream_primaryExpression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:328:4: '++' primaryExpression
				{
				DebugLocation(328, 4);
				string_literal145=(IToken)Match(input,INCREMENT,Follow._INCREMENT_in_unaryExpression2136);  
				stream_INCREMENT.Add(string_literal145);

				DebugLocation(328, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression2138);
				primaryExpression146=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression146.Tree);


				{
				// AST REWRITE
				// elements: INCREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:3: -> ^( PRE_UNARY_STEP primaryExpression '++' )
				{
					DebugLocation(329, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:329:6: ^( PRE_UNARY_STEP primaryExpression '++' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(329, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(329, 41);
					adaptor.AddChild(root_1, stream_INCREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:330:4: '--' primaryExpression
				{
				DebugLocation(330, 4);
				string_literal147=(IToken)Match(input,DECREMENT,Follow._DECREMENT_in_unaryExpression2155);  
				stream_DECREMENT.Add(string_literal147);

				DebugLocation(330, 9);
				PushFollow(Follow._primaryExpression_in_unaryExpression2157);
				primaryExpression148=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression148.Tree);


				{
				// AST REWRITE
				// elements: DECREMENT, primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 331:3: -> ^( PRE_UNARY_STEP primaryExpression '--' )
				{
					DebugLocation(331, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:331:6: ^( PRE_UNARY_STEP primaryExpression '--' )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(331, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY_STEP, "PRE_UNARY_STEP"), root_1);

					DebugLocation(331, 23);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());
					DebugLocation(331, 41);
					adaptor.AddChild(root_1, stream_DECREMENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:332:4: 'new' primaryExpression
				{
				DebugLocation(332, 4);
				string_literal149=(IToken)Match(input,138,Follow._138_in_unaryExpression2174);  
				stream_138.Add(string_literal149);

				DebugLocation(332, 10);
				PushFollow(Follow._primaryExpression_in_unaryExpression2176);
				primaryExpression150=primaryExpression();
				PopFollow();

				stream_primaryExpression.Add(primaryExpression150.Tree);


				{
				// AST REWRITE
				// elements: primaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 333:3: -> ^( CREATE primaryExpression )
				{
					DebugLocation(333, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:333:6: ^( CREATE primaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(333, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CREATE, "CREATE"), root_1);

					DebugLocation(333, 15);
					adaptor.AddChild(root_1, stream_primaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:334:4: (op= '+' |op= '-' |op= '!' |op= '~' ) unaryExpression
				{
				DebugLocation(334, 4);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:334:4: (op= '+' |op= '-' |op= '!' |op= '~' )
				int alt43=4;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				switch (input.LA(1))
				{
				case PLUS:
					{
					alt43 = 1;
					}
					break;
				case MINUS:
					{
					alt43 = 2;
					}
					break;
				case NOT:
					{
					alt43 = 3;
					}
					break;
				case 146:
					{
					alt43 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:334:5: op= '+'
					{
					DebugLocation(334, 7);
					op=(IToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression2194);  
					stream_PLUS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:334:12: op= '-'
					{
					DebugLocation(334, 14);
					op=(IToken)Match(input,MINUS,Follow._MINUS_in_unaryExpression2198);  
					stream_MINUS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:334:19: op= '!'
					{
					DebugLocation(334, 21);
					op=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpression2202);  
					stream_NOT.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:334:26: op= '~'
					{
					DebugLocation(334, 28);
					op=(IToken)Match(input,146,Follow._146_in_unaryExpression2206);  
					stream_146.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(334, 34);
				PushFollow(Follow._unaryExpression_in_unaryExpression2209);
				unaryExpression151=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(unaryExpression151.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression, op
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 335:3: -> ^( PRE_UNARY $op unaryExpression )
				{
					DebugLocation(335, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:335:6: ^( PRE_UNARY $op unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(335, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PRE_UNARY, "PRE_UNARY"), root_1);

					DebugLocation(335, 19);
					adaptor.AddChild(root_1, stream_op.NextNode());
					DebugLocation(335, 22);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:336:7: 'typeof' unaryExpression
				{
				DebugLocation(336, 7);
				string_literal152=(IToken)Match(input,144,Follow._144_in_unaryExpression2230);  
				stream_144.Add(string_literal152);

				DebugLocation(336, 16);
				PushFollow(Follow._unaryExpression_in_unaryExpression2232);
				unaryExpression153=unaryExpression();
				PopFollow();

				stream_unaryExpression.Add(unaryExpression153.Tree);


				{
				// AST REWRITE
				// elements: unaryExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 336:32: -> ^( TYPEOF unaryExpression )
				{
					DebugLocation(336, 35);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:336:35: ^( TYPEOF unaryExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(336, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TYPEOF, "TYPEOF"), root_1);

					DebugLocation(336, 44);
					adaptor.AddChild(root_1, stream_unaryExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 35);
			LeaveRule("unaryExpression", 35);
			LeaveRule_unaryExpression();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:339:1: primaryExpression : ( ( variable -> variable | literal -> literal |cl= constLiteral -> ^( CONST_VALUE ) | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )* );
	[GrammarRule("primaryExpression")]
	private AstParserRuleReturnScope<CommonTree, IToken> primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 36);
		TraceIn("primaryExpression", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken char_literal161 = default(IToken);
		IToken char_literal162 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken char_literal164 = default(IToken);
		IToken IDENTIFIER165 = default(IToken);
		IToken char_literal166 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken char_literal170 = default(IToken);
		IToken IDENTIFIER171 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cl = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> idx = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> variable154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> literal155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> array_literal156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> anonymous_function_define157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> object_literal169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		CommonTree char_literal162_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		CommonTree IDENTIFIER165_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree char_literal170_tree = default(CommonTree);
		CommonTree IDENTIFIER171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_anonymous_function_define=new RewriteRuleSubtreeStream(adaptor,"rule anonymous_function_define");
		RewriteRuleSubtreeStream stream_constLiteral=new RewriteRuleSubtreeStream(adaptor,"rule constLiteral");
		RewriteRuleSubtreeStream stream_array_literal=new RewriteRuleSubtreeStream(adaptor,"rule array_literal");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		RewriteRuleSubtreeStream stream_object_literal=new RewriteRuleSubtreeStream(adaptor,"rule object_literal");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(339, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:340:2: ( ( variable -> variable | literal -> literal |cl= constLiteral -> ^( CONST_VALUE ) | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )* | ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )* )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==BINARY_LITERATE||(LA49_0>=HEX_LITERATE && LA49_0<=IDENTIFIER)||LA49_0==LBRACE||(LA49_0>=LIT_FALSE && LA49_0<=LIT_TRUE)||LA49_0==LPAREN||LA49_0==NAN||LA49_0==NUMBER_LITERATE||LA49_0==STRING_LITERATE||LA49_0==THIS||LA49_0==UNDEFINED||LA49_0==134))
			{
				alt49 = 1;
			}
			else if ((LA49_0==LCURLY))
			{
				alt49 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:341:2: ( variable -> variable | literal -> literal |cl= constLiteral -> ^( CONST_VALUE ) | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression ) ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				{
				DebugLocation(341, 2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:341:2: ( variable -> variable | literal -> literal |cl= constLiteral -> ^( CONST_VALUE ) | array_literal -> array_literal | anonymous_function_define -> anonymous_function_define | '(' expression ')' -> expression )
				int alt45=6;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA45_1 = input.LA(2);

					if ((LA45_1==125))
					{
						alt45 = 5;
					}
					else if ((LA45_1==EOF||LA45_1==AND||(LA45_1>=ASSIGNMENT && LA45_1<=ASSIGN_RSHIFT)||LA45_1==COLON||LA45_1==COMMA||LA45_1==CONDITION||LA45_1==DECREMENT||(LA45_1>=DIV && LA45_1<=DOT)||LA45_1==EQUALS||(LA45_1>=GREAT_EQUALS && LA45_1<=GREAT_THAN)||LA45_1==IDENTIFIER||(LA45_1>=INCREMENT && LA45_1<=INSTANCEOF)||(LA45_1>=LBRACE && LA45_1<=LESS_THAN)||(LA45_1>=LOGICAL_AND && LA45_1<=LSHIFT)||(LA45_1>=MINUS && LA45_1<=MUL)||LA45_1==NOT_EQUALS||LA45_1==OR||LA45_1==PLUS||(LA45_1>=RBRACE && LA45_1<=RCURLY)||(LA45_1>=RPAREN && LA45_1<=STRICT_NOT_EQUALS)||(LA45_1>=XOR && LA45_1<=123)))
					{
						alt45 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 45, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case THIS:
					{
					alt45 = 2;
					}
					break;
				case BINARY_LITERATE:
				case HEX_LITERATE:
				case LIT_FALSE:
				case LIT_NULL:
				case LIT_TRUE:
				case NAN:
				case NUMBER_LITERATE:
				case STRING_LITERATE:
				case UNDEFINED:
					{
					alt45 = 3;
					}
					break;
				case LBRACE:
					{
					alt45 = 4;
					}
					break;
				case 134:
					{
					alt45 = 5;
					}
					break;
				case LPAREN:
					{
					switch (input.LA(2))
					{
					case IDENTIFIER:
						{
						switch (input.LA(3))
						{
						case EOF:
						case AND:
						case ASSIGNMENT:
						case CONDITION:
						case DECREMENT:
						case DIV:
						case DOT:
						case EQUALS:
						case GREAT_EQUALS:
						case GREAT_THAN:
						case INCREMENT:
						case INSTANCEOF:
						case LBRACE:
						case LCURLY:
						case LESS_EQUALS:
						case LESS_THAN:
						case LOGICAL_AND:
						case LOGICAL_OR:
						case LPAREN:
						case LSHIFT:
						case MINUS:
						case MOD:
						case MUL:
						case NOT_EQUALS:
						case OR:
						case PLUS:
						case RSHIFT:
						case STRICT_EQUALS:
						case STRICT_NOT_EQUALS:
						case XOR:
						case 125:
							{
							alt45 = 6;
							}
							break;
						case COMMA:
							{
							alt45 = 5;
							}
							break;
						case RPAREN:
							{
							int LA45_10 = input.LA(4);

							if ((LA45_10==125))
							{
								alt45 = 5;
							}
							else if ((LA45_10==EOF||LA45_10==AND||(LA45_10>=ASSIGNMENT && LA45_10<=ASSIGN_RSHIFT)||LA45_10==COLON||LA45_10==COMMA||LA45_10==CONDITION||LA45_10==DECREMENT||(LA45_10>=DIV && LA45_10<=DOT)||LA45_10==EQUALS||(LA45_10>=GREAT_EQUALS && LA45_10<=GREAT_THAN)||LA45_10==IDENTIFIER||(LA45_10>=INCREMENT && LA45_10<=INSTANCEOF)||(LA45_10>=LBRACE && LA45_10<=LESS_THAN)||(LA45_10>=LOGICAL_AND && LA45_10<=LSHIFT)||(LA45_10>=MINUS && LA45_10<=MUL)||LA45_10==NOT_EQUALS||LA45_10==OR||LA45_10==PLUS||(LA45_10>=RBRACE && LA45_10<=RCURLY)||(LA45_10>=RPAREN && LA45_10<=STRICT_NOT_EQUALS)||(LA45_10>=XOR && LA45_10<=123)))
							{
								alt45 = 6;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 45, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 45, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case RPAREN:
						{
						alt45 = 5;
						}
						break;
					case BINARY_LITERATE:
					case DECREMENT:
					case HEX_LITERATE:
					case INCREMENT:
					case LBRACE:
					case LCURLY:
					case LESS_THAN:
					case LIT_FALSE:
					case LIT_NULL:
					case LIT_TRUE:
					case LPAREN:
					case MINUS:
					case NAN:
					case NOT:
					case NUMBER_LITERATE:
					case PLUS:
					case STRING_LITERATE:
					case THIS:
					case UNDEFINED:
					case 134:
					case 138:
					case 144:
					case 146:
						{
						alt45 = 6;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 45, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:342:5: variable
					{
					DebugLocation(342, 5);
					PushFollow(Follow._variable_in_primaryExpression2259);
					variable154=variable();
					PopFollow();

					stream_variable.Add(variable154.Tree);


					{
					// AST REWRITE
					// elements: variable
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:20: -> variable
					{
						DebugLocation(342, 23);
						adaptor.AddChild(root_0, stream_variable.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:343:5: literal
					{
					DebugLocation(343, 5);
					PushFollow(Follow._literal_in_primaryExpression2275);
					literal155=literal();
					PopFollow();

					stream_literal.Add(literal155.Tree);


					{
					// AST REWRITE
					// elements: literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:19: -> literal
					{
						DebugLocation(343, 22);
						adaptor.AddChild(root_0, stream_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:344:5: cl= constLiteral
					{
					DebugLocation(344, 7);
					PushFollow(Follow._constLiteral_in_primaryExpression2293);
					cl=constLiteral();
					PopFollow();

					stream_constLiteral.Add(cl.Tree);


					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:25: -> ^( CONST_VALUE )
					{
						DebugLocation(344, 28);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:344:28: ^( CONST_VALUE )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CONST_VALUE, "CONST_VALUE"), root_1);

						DebugLocation(344, 42);
						adaptor.AddChild(root_1,  ConstLiteral(cl.Tree) );

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:345:5: array_literal
					{
					DebugLocation(345, 5);
					PushFollow(Follow._array_literal_in_primaryExpression2312);
					array_literal156=array_literal();
					PopFollow();

					stream_array_literal.Add(array_literal156.Tree);


					{
					// AST REWRITE
					// elements: array_literal
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 345:23: -> array_literal
					{
						DebugLocation(345, 26);
						adaptor.AddChild(root_0, stream_array_literal.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:346:5: anonymous_function_define
					{
					DebugLocation(346, 5);
					PushFollow(Follow._anonymous_function_define_in_primaryExpression2326);
					anonymous_function_define157=anonymous_function_define();
					PopFollow();

					stream_anonymous_function_define.Add(anonymous_function_define157.Tree);


					{
					// AST REWRITE
					// elements: anonymous_function_define
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 346:32: -> anonymous_function_define
					{
						DebugLocation(346, 35);
						adaptor.AddChild(root_0, stream_anonymous_function_define.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:347:5: '(' expression ')'
					{
					DebugLocation(347, 5);
					char_literal158=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2337);  
					stream_LPAREN.Add(char_literal158);

					DebugLocation(347, 9);
					PushFollow(Follow._expression_in_primaryExpression2339);
					expression159=expression();
					PopFollow();

					stream_expression.Add(expression159.Tree);
					DebugLocation(347, 20);
					char_literal160=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2341);  
					stream_RPAREN.Add(char_literal160);



					{
					// AST REWRITE
					// elements: expression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 347:26: -> expression
					{
						DebugLocation(347, 29);
						adaptor.AddChild(root_0, stream_expression.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(349, 2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:349:2: ( '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) ) | '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) | '[' idx= expression ']' -> ^( ARRAY_ACCESS $primaryExpression $idx) | object_literal -> ^( COMBINE_OBJECT $primaryExpression object_literal ) )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=5;
					try { DebugEnterDecision(47, false);
					switch (input.LA(1))
					{
					case LPAREN:
						{
						alt47 = 1;
						}
						break;
					case DOT:
						{
						alt47 = 2;
						}
						break;
					case LBRACE:
						{
						alt47 = 3;
						}
						break;
					case LCURLY:
						{
						alt47 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:350:3: '(' ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						{
						DebugLocation(350, 3);
						char_literal161=(IToken)Match(input,LPAREN,Follow._LPAREN_in_primaryExpression2357);  
						stream_LPAREN.Add(char_literal161);

						DebugLocation(350, 7);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:350:7: ( ')' -> ^( FUNCTION_CALL $primaryExpression) |exp= expressionList ')' -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) ) )
						int alt46=2;
						try { DebugEnterSubRule(46);
						try { DebugEnterDecision(46, false);
						int LA46_0 = input.LA(1);

						if ((LA46_0==RPAREN))
						{
							alt46 = 1;
						}
						else if ((LA46_0==BINARY_LITERATE||LA46_0==DECREMENT||(LA46_0>=HEX_LITERATE && LA46_0<=IDENTIFIER)||LA46_0==INCREMENT||(LA46_0>=LBRACE && LA46_0<=LCURLY)||LA46_0==LESS_THAN||(LA46_0>=LIT_FALSE && LA46_0<=LIT_TRUE)||LA46_0==LPAREN||LA46_0==MINUS||LA46_0==NAN||LA46_0==NOT||LA46_0==NUMBER_LITERATE||LA46_0==PLUS||LA46_0==STRING_LITERATE||LA46_0==THIS||LA46_0==UNDEFINED||LA46_0==134||LA46_0==138||LA46_0==144||LA46_0==146))
						{
							alt46 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(46); }
						switch (alt46)
						{
						case 1:
							DebugEnterAlt(1);
							// E:\\dotnet-projects\\ReoScript\\ReoScript.g:351:4: ')'
							{
							DebugLocation(351, 4);
							char_literal162=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2365);  
							stream_RPAREN.Add(char_literal162);



							{
							// AST REWRITE
							// elements: primaryExpression
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 351:9: -> ^( FUNCTION_CALL $primaryExpression)
							{
								DebugLocation(351, 12);
								// E:\\dotnet-projects\\ReoScript\\ReoScript.g:351:12: ^( FUNCTION_CALL $primaryExpression)
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(351, 14);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(351, 29);
								adaptor.AddChild(root_1, stream_retval.NextTree());

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// E:\\dotnet-projects\\ReoScript\\ReoScript.g:352:6: exp= expressionList ')'
							{
							DebugLocation(352, 9);
							PushFollow(Follow._expressionList_in_primaryExpression2384);
							exp=expressionList();
							PopFollow();

							stream_expressionList.Add(exp.Tree);
							DebugLocation(352, 25);
							char_literal163=(IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression2386);  
							stream_RPAREN.Add(char_literal163);



							{
							// AST REWRITE
							// elements: exp, primaryExpression
							// token labels: 
							// rule labels: exp, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp",exp!=null?exp.Tree:null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 353:6: -> ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
							{
								DebugLocation(353, 9);
								// E:\\dotnet-projects\\ReoScript\\ReoScript.g:353:9: ^( FUNCTION_CALL $primaryExpression ^( ARGUMENT_LIST $exp) )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(353, 11);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FUNCTION_CALL, "FUNCTION_CALL"), root_1);

								DebugLocation(353, 26);
								adaptor.AddChild(root_1, stream_retval.NextTree());
								DebugLocation(353, 44);
								// E:\\dotnet-projects\\ReoScript\\ReoScript.g:353:44: ^( ARGUMENT_LIST $exp)
								{
								CommonTree root_2 = (CommonTree)adaptor.Nil();
								DebugLocation(353, 46);
								root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGUMENT_LIST, "ARGUMENT_LIST"), root_2);

								DebugLocation(353, 61);
								adaptor.AddChild(root_2, stream_exp.NextTree());

								adaptor.AddChild(root_1, root_2);
								}

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;

						}
						} finally { DebugExitSubRule(46); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:355:5: '.' IDENTIFIER
						{
						DebugLocation(355, 5);
						char_literal164=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2418);  
						stream_DOT.Add(char_literal164);

						DebugLocation(355, 9);
						IDENTIFIER165=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression2420);  
						stream_IDENTIFIER.Add(IDENTIFIER165);



						{
						// AST REWRITE
						// elements: IDENTIFIER, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 356:4: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(356, 7);
							// E:\\dotnet-projects\\ReoScript\\ReoScript.g:356:7: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(356, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(356, 26);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(356, 44);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:357:5: '[' idx= expression ']'
						{
						DebugLocation(357, 5);
						char_literal166=(IToken)Match(input,LBRACE,Follow._LBRACE_in_primaryExpression2440);  
						stream_LBRACE.Add(char_literal166);

						DebugLocation(357, 12);
						PushFollow(Follow._expression_in_primaryExpression2444);
						idx=expression();
						PopFollow();

						stream_expression.Add(idx.Tree);
						DebugLocation(357, 24);
						char_literal167=(IToken)Match(input,RBRACE,Follow._RBRACE_in_primaryExpression2446);  
						stream_RBRACE.Add(char_literal167);



						{
						// AST REWRITE
						// elements: idx, primaryExpression
						// token labels: 
						// rule labels: retval, idx
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_idx=new RewriteRuleSubtreeStream(adaptor,"rule idx",idx!=null?idx.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 358:4: -> ^( ARRAY_ACCESS $primaryExpression $idx)
						{
							DebugLocation(358, 7);
							// E:\\dotnet-projects\\ReoScript\\ReoScript.g:358:7: ^( ARRAY_ACCESS $primaryExpression $idx)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(358, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_ACCESS, "ARRAY_ACCESS"), root_1);

							DebugLocation(358, 23);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(358, 42);
							adaptor.AddChild(root_1, stream_idx.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:359:5: object_literal
						{
						DebugLocation(359, 5);
						PushFollow(Follow._object_literal_in_primaryExpression2467);
						object_literal168=object_literal();
						PopFollow();

						stream_object_literal.Add(object_literal168.Tree);


						{
						// AST REWRITE
						// elements: object_literal, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 360:4: -> ^( COMBINE_OBJECT $primaryExpression object_literal )
						{
							DebugLocation(360, 7);
							// E:\\dotnet-projects\\ReoScript\\ReoScript.g:360:7: ^( COMBINE_OBJECT $primaryExpression object_literal )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(360, 9);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(COMBINE_OBJECT, "COMBINE_OBJECT"), root_1);

							DebugLocation(360, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(360, 43);
							adaptor.AddChild(root_1, stream_object_literal.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:362:4: ( object_literal -> object_literal ) ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )*
				{
				DebugLocation(362, 4);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:362:4: ( object_literal -> object_literal )
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:363:2: object_literal
				{
				DebugLocation(363, 2);
				PushFollow(Follow._object_literal_in_primaryExpression2493);
				object_literal169=object_literal();
				PopFollow();

				stream_object_literal.Add(object_literal169.Tree);


				{
				// AST REWRITE
				// elements: object_literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 363:20: -> object_literal
				{
					DebugLocation(363, 23);
					adaptor.AddChild(root_0, stream_object_literal.NextTree());

				}

				retval.Tree = root_0;
				}

				}

				DebugLocation(365, 2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:365:2: ( '.' IDENTIFIER -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER ) )*
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=2;
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==DOT))
					{
						int LA48_2 = input.LA(2);

						if ((LA48_2==IDENTIFIER))
						{
							alt48 = 1;
						}


					}


					} finally { DebugExitDecision(48); }
					switch ( alt48 )
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:365:4: '.' IDENTIFIER
						{
						DebugLocation(365, 4);
						char_literal170=(IToken)Match(input,DOT,Follow._DOT_in_primaryExpression2508);  
						stream_DOT.Add(char_literal170);

						DebugLocation(365, 8);
						IDENTIFIER171=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primaryExpression2510);  
						stream_IDENTIFIER.Add(IDENTIFIER171);



						{
						// AST REWRITE
						// elements: IDENTIFIER, primaryExpression
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 366:3: -> ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
						{
							DebugLocation(366, 6);
							// E:\\dotnet-projects\\ReoScript\\ReoScript.g:366:6: ^( PROPERTY_ACCESS $primaryExpression IDENTIFIER )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(366, 8);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROPERTY_ACCESS, "PROPERTY_ACCESS"), root_1);

							DebugLocation(366, 25);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(366, 43);
							adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					default:
						goto loop48;
					}
				}

				loop48:
					;

				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 36);
			LeaveRule("primaryExpression", 36);
			LeaveRule_primaryExpression();
		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_tag();
	partial void LeaveRule_tag();

	// $ANTLR start "tag"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:372:1: tag : '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? ) ;
	[GrammarRule("tag")]
	private AstParserRuleReturnScope<CommonTree, IToken> tag()
	{
		EnterRule_tag();
		EnterRule("tag", 37);
		TraceIn("tag", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ns = default(IToken);
		IToken name = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken char_literal173 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken string_literal176 = default(IToken);
		IToken IDENTIFIER177 = default(IToken);
		IToken char_literal178 = default(IToken);
		IToken IDENTIFIER179 = default(IToken);
		IToken char_literal180 = default(IToken);
		IToken string_literal181 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> s = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tagAttr174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree ns_tree = default(CommonTree);
		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		CommonTree IDENTIFIER177_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree IDENTIFIER179_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree string_literal181_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_GREAT_THAN=new RewriteRuleITokenStream(adaptor,"token GREAT_THAN");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_tagAttr=new RewriteRuleSubtreeStream(adaptor,"rule tagAttr");
		RewriteRuleSubtreeStream stream_tagStmt=new RewriteRuleSubtreeStream(adaptor,"rule tagStmt");
		try { DebugEnterRule(GrammarFileName, "tag");
		DebugLocation(372, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:373:2: ( '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' ) -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:373:4: '<' (ns= IDENTIFIER ':' )? name= IDENTIFIER ( tagAttr )* ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			{
			DebugLocation(373, 4);
			char_literal172=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_tag2540);  
			stream_LESS_THAN.Add(char_literal172);

			DebugLocation(373, 8);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:373:8: (ns= IDENTIFIER ':' )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==IDENTIFIER))
			{
				int LA50_1 = input.LA(2);

				if ((LA50_1==COLON))
				{
					alt50 = 1;
				}
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:373:9: ns= IDENTIFIER ':'
				{
				DebugLocation(373, 11);
				ns=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2545);  
				stream_IDENTIFIER.Add(ns);

				DebugLocation(373, 23);
				char_literal173=(IToken)Match(input,COLON,Follow._COLON_in_tag2547);  
				stream_COLON.Add(char_literal173);


				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(373, 33);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2553);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(373, 45);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:373:45: ( tagAttr )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==IDENTIFIER))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:373:45: tagAttr
					{
					DebugLocation(373, 45);
					PushFollow(Follow._tagAttr_in_tag2555);
					tagAttr174=tagAttr();
					PopFollow();

					stream_tagAttr.Add(tagAttr174.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(374, 2);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:374:2: ( '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>' | '/>' )
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==GREAT_THAN))
			{
				alt53 = 1;
			}
			else if ((LA53_0==123))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:375:4: '>' s= tagStmt '</' ( IDENTIFIER ':' )? IDENTIFIER '>'
				{
				DebugLocation(375, 4);
				char_literal175=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2565);  
				stream_GREAT_THAN.Add(char_literal175);

				DebugLocation(375, 9);
				PushFollow(Follow._tagStmt_in_tag2569);
				s=tagStmt();
				PopFollow();

				stream_tagStmt.Add(s.Tree);
				DebugLocation(375, 19);
				string_literal176=(IToken)Match(input,124,Follow._124_in_tag2572);  
				stream_124.Add(string_literal176);

				DebugLocation(375, 24);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:375:24: ( IDENTIFIER ':' )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==IDENTIFIER))
				{
					int LA52_1 = input.LA(2);

					if ((LA52_1==COLON))
					{
						alt52 = 1;
					}
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:375:25: IDENTIFIER ':'
					{
					DebugLocation(375, 25);
					IDENTIFIER177=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2575);  
					stream_IDENTIFIER.Add(IDENTIFIER177);

					DebugLocation(375, 36);
					char_literal178=(IToken)Match(input,COLON,Follow._COLON_in_tag2577);  
					stream_COLON.Add(char_literal178);


					}
					break;

				}
				} finally { DebugExitSubRule(52); }

				DebugLocation(375, 42);
				IDENTIFIER179=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tag2581);  
				stream_IDENTIFIER.Add(IDENTIFIER179);

				DebugLocation(375, 53);
				char_literal180=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tag2583);  
				stream_GREAT_THAN.Add(char_literal180);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:376:4: '/>'
				{
				DebugLocation(376, 4);
				string_literal181=(IToken)Match(input,123,Follow._123_in_tag2589);  
				stream_123.Add(string_literal181);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: name, tagAttr, ns, s
			// token labels: ns, name
			// rule labels: retval, s
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_ns=new RewriteRuleITokenStream(adaptor,"token ns",ns);
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 378:2: -> ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? )
			{
				DebugLocation(378, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:378:5: ^( TAG ^( TAG_NAME $name ( $ns)? ) ^( TAG_ATTR_LIST ( tagAttr )* ) ( $s)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(378, 7);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG, "TAG"), root_1);

				DebugLocation(378, 11);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:378:11: ^( TAG_NAME $name ( $ns)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(378, 13);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_NAME, "TAG_NAME"), root_2);

				DebugLocation(378, 23);
				adaptor.AddChild(root_2, stream_name.NextNode());
				DebugLocation(378, 29);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:378:29: ( $ns)?
				if (stream_ns.HasNext)
				{
					DebugLocation(378, 29);
					adaptor.AddChild(root_2, stream_ns.NextNode());

				}
				stream_ns.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(378, 34);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:378:34: ^( TAG_ATTR_LIST ( tagAttr )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(378, 36);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR_LIST, "TAG_ATTR_LIST"), root_2);

				DebugLocation(378, 50);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:378:50: ( tagAttr )*
				while ( stream_tagAttr.HasNext )
				{
					DebugLocation(378, 50);
					adaptor.AddChild(root_2, stream_tagAttr.NextTree());

				}
				stream_tagAttr.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(378, 61);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:378:61: ( $s)?
				if (stream_s.HasNext)
				{
					DebugLocation(378, 61);
					adaptor.AddChild(root_1, stream_s.NextTree());

				}
				stream_s.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tag", 37);
			LeaveRule("tag", 37);
			LeaveRule_tag();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "tag"); }
		return retval;

	}
	// $ANTLR end "tag"

	partial void EnterRule_tagStmt();
	partial void LeaveRule_tagStmt();

	// $ANTLR start "tagStmt"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:381:1: tagStmt : ( statement | tag )* ;
	[GrammarRule("tagStmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagStmt()
	{
		EnterRule_tagStmt();
		EnterRule("tagStmt", 38);
		TraceIn("tagStmt", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> statement182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tag183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "tagStmt");
		DebugLocation(381, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:382:2: ( ( statement | tag )* )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:382:4: ( statement | tag )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(382, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:382:4: ( statement | tag )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=3;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==BINARY_LITERATE||LA54_0==DECREMENT||(LA54_0>=HEX_LITERATE && LA54_0<=IDENTIFIER)||LA54_0==INCREMENT||LA54_0==INTERNAL||(LA54_0>=LBRACE && LA54_0<=LCURLY)||(LA54_0>=LIT_FALSE && LA54_0<=LIT_TRUE)||LA54_0==LPAREN||LA54_0==NAN||LA54_0==NUMBER_LITERATE||LA54_0==PRIVATE||(LA54_0>=PROTECTED && LA54_0<=PUBLIC)||LA54_0==STRING_LITERATE||LA54_0==THIS||LA54_0==TYPE||LA54_0==UNDEFINED||LA54_0==126||LA54_0==129||LA54_0==131||(LA54_0>=133 && LA54_0<=136)||(LA54_0>=138 && LA54_0<=143)||LA54_0==145))
				{
					alt54 = 1;
				}
				else if ((LA54_0==LESS_THAN))
				{
					alt54 = 2;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:382:5: statement
					{
					DebugLocation(382, 5);
					PushFollow(Follow._statement_in_tagStmt2636);
					statement182=statement();
					PopFollow();

					adaptor.AddChild(root_0, statement182.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:382:17: tag
					{
					DebugLocation(382, 17);
					PushFollow(Follow._tag_in_tagStmt2640);
					tag183=tag();
					PopFollow();

					adaptor.AddChild(root_0, tag183.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagStmt", 38);
			LeaveRule("tagStmt", 38);
			LeaveRule_tagStmt();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "tagStmt"); }
		return retval;

	}
	// $ANTLR end "tagStmt"

	partial void EnterRule_tagAttr();
	partial void LeaveRule_tagAttr();

	// $ANTLR start "tagAttr"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:385:1: tagAttr : name= IDENTIFIER '=' val= unaryExpression -> ^( TAG_ATTR $name $val) ;
	[GrammarRule("tagAttr")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagAttr()
	{
		EnterRule_tagAttr();
		EnterRule("tagAttr", 39);
		TraceIn("tagAttr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken name = default(IToken);
		IToken char_literal184 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> val = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree name_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ASSIGNMENT=new RewriteRuleITokenStream(adaptor,"token ASSIGNMENT");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
		try { DebugEnterRule(GrammarFileName, "tagAttr");
		DebugLocation(385, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:386:2: (name= IDENTIFIER '=' val= unaryExpression -> ^( TAG_ATTR $name $val) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:386:4: name= IDENTIFIER '=' val= unaryExpression
			{
			DebugLocation(386, 8);
			name=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tagAttr2655);  
			stream_IDENTIFIER.Add(name);

			DebugLocation(386, 20);
			char_literal184=(IToken)Match(input,ASSIGNMENT,Follow._ASSIGNMENT_in_tagAttr2657);  
			stream_ASSIGNMENT.Add(char_literal184);

			DebugLocation(386, 27);
			PushFollow(Follow._unaryExpression_in_tagAttr2661);
			val=unaryExpression();
			PopFollow();

			stream_unaryExpression.Add(val.Tree);


			{
			// AST REWRITE
			// elements: name, val
			// token labels: name
			// rule labels: val, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_name=new RewriteRuleITokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val",val!=null?val.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 387:3: -> ^( TAG_ATTR $name $val)
			{
				DebugLocation(387, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:387:6: ^( TAG_ATTR $name $val)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(387, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAG_ATTR, "TAG_ATTR"), root_1);

				DebugLocation(387, 18);
				adaptor.AddChild(root_1, stream_name.NextNode());
				DebugLocation(387, 24);
				adaptor.AddChild(root_1, stream_val.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagAttr", 39);
			LeaveRule("tagAttr", 39);
			LeaveRule_tagAttr();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "tagAttr"); }
		return retval;

	}
	// $ANTLR end "tagAttr"

	partial void EnterRule_tagTemplateDefine();
	partial void LeaveRule_tagTemplateDefine();

	// $ANTLR start "tagTemplateDefine"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:390:1: tagTemplateDefine : ( memberModifier )? 'template' '<' typename= IDENTIFIER '>' ( '(' args= parameterDeclarationList ')' )? tag -> ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag ) ;
	[GrammarRule("tagTemplateDefine")]
	private AstParserRuleReturnScope<CommonTree, IToken> tagTemplateDefine()
	{
		EnterRule_tagTemplateDefine();
		EnterRule("tagTemplateDefine", 40);
		TraceIn("tagTemplateDefine", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken typename = default(IToken);
		IToken string_literal186 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken char_literal190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> args = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> memberModifier185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tag191 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree typename_tree = default(CommonTree);
		CommonTree string_literal186_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree char_literal190_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_GREAT_THAN=new RewriteRuleITokenStream(adaptor,"token GREAT_THAN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleITokenStream stream_LESS_THAN=new RewriteRuleITokenStream(adaptor,"token LESS_THAN");
		RewriteRuleSubtreeStream stream_tag=new RewriteRuleSubtreeStream(adaptor,"rule tag");
		RewriteRuleSubtreeStream stream_memberModifier=new RewriteRuleSubtreeStream(adaptor,"rule memberModifier");
		RewriteRuleSubtreeStream stream_parameterDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
		try { DebugEnterRule(GrammarFileName, "tagTemplateDefine");
		DebugLocation(390, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:391:2: ( ( memberModifier )? 'template' '<' typename= IDENTIFIER '>' ( '(' args= parameterDeclarationList ')' )? tag -> ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:391:4: ( memberModifier )? 'template' '<' typename= IDENTIFIER '>' ( '(' args= parameterDeclarationList ')' )? tag
			{
			DebugLocation(391, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:391:4: ( memberModifier )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==INTERNAL||LA55_0==PRIVATE||(LA55_0>=PROTECTED && LA55_0<=PUBLIC)))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:391:4: memberModifier
				{
				DebugLocation(391, 4);
				PushFollow(Follow._memberModifier_in_tagTemplateDefine2687);
				memberModifier185=memberModifier();
				PopFollow();

				stream_memberModifier.Add(memberModifier185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(391, 20);
			string_literal186=(IToken)Match(input,141,Follow._141_in_tagTemplateDefine2690);  
			stream_141.Add(string_literal186);

			DebugLocation(391, 31);
			char_literal187=(IToken)Match(input,LESS_THAN,Follow._LESS_THAN_in_tagTemplateDefine2692);  
			stream_LESS_THAN.Add(char_literal187);

			DebugLocation(391, 43);
			typename=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tagTemplateDefine2696);  
			stream_IDENTIFIER.Add(typename);

			DebugLocation(391, 55);
			char_literal188=(IToken)Match(input,GREAT_THAN,Follow._GREAT_THAN_in_tagTemplateDefine2698);  
			stream_GREAT_THAN.Add(char_literal188);

			DebugLocation(391, 59);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:391:59: ( '(' args= parameterDeclarationList ')' )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==LPAREN))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:391:61: '(' args= parameterDeclarationList ')'
				{
				DebugLocation(391, 61);
				char_literal189=(IToken)Match(input,LPAREN,Follow._LPAREN_in_tagTemplateDefine2702);  
				stream_LPAREN.Add(char_literal189);

				DebugLocation(391, 69);
				PushFollow(Follow._parameterDeclarationList_in_tagTemplateDefine2706);
				args=parameterDeclarationList();
				PopFollow();

				stream_parameterDeclarationList.Add(args.Tree);
				DebugLocation(391, 95);
				char_literal190=(IToken)Match(input,RPAREN,Follow._RPAREN_in_tagTemplateDefine2708);  
				stream_RPAREN.Add(char_literal190);


				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(391, 102);
			PushFollow(Follow._tag_in_tagTemplateDefine2713);
			tag191=tag();
			PopFollow();

			stream_tag.Add(tag191.Tree);


			{
			// AST REWRITE
			// elements: args, typename, tag
			// token labels: typename
			// rule labels: retval, args
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_typename=new RewriteRuleITokenStream(adaptor,"token typename",typename);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"rule args",args!=null?args.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 392:3: -> ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag )
			{
				DebugLocation(392, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:392:6: ^( TEMPLATE_DEFINE $typename ^( PARAMETER_DEFINES ( $args)? ) tag )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(392, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TEMPLATE_DEFINE, "TEMPLATE_DEFINE"), root_1);

				DebugLocation(392, 25);
				adaptor.AddChild(root_1, stream_typename.NextNode());
				DebugLocation(392, 34);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:392:34: ^( PARAMETER_DEFINES ( $args)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(392, 36);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMETER_DEFINES, "PARAMETER_DEFINES"), root_2);

				DebugLocation(392, 55);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:392:55: ( $args)?
				if (stream_args.HasNext)
				{
					DebugLocation(392, 55);
					adaptor.AddChild(root_2, stream_args.NextTree());

				}
				stream_args.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(392, 62);
				adaptor.AddChild(root_1, stream_tag.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tagTemplateDefine", 40);
			LeaveRule("tagTemplateDefine", 40);
			LeaveRule_tagTemplateDefine();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "tagTemplateDefine"); }
		return retval;

	}
	// $ANTLR end "tagTemplateDefine"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();

	// $ANTLR start "variable"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:395:1: variable : IDENTIFIER ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<CommonTree, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 41);
		TraceIn("variable", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENTIFIER192 = default(IToken);

		CommonTree IDENTIFIER192_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(395, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:396:2: ( IDENTIFIER )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:396:4: IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(396, 4);
			IDENTIFIER192=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variable2745); 
			IDENTIFIER192_tree = (CommonTree)adaptor.Create(IDENTIFIER192);
			adaptor.AddChild(root_0, IDENTIFIER192_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 41);
			LeaveRule("variable", 41);
			LeaveRule_variable();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_array_literal();
	partial void LeaveRule_array_literal();

	// $ANTLR start "array_literal"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:399:1: array_literal : '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) ;
	[GrammarRule("array_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> array_literal()
	{
		EnterRule_array_literal();
		EnterRule("array_literal", 42);
		TraceIn("array_literal", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal193 = default(IToken);
		IToken char_literal195 = default(IToken);
		IToken char_literal196 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expressionList194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal193_tree = default(CommonTree);
		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RBRACE=new RewriteRuleITokenStream(adaptor,"token RBRACE");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_LBRACE=new RewriteRuleITokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
		try { DebugEnterRule(GrammarFileName, "array_literal");
		DebugLocation(399, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:400:2: ( '[' ( expressionList )? ( ',' )* ']' -> ^( ARRAY_LITERAL ( expressionList )? ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:400:4: '[' ( expressionList )? ( ',' )* ']'
			{
			DebugLocation(400, 4);
			char_literal193=(IToken)Match(input,LBRACE,Follow._LBRACE_in_array_literal2757);  
			stream_LBRACE.Add(char_literal193);

			DebugLocation(400, 8);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:400:8: ( expressionList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==BINARY_LITERATE||LA57_0==DECREMENT||(LA57_0>=HEX_LITERATE && LA57_0<=IDENTIFIER)||LA57_0==INCREMENT||(LA57_0>=LBRACE && LA57_0<=LCURLY)||LA57_0==LESS_THAN||(LA57_0>=LIT_FALSE && LA57_0<=LIT_TRUE)||LA57_0==LPAREN||LA57_0==MINUS||LA57_0==NAN||LA57_0==NOT||LA57_0==NUMBER_LITERATE||LA57_0==PLUS||LA57_0==STRING_LITERATE||LA57_0==THIS||LA57_0==UNDEFINED||LA57_0==134||LA57_0==138||LA57_0==144||LA57_0==146))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:400:8: expressionList
				{
				DebugLocation(400, 8);
				PushFollow(Follow._expressionList_in_array_literal2759);
				expressionList194=expressionList();
				PopFollow();

				stream_expressionList.Add(expressionList194.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(400, 24);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:400:24: ( ',' )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==COMMA))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:400:24: ','
					{
					DebugLocation(400, 24);
					char_literal195=(IToken)Match(input,COMMA,Follow._COMMA_in_array_literal2762);  
					stream_COMMA.Add(char_literal195);


					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(400, 29);
			char_literal196=(IToken)Match(input,RBRACE,Follow._RBRACE_in_array_literal2765);  
			stream_RBRACE.Add(char_literal196);



			{
			// AST REWRITE
			// elements: expressionList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 401:4: -> ^( ARRAY_LITERAL ( expressionList )? )
			{
				DebugLocation(401, 7);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:401:7: ^( ARRAY_LITERAL ( expressionList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(401, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

				DebugLocation(401, 23);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:401:23: ( expressionList )?
				if (stream_expressionList.HasNext)
				{
					DebugLocation(401, 23);
					adaptor.AddChild(root_1, stream_expressionList.NextTree());

				}
				stream_expressionList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_literal", 42);
			LeaveRule("array_literal", 42);
			LeaveRule_array_literal();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "array_literal"); }
		return retval;

	}
	// $ANTLR end "array_literal"

	partial void EnterRule_object_literal();
	partial void LeaveRule_object_literal();

	// $ANTLR start "object_literal"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:404:1: object_literal : '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) ;
	[GrammarRule("object_literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> object_literal()
	{
		EnterRule_object_literal();
		EnterRule("object_literal", 43);
		TraceIn("object_literal", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal197 = default(IToken);
		IToken char_literal199 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken char_literal202 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> keypair198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> keypair200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree char_literal199_tree = default(CommonTree);
		CommonTree char_literal201_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_keypair=new RewriteRuleSubtreeStream(adaptor,"rule keypair");
		try { DebugEnterRule(GrammarFileName, "object_literal");
		DebugLocation(404, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:2: ( '{' ( keypair )? ( ',' keypair )* ( ',' )* '}' -> ^( OBJECT_LITERAL ( keypair )* ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:4: '{' ( keypair )? ( ',' keypair )* ( ',' )* '}'
			{
			DebugLocation(405, 4);
			char_literal197=(IToken)Match(input,LCURLY,Follow._LCURLY_in_object_literal2788);  
			stream_LCURLY.Add(char_literal197);

			DebugLocation(405, 8);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:8: ( keypair )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==IDENTIFIER||LA59_0==STRING_LITERATE))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:8: keypair
				{
				DebugLocation(405, 8);
				PushFollow(Follow._keypair_in_object_literal2790);
				keypair198=keypair();
				PopFollow();

				stream_keypair.Add(keypair198.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(405, 17);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:17: ( ',' keypair )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==COMMA))
				{
					int LA60_1 = input.LA(2);

					if ((LA60_1==IDENTIFIER||LA60_1==STRING_LITERATE))
					{
						alt60 = 1;
					}


				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:18: ',' keypair
					{
					DebugLocation(405, 18);
					char_literal199=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2794);  
					stream_COMMA.Add(char_literal199);

					DebugLocation(405, 22);
					PushFollow(Follow._keypair_in_object_literal2796);
					keypair200=keypair();
					PopFollow();

					stream_keypair.Add(keypair200.Tree);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(405, 32);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:32: ( ',' )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==COMMA))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:405:32: ','
					{
					DebugLocation(405, 32);
					char_literal201=(IToken)Match(input,COMMA,Follow._COMMA_in_object_literal2800);  
					stream_COMMA.Add(char_literal201);


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(405, 37);
			char_literal202=(IToken)Match(input,RCURLY,Follow._RCURLY_in_object_literal2803);  
			stream_RCURLY.Add(char_literal202);



			{
			// AST REWRITE
			// elements: keypair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 406:4: -> ^( OBJECT_LITERAL ( keypair )* )
			{
				DebugLocation(406, 7);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:406:7: ^( OBJECT_LITERAL ( keypair )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(406, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);

				DebugLocation(406, 24);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:406:24: ( keypair )*
				while ( stream_keypair.HasNext )
				{
					DebugLocation(406, 24);
					adaptor.AddChild(root_1, stream_keypair.NextTree());

				}
				stream_keypair.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_literal", 43);
			LeaveRule("object_literal", 43);
			LeaveRule_object_literal();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "object_literal"); }
		return retval;

	}
	// $ANTLR end "object_literal"

	partial void EnterRule_keypair();
	partial void LeaveRule_keypair();

	// $ANTLR start "keypair"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:409:1: keypair : ( variable | STRING_LITERATE ) ':' ! expression ;
	[GrammarRule("keypair")]
	private AstParserRuleReturnScope<CommonTree, IToken> keypair()
	{
		EnterRule_keypair();
		EnterRule("keypair", 44);
		TraceIn("keypair", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken STRING_LITERATE204 = default(IToken);
		IToken char_literal205 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> variable203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree STRING_LITERATE204_tree = default(CommonTree);
		CommonTree char_literal205_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "keypair");
		DebugLocation(409, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:410:2: ( ( variable | STRING_LITERATE ) ':' ! expression )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:410:4: ( variable | STRING_LITERATE ) ':' ! expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(410, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:410:4: ( variable | STRING_LITERATE )
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==IDENTIFIER))
			{
				alt62 = 1;
			}
			else if ((LA62_0==STRING_LITERATE))
			{
				alt62 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:410:5: variable
				{
				DebugLocation(410, 5);
				PushFollow(Follow._variable_in_keypair2828);
				variable203=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable203.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:410:14: STRING_LITERATE
				{
				DebugLocation(410, 14);
				STRING_LITERATE204=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_keypair2830); 
				STRING_LITERATE204_tree = (CommonTree)adaptor.Create(STRING_LITERATE204);
				adaptor.AddChild(root_0, STRING_LITERATE204_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(410, 34);
			char_literal205=(IToken)Match(input,COLON,Follow._COLON_in_keypair2833); 
			DebugLocation(410, 36);
			PushFollow(Follow._expression_in_keypair2836);
			expression206=expression();
			PopFollow();

			adaptor.AddChild(root_0, expression206.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keypair", 44);
			LeaveRule("keypair", 44);
			LeaveRule_keypair();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "keypair"); }
		return retval;

	}
	// $ANTLR end "keypair"

	partial void EnterRule_jsonParse();
	partial void LeaveRule_jsonParse();

	// $ANTLR start "jsonParse"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:414:1: public jsonParse[ScriptContext ctx, System.Action<string, object> handler] : '{' ( jsonParse_keypair[ctx, handler] )? ( ',' jsonParse_keypair[ctx, handler] )* ( ',' )* '}' ;
	[GrammarRule("jsonParse")]
	public AstParserRuleReturnScope<CommonTree, IToken> jsonParse(ScriptContext ctx, System.Action<string, object> handler)
	{
		EnterRule_jsonParse();
		EnterRule("jsonParse", 45);
		TraceIn("jsonParse", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal207 = default(IToken);
		IToken char_literal209 = default(IToken);
		IToken char_literal211 = default(IToken);
		IToken char_literal212 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> jsonParse_keypair208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> jsonParse_keypair210 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal207_tree = default(CommonTree);
		CommonTree char_literal209_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree char_literal212_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "jsonParse");
		DebugLocation(414, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:2: ( '{' ( jsonParse_keypair[ctx, handler] )? ( ',' jsonParse_keypair[ctx, handler] )* ( ',' )* '}' )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:4: '{' ( jsonParse_keypair[ctx, handler] )? ( ',' jsonParse_keypair[ctx, handler] )* ( ',' )* '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(415, 4);
			char_literal207=(IToken)Match(input,LCURLY,Follow._LCURLY_in_jsonParse2852); 
			char_literal207_tree = (CommonTree)adaptor.Create(char_literal207);
			adaptor.AddChild(root_0, char_literal207_tree);
			DebugLocation(415, 8);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:8: ( jsonParse_keypair[ctx, handler] )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==IDENTIFIER||LA63_0==STRING_LITERATE))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:8: jsonParse_keypair[ctx, handler]
				{
				DebugLocation(415, 8);
				PushFollow(Follow._jsonParse_keypair_in_jsonParse2854);
				jsonParse_keypair208=jsonParse_keypair(ctx, handler);
				PopFollow();

				adaptor.AddChild(root_0, jsonParse_keypair208.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(415, 41);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:41: ( ',' jsonParse_keypair[ctx, handler] )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==COMMA))
				{
					int LA64_1 = input.LA(2);

					if ((LA64_1==IDENTIFIER||LA64_1==STRING_LITERATE))
					{
						alt64 = 1;
					}


				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:42: ',' jsonParse_keypair[ctx, handler]
					{
					DebugLocation(415, 42);
					char_literal209=(IToken)Match(input,COMMA,Follow._COMMA_in_jsonParse2859); 
					char_literal209_tree = (CommonTree)adaptor.Create(char_literal209);
					adaptor.AddChild(root_0, char_literal209_tree);
					DebugLocation(415, 46);
					PushFollow(Follow._jsonParse_keypair_in_jsonParse2861);
					jsonParse_keypair210=jsonParse_keypair(ctx, handler);
					PopFollow();

					adaptor.AddChild(root_0, jsonParse_keypair210.Tree);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }

			DebugLocation(415, 80);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:80: ( ',' )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==COMMA))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:415:80: ','
					{
					DebugLocation(415, 80);
					char_literal211=(IToken)Match(input,COMMA,Follow._COMMA_in_jsonParse2866); 
					char_literal211_tree = (CommonTree)adaptor.Create(char_literal211);
					adaptor.AddChild(root_0, char_literal211_tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(415, 85);
			char_literal212=(IToken)Match(input,RCURLY,Follow._RCURLY_in_jsonParse2869); 
			char_literal212_tree = (CommonTree)adaptor.Create(char_literal212);
			adaptor.AddChild(root_0, char_literal212_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jsonParse", 45);
			LeaveRule("jsonParse", 45);
			LeaveRule_jsonParse();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "jsonParse"); }
		return retval;

	}
	// $ANTLR end "jsonParse"

	partial void EnterRule_jsonParse_keypair();
	partial void LeaveRule_jsonParse_keypair();

	// $ANTLR start "jsonParse_keypair"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:418:1: jsonParse_keypair[ScriptContext ctx, System.Action<string, object> handler] : (var= variable |id= STRING_LITERATE ) ':' !exp= expression ;
	[GrammarRule("jsonParse_keypair")]
	private AstParserRuleReturnScope<CommonTree, IToken> jsonParse_keypair(ScriptContext ctx, System.Action<string, object> handler)
	{
		EnterRule_jsonParse_keypair();
		EnterRule("jsonParse_keypair", 46);
		TraceIn("jsonParse_keypair", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken id = default(IToken);
		IToken char_literal213 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> var = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> exp = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree id_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "jsonParse_keypair");
		DebugLocation(418, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:419:2: ( (var= variable |id= STRING_LITERATE ) ':' !exp= expression )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:419:4: (var= variable |id= STRING_LITERATE ) ':' !exp= expression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(419, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:419:4: (var= variable |id= STRING_LITERATE )
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==IDENTIFIER))
			{
				alt66 = 1;
			}
			else if ((LA66_0==STRING_LITERATE))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:419:5: var= variable
				{
				DebugLocation(419, 8);
				PushFollow(Follow._variable_in_jsonParse_keypair2884);
				var=variable();
				PopFollow();

				adaptor.AddChild(root_0, var.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:419:18: id= STRING_LITERATE
				{
				DebugLocation(419, 20);
				id=(IToken)Match(input,STRING_LITERATE,Follow._STRING_LITERATE_in_jsonParse_keypair2888); 
				id_tree = (CommonTree)adaptor.Create(id);
				adaptor.AddChild(root_0, id_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(419, 41);
			char_literal213=(IToken)Match(input,COLON,Follow._COLON_in_jsonParse_keypair2891); 
			DebugLocation(419, 46);
			PushFollow(Follow._expression_in_jsonParse_keypair2896);
			exp=expression();
			PopFollow();

			adaptor.AddChild(root_0, exp.Tree);
			DebugLocation(419, 58);

					handler(var == null ? id.Text : var.Tree.Text, ScriptRunningMachine.ParseNode(exp.Tree, ctx));
				

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jsonParse_keypair", 46);
			LeaveRule("jsonParse_keypair", 46);
			LeaveRule_jsonParse_keypair();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "jsonParse_keypair"); }
		return retval;

	}
	// $ANTLR end "jsonParse_keypair"

	partial void EnterRule_ifelse();
	partial void LeaveRule_ifelse();

	// $ANTLR start "ifelse"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:426:1: ifelse : 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) ;
	[GrammarRule("ifelse")]
	private AstParserRuleReturnScope<CommonTree, IToken> ifelse()
	{
		EnterRule_ifelse();
		EnterRule("ifelse", 47);
		TraceIn("ifelse", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal214 = default(IToken);
		IToken LPAREN215 = default(IToken);
		IToken RPAREN217 = default(IToken);
		IToken string_literal218 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> es1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> es2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression216 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree LPAREN215_tree = default(CommonTree);
		CommonTree RPAREN217_tree = default(CommonTree);
		CommonTree string_literal218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "ifelse");
		DebugLocation(426, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:427:2: ( 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )? -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:427:4: 'if' LPAREN conditionalOrExpression RPAREN es1= embeddedStatement ( 'else' es2= embeddedStatement )?
			{
			DebugLocation(427, 4);
			string_literal214=(IToken)Match(input,135,Follow._135_in_ifelse2913);  
			stream_135.Add(string_literal214);

			DebugLocation(427, 9);
			LPAREN215=(IToken)Match(input,LPAREN,Follow._LPAREN_in_ifelse2915);  
			stream_LPAREN.Add(LPAREN215);

			DebugLocation(427, 16);
			PushFollow(Follow._conditionalOrExpression_in_ifelse2917);
			conditionalOrExpression216=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression216.Tree);
			DebugLocation(427, 40);
			RPAREN217=(IToken)Match(input,RPAREN,Follow._RPAREN_in_ifelse2919);  
			stream_RPAREN.Add(RPAREN217);

			DebugLocation(427, 50);
			PushFollow(Follow._embeddedStatement_in_ifelse2923);
			es1=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(es1.Tree);
			DebugLocation(427, 69);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:427:69: ( 'else' es2= embeddedStatement )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==ELSE))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:427:70: 'else' es2= embeddedStatement
				{
				DebugLocation(427, 70);
				string_literal218=(IToken)Match(input,ELSE,Follow._ELSE_in_ifelse2926);  
				stream_ELSE.Add(string_literal218);

				DebugLocation(427, 80);
				PushFollow(Follow._embeddedStatement_in_ifelse2930);
				es2=embeddedStatement();
				PopFollow();

				stream_embeddedStatement.Add(es2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: es2, conditionalOrExpression, es1
			// token labels: 
			// rule labels: retval, es2, es1
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_es2=new RewriteRuleSubtreeStream(adaptor,"rule es2",es2!=null?es2.Tree:null);
			RewriteRuleSubtreeStream stream_es1=new RewriteRuleSubtreeStream(adaptor,"rule es1",es1!=null?es1.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 428:3: -> ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
			{
				DebugLocation(428, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:428:6: ^( IF_STATEMENT conditionalOrExpression $es1 ( $es2)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(428, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(IF_STATEMENT, "IF_STATEMENT"), root_1);

				DebugLocation(428, 21);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(428, 46);
				adaptor.AddChild(root_1, stream_es1.NextTree());
				DebugLocation(428, 51);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:428:51: ( $es2)?
				if (stream_es2.HasNext)
				{
					DebugLocation(428, 51);
					adaptor.AddChild(root_1, stream_es2.NextTree());

				}
				stream_es2.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifelse", 47);
			LeaveRule("ifelse", 47);
			LeaveRule_ifelse();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "ifelse"); }
		return retval;

	}
	// $ANTLR end "ifelse"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:431:1: forStatement : 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("forStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 48);
		TraceIn("forStatement", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal219 = default(IToken);
		IToken char_literal220 = default(IToken);
		IToken SEMI222 = default(IToken);
		IToken SEMI224 = default(IToken);
		IToken char_literal226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> forInit221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal219_tree = default(CommonTree);
		CommonTree char_literal220_tree = default(CommonTree);
		CommonTree SEMI222_tree = default(CommonTree);
		CommonTree SEMI224_tree = default(CommonTree);
		CommonTree char_literal226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_statementExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule statementExpressionList");
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(431, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:2: ( 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:4: 'for' '(' ( forInit )? SEMI ( conditionalOrExpression )? SEMI ( statementExpressionList )? ')' embeddedStatement
			{
			DebugLocation(432, 4);
			string_literal219=(IToken)Match(input,133,Follow._133_in_forStatement2964);  
			stream_133.Add(string_literal219);

			DebugLocation(432, 10);
			char_literal220=(IToken)Match(input,LPAREN,Follow._LPAREN_in_forStatement2966);  
			stream_LPAREN.Add(char_literal220);

			DebugLocation(432, 14);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:14: ( forInit )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==BINARY_LITERATE||LA68_0==DECREMENT||(LA68_0>=HEX_LITERATE && LA68_0<=IDENTIFIER)||LA68_0==INCREMENT||(LA68_0>=LBRACE && LA68_0<=LCURLY)||(LA68_0>=LIT_FALSE && LA68_0<=LIT_TRUE)||LA68_0==LPAREN||LA68_0==NAN||LA68_0==NUMBER_LITERATE||LA68_0==STRING_LITERATE||LA68_0==THIS||LA68_0==TYPE||LA68_0==UNDEFINED||LA68_0==131||LA68_0==134||LA68_0==138))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:14: forInit
				{
				DebugLocation(432, 14);
				PushFollow(Follow._forInit_in_forStatement2968);
				forInit221=forInit();
				PopFollow();

				stream_forInit.Add(forInit221.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(432, 23);
			SEMI222=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2971);  
			stream_SEMI.Add(SEMI222);

			DebugLocation(432, 28);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:28: ( conditionalOrExpression )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==BINARY_LITERATE||LA69_0==DECREMENT||(LA69_0>=HEX_LITERATE && LA69_0<=IDENTIFIER)||LA69_0==INCREMENT||(LA69_0>=LBRACE && LA69_0<=LCURLY)||(LA69_0>=LIT_FALSE && LA69_0<=LIT_TRUE)||LA69_0==LPAREN||LA69_0==MINUS||LA69_0==NAN||LA69_0==NOT||LA69_0==NUMBER_LITERATE||LA69_0==PLUS||LA69_0==STRING_LITERATE||LA69_0==THIS||LA69_0==UNDEFINED||LA69_0==134||LA69_0==138||LA69_0==144||LA69_0==146))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:28: conditionalOrExpression
				{
				DebugLocation(432, 28);
				PushFollow(Follow._conditionalOrExpression_in_forStatement2973);
				conditionalOrExpression223=conditionalOrExpression();
				PopFollow();

				stream_conditionalOrExpression.Add(conditionalOrExpression223.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(432, 53);
			SEMI224=(IToken)Match(input,SEMI,Follow._SEMI_in_forStatement2976);  
			stream_SEMI.Add(SEMI224);

			DebugLocation(432, 58);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:58: ( statementExpressionList )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==BINARY_LITERATE||LA70_0==DECREMENT||(LA70_0>=HEX_LITERATE && LA70_0<=IDENTIFIER)||LA70_0==INCREMENT||(LA70_0>=LBRACE && LA70_0<=LCURLY)||(LA70_0>=LIT_FALSE && LA70_0<=LIT_TRUE)||LA70_0==LPAREN||LA70_0==NAN||LA70_0==NUMBER_LITERATE||LA70_0==STRING_LITERATE||LA70_0==THIS||LA70_0==UNDEFINED||LA70_0==131||LA70_0==134||LA70_0==138))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:432:58: statementExpressionList
				{
				DebugLocation(432, 58);
				PushFollow(Follow._statementExpressionList_in_forStatement2978);
				statementExpressionList225=statementExpressionList();
				PopFollow();

				stream_statementExpressionList.Add(statementExpressionList225.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(432, 83);
			char_literal226=(IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement2981);  
			stream_RPAREN.Add(char_literal226);

			DebugLocation(432, 87);
			PushFollow(Follow._embeddedStatement_in_forStatement2983);
			embeddedStatement227=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement227.Tree);


			{
			// AST REWRITE
			// elements: statementExpressionList, conditionalOrExpression, embeddedStatement, forInit
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 433:3: -> ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(433, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:433:6: ^( FOR_STATEMENT ^( FOR_INIT ( forInit )? ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ( statementExpressionList )? ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(433, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(434, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:434:5: ^( FOR_INIT ( forInit )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(434, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				DebugLocation(434, 16);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:434:16: ( forInit )?
				if (stream_forInit.HasNext)
				{
					DebugLocation(434, 16);
					adaptor.AddChild(root_2, stream_forInit.NextTree());

				}
				stream_forInit.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(435, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:435:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(435, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(435, 21);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:435:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(435, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(436, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:436:5: ^( FOR_ITERATOR ( statementExpressionList )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(436, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				DebugLocation(436, 20);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:436:20: ( statementExpressionList )?
				if (stream_statementExpressionList.HasNext)
				{
					DebugLocation(436, 20);
					adaptor.AddChild(root_2, stream_statementExpressionList.NextTree());

				}
				stream_statementExpressionList.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(437, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:437:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(437, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(437, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 48);
			LeaveRule("forStatement", 48);
			LeaveRule_forStatement();
		}
		DebugLocation(439, 1);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();

	// $ANTLR start "forInit"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:441:1: forInit : ( localVariableDeclaration | statementExpressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 49);
		TraceIn("forInit", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> localVariableDeclaration228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statementExpressionList229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(441, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:442:2: ( localVariableDeclaration | statementExpressionList )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==TYPE))
			{
				alt71 = 1;
			}
			else if ((LA71_0==BINARY_LITERATE||LA71_0==DECREMENT||(LA71_0>=HEX_LITERATE && LA71_0<=IDENTIFIER)||LA71_0==INCREMENT||(LA71_0>=LBRACE && LA71_0<=LCURLY)||(LA71_0>=LIT_FALSE && LA71_0<=LIT_TRUE)||LA71_0==LPAREN||LA71_0==NAN||LA71_0==NUMBER_LITERATE||LA71_0==STRING_LITERATE||LA71_0==THIS||LA71_0==UNDEFINED||LA71_0==131||LA71_0==134||LA71_0==138))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:442:4: localVariableDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(442, 4);
				PushFollow(Follow._localVariableDeclaration_in_forInit3055);
				localVariableDeclaration228=localVariableDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, localVariableDeclaration228.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:443:4: statementExpressionList
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(443, 4);
				PushFollow(Follow._statementExpressionList_in_forInit3061);
				statementExpressionList229=statementExpressionList();
				PopFollow();

				adaptor.AddChild(root_0, statementExpressionList229.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 49);
			LeaveRule("forInit", 49);
			LeaveRule_forInit();
		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_foreachStatement();
	partial void LeaveRule_foreachStatement();

	// $ANTLR start "foreachStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:446:1: foreachStatement : 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? ) ;
	[GrammarRule("foreachStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> foreachStatement()
	{
		EnterRule_foreachStatement();
		EnterRule("foreachStatement", 50);
		TraceIn("foreachStatement", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken local = default(IToken);
		IToken string_literal230 = default(IToken);
		IToken char_literal231 = default(IToken);
		IToken IDENTIFIER232 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken char_literal235 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree local_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree char_literal231_tree = default(CommonTree);
		CommonTree IDENTIFIER232_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_TYPE=new RewriteRuleITokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		try { DebugEnterRule(GrammarFileName, "foreachStatement");
		DebugLocation(446, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:447:2: ( 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:447:4: 'for' '(' (local= 'var' )? IDENTIFIER 'in' expression ')' embeddedStatement
			{
			DebugLocation(447, 4);
			string_literal230=(IToken)Match(input,133,Follow._133_in_foreachStatement3073);  
			stream_133.Add(string_literal230);

			DebugLocation(447, 10);
			char_literal231=(IToken)Match(input,LPAREN,Follow._LPAREN_in_foreachStatement3075);  
			stream_LPAREN.Add(char_literal231);

			DebugLocation(447, 19);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:447:19: (local= 'var' )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==TYPE))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:447:19: local= 'var'
				{
				DebugLocation(447, 19);
				local=(IToken)Match(input,TYPE,Follow._TYPE_in_foreachStatement3079);  
				stream_TYPE.Add(local);


				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(447, 27);
			IDENTIFIER232=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_foreachStatement3082);  
			stream_IDENTIFIER.Add(IDENTIFIER232);

			DebugLocation(447, 38);
			string_literal233=(IToken)Match(input,137,Follow._137_in_foreachStatement3084);  
			stream_137.Add(string_literal233);

			DebugLocation(447, 43);
			PushFollow(Follow._expression_in_foreachStatement3086);
			expression234=expression();
			PopFollow();

			stream_expression.Add(expression234.Tree);
			DebugLocation(447, 54);
			char_literal235=(IToken)Match(input,RPAREN,Follow._RPAREN_in_foreachStatement3088);  
			stream_RPAREN.Add(char_literal235);

			DebugLocation(447, 58);
			PushFollow(Follow._embeddedStatement_in_foreachStatement3090);
			embeddedStatement236=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement236.Tree);


			{
			// AST REWRITE
			// elements: local, expression, IDENTIFIER, embeddedStatement
			// token labels: local
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_local=new RewriteRuleITokenStream(adaptor,"token local",local);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 448:3: -> ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? )
			{
				DebugLocation(448, 6);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:448:6: ^( FOREACH_STATEMENT IDENTIFIER expression embeddedStatement ( $local)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(448, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOREACH_STATEMENT, "FOREACH_STATEMENT"), root_1);

				DebugLocation(448, 26);
				adaptor.AddChild(root_1, stream_IDENTIFIER.NextNode());
				DebugLocation(448, 37);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(448, 48);
				adaptor.AddChild(root_1, stream_embeddedStatement.NextTree());
				DebugLocation(448, 67);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:448:67: ( $local)?
				if (stream_local.HasNext)
				{
					DebugLocation(448, 67);
					adaptor.AddChild(root_1, stream_local.NextNode());

				}
				stream_local.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreachStatement", 50);
			LeaveRule("foreachStatement", 50);
			LeaveRule_foreachStatement();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "foreachStatement"); }
		return retval;

	}
	// $ANTLR end "foreachStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:451:1: whileStatement : 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 51);
		TraceIn("whileStatement", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal237 = default(IToken);
		IToken LPAREN238 = default(IToken);
		IToken RPAREN240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> embeddedStatement241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal237_tree = default(CommonTree);
		CommonTree LPAREN238_tree = default(CommonTree);
		CommonTree RPAREN240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_embeddedStatement=new RewriteRuleSubtreeStream(adaptor,"rule embeddedStatement");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(451, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:452:2: ( 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:452:4: 'while' LPAREN ( conditionalOrExpression ) RPAREN embeddedStatement
			{
			DebugLocation(452, 4);
			string_literal237=(IToken)Match(input,145,Follow._145_in_whileStatement3119);  
			stream_145.Add(string_literal237);

			DebugLocation(452, 12);
			LPAREN238=(IToken)Match(input,LPAREN,Follow._LPAREN_in_whileStatement3121);  
			stream_LPAREN.Add(LPAREN238);

			DebugLocation(452, 19);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:452:19: ( conditionalOrExpression )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:452:20: conditionalOrExpression
			{
			DebugLocation(452, 20);
			PushFollow(Follow._conditionalOrExpression_in_whileStatement3124);
			conditionalOrExpression239=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression239.Tree);

			}

			DebugLocation(452, 45);
			RPAREN240=(IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement3127);  
			stream_RPAREN.Add(RPAREN240);

			DebugLocation(452, 52);
			PushFollow(Follow._embeddedStatement_in_whileStatement3129);
			embeddedStatement241=embeddedStatement();
			PopFollow();

			stream_embeddedStatement.Add(embeddedStatement241.Tree);


			{
			// AST REWRITE
			// elements: embeddedStatement, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 453:3: -> ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
			{
				DebugLocation(453, 7);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:453:7: ^( FOR_STATEMENT ^( FOR_INIT ) ^( FOR_CONDITION ( conditionalOrExpression )? ) ^( FOR_ITERATOR ) ^( FOR_BODY embeddedStatement ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(453, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_STATEMENT, "FOR_STATEMENT"), root_1);

				DebugLocation(454, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:454:5: ^( FOR_INIT )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(454, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_INIT, "FOR_INIT"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(455, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:455:5: ^( FOR_CONDITION ( conditionalOrExpression )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(455, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_2);

				DebugLocation(455, 21);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:455:21: ( conditionalOrExpression )?
				if (stream_conditionalOrExpression.HasNext)
				{
					DebugLocation(455, 21);
					adaptor.AddChild(root_2, stream_conditionalOrExpression.NextTree());

				}
				stream_conditionalOrExpression.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(456, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:456:5: ^( FOR_ITERATOR )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(456, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_2);

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(457, 5);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:457:5: ^( FOR_BODY embeddedStatement )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(457, 7);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FOR_BODY, "FOR_BODY"), root_2);

				DebugLocation(457, 16);
				adaptor.AddChild(root_2, stream_embeddedStatement.NextTree());

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 51);
			LeaveRule("whileStatement", 51);
			LeaveRule_whileStatement();
		}
		DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:461:1: switchStatement : 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) ;
	[GrammarRule("switchStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 52);
		TraceIn("switchStatement", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal242 = default(IToken);
		IToken char_literal243 = default(IToken);
		IToken char_literal245 = default(IToken);
		IToken char_literal246 = default(IToken);
		IToken char_literal248 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> conditionalOrExpression244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal242_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		CommonTree char_literal245_tree = default(CommonTree);
		CommonTree char_literal246_tree = default(CommonTree);
		CommonTree char_literal248_tree = default(CommonTree);
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleSubtreeStream stream_switchCaseStatementList=new RewriteRuleSubtreeStream(adaptor,"rule switchCaseStatementList");
		RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(461, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:462:2: ( 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}' -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:462:4: 'switch' '(' conditionalOrExpression ')' '{' ( switchCaseStatementList )? '}'
			{
			DebugLocation(462, 4);
			string_literal242=(IToken)Match(input,140,Follow._140_in_switchStatement3195);  
			stream_140.Add(string_literal242);

			DebugLocation(462, 13);
			char_literal243=(IToken)Match(input,LPAREN,Follow._LPAREN_in_switchStatement3197);  
			stream_LPAREN.Add(char_literal243);

			DebugLocation(462, 17);
			PushFollow(Follow._conditionalOrExpression_in_switchStatement3199);
			conditionalOrExpression244=conditionalOrExpression();
			PopFollow();

			stream_conditionalOrExpression.Add(conditionalOrExpression244.Tree);
			DebugLocation(462, 41);
			char_literal245=(IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement3201);  
			stream_RPAREN.Add(char_literal245);

			DebugLocation(463, 4);
			char_literal246=(IToken)Match(input,LCURLY,Follow._LCURLY_in_switchStatement3206);  
			stream_LCURLY.Add(char_literal246);

			DebugLocation(463, 8);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:463:8: ( switchCaseStatementList )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==BINARY_LITERATE||LA73_0==DECREMENT||(LA73_0>=HEX_LITERATE && LA73_0<=IDENTIFIER)||LA73_0==INCREMENT||LA73_0==INTERNAL||(LA73_0>=LBRACE && LA73_0<=LCURLY)||(LA73_0>=LIT_FALSE && LA73_0<=LIT_TRUE)||LA73_0==LPAREN||LA73_0==NAN||LA73_0==NUMBER_LITERATE||LA73_0==PRIVATE||(LA73_0>=PROTECTED && LA73_0<=PUBLIC)||LA73_0==STRING_LITERATE||LA73_0==THIS||LA73_0==TYPE||LA73_0==UNDEFINED||(LA73_0>=126 && LA73_0<=127)||(LA73_0>=129 && LA73_0<=131)||(LA73_0>=133 && LA73_0<=136)||(LA73_0>=138 && LA73_0<=143)||LA73_0==145))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:463:8: switchCaseStatementList
				{
				DebugLocation(463, 8);
				PushFollow(Follow._switchCaseStatementList_in_switchStatement3208);
				switchCaseStatementList247=switchCaseStatementList();
				PopFollow();

				stream_switchCaseStatementList.Add(switchCaseStatementList247.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(463, 33);
			char_literal248=(IToken)Match(input,RCURLY,Follow._RCURLY_in_switchStatement3211);  
			stream_RCURLY.Add(char_literal248);



			{
			// AST REWRITE
			// elements: switchCaseStatementList, conditionalOrExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 464:4: -> ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
			{
				DebugLocation(464, 7);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:464:7: ^( SWITCH conditionalOrExpression ( switchCaseStatementList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(464, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH, "SWITCH"), root_1);

				DebugLocation(464, 16);
				adaptor.AddChild(root_1, stream_conditionalOrExpression.NextTree());
				DebugLocation(464, 40);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:464:40: ( switchCaseStatementList )?
				if (stream_switchCaseStatementList.HasNext)
				{
					DebugLocation(464, 40);
					adaptor.AddChild(root_1, stream_switchCaseStatementList.NextTree());

				}
				stream_switchCaseStatementList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 52);
			LeaveRule("switchStatement", 52);
			LeaveRule_switchStatement();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_switchCaseStatementList();
	partial void LeaveRule_switchCaseStatementList();

	// $ANTLR start "switchCaseStatementList"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:467:1: switchCaseStatementList : ( switchCaseCondition )+ ;
	[GrammarRule("switchCaseStatementList")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseStatementList()
	{
		EnterRule_switchCaseStatementList();
		EnterRule("switchCaseStatementList", 53);
		TraceIn("switchCaseStatementList", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "switchCaseStatementList");
		DebugLocation(467, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:468:2: ( ( switchCaseCondition )+ )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:468:4: ( switchCaseCondition )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(468, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:468:4: ( switchCaseCondition )+
			int cnt74=0;
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==BINARY_LITERATE||LA74_0==DECREMENT||(LA74_0>=HEX_LITERATE && LA74_0<=IDENTIFIER)||LA74_0==INCREMENT||LA74_0==INTERNAL||(LA74_0>=LBRACE && LA74_0<=LCURLY)||(LA74_0>=LIT_FALSE && LA74_0<=LIT_TRUE)||LA74_0==LPAREN||LA74_0==NAN||LA74_0==NUMBER_LITERATE||LA74_0==PRIVATE||(LA74_0>=PROTECTED && LA74_0<=PUBLIC)||LA74_0==STRING_LITERATE||LA74_0==THIS||LA74_0==TYPE||LA74_0==UNDEFINED||(LA74_0>=126 && LA74_0<=127)||(LA74_0>=129 && LA74_0<=131)||(LA74_0>=133 && LA74_0<=136)||(LA74_0>=138 && LA74_0<=143)||LA74_0==145))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:468:5: switchCaseCondition
					{
					DebugLocation(468, 5);
					PushFollow(Follow._switchCaseCondition_in_switchCaseStatementList3237);
					switchCaseCondition249=switchCaseCondition();
					PopFollow();

					adaptor.AddChild(root_0, switchCaseCondition249.Tree);

					}
					break;

				default:
					if (cnt74 >= 1)
						goto loop74;

					EarlyExitException eee74 = new EarlyExitException( 74, input );
					DebugRecognitionException(eee74);
					throw eee74;
				}
				cnt74++;
			}
			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseStatementList", 53);
			LeaveRule("switchCaseStatementList", 53);
			LeaveRule_switchCaseStatementList();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseStatementList"); }
		return retval;

	}
	// $ANTLR end "switchCaseStatementList"

	partial void EnterRule_switchCaseCondition();
	partial void LeaveRule_switchCaseCondition();

	// $ANTLR start "switchCaseCondition"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:471:1: switchCaseCondition : ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) );
	[GrammarRule("switchCaseCondition")]
	private AstParserRuleReturnScope<CommonTree, IToken> switchCaseCondition()
	{
		EnterRule_switchCaseCondition();
		EnterRule("switchCaseCondition", 54);
		TraceIn("switchCaseCondition", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal250 = default(IToken);
		IToken char_literal252 = default(IToken);
		IToken string_literal254 = default(IToken);
		IToken char_literal255 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> statement253 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree char_literal252_tree = default(CommonTree);
		CommonTree string_literal254_tree = default(CommonTree);
		CommonTree char_literal255_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COLON=new RewriteRuleITokenStream(adaptor,"token COLON");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "switchCaseCondition");
		DebugLocation(471, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:472:2: ( 'case' expression ':' -> ^( SWITCH_CASE expression ) | statement -> statement | 'default' ':' -> ^( SWITCH_CASE_ELSE ) )
			int alt75=3;
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case 127:
				{
				alt75 = 1;
				}
				break;
			case BINARY_LITERATE:
			case DECREMENT:
			case HEX_LITERATE:
			case IDENTIFIER:
			case INCREMENT:
			case INTERNAL:
			case LBRACE:
			case LCURLY:
			case LIT_FALSE:
			case LIT_NULL:
			case LIT_TRUE:
			case LPAREN:
			case NAN:
			case NUMBER_LITERATE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STRING_LITERATE:
			case THIS:
			case TYPE:
			case UNDEFINED:
			case 126:
			case 129:
			case 131:
			case 133:
			case 134:
			case 135:
			case 136:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:
			case 143:
			case 145:
				{
				alt75 = 2;
				}
				break;
			case 130:
				{
				alt75 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:473:4: 'case' expression ':'
				{
				DebugLocation(473, 4);
				string_literal250=(IToken)Match(input,127,Follow._127_in_switchCaseCondition3255);  
				stream_127.Add(string_literal250);

				DebugLocation(473, 11);
				PushFollow(Follow._expression_in_switchCaseCondition3257);
				expression251=expression();
				PopFollow();

				stream_expression.Add(expression251.Tree);
				DebugLocation(473, 22);
				char_literal252=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition3259);  
				stream_COLON.Add(char_literal252);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 473:28: -> ^( SWITCH_CASE expression )
				{
					DebugLocation(473, 31);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:473:31: ^( SWITCH_CASE expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(473, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE, "SWITCH_CASE"), root_1);

					DebugLocation(473, 45);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:474:4: statement
				{
				DebugLocation(474, 4);
				PushFollow(Follow._statement_in_switchCaseCondition3274);
				statement253=statement();
				PopFollow();

				stream_statement.Add(statement253.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 474:19: -> statement
				{
					DebugLocation(474, 22);
					adaptor.AddChild(root_0, stream_statement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:475:4: 'default' ':'
				{
				DebugLocation(475, 4);
				string_literal254=(IToken)Match(input,130,Follow._130_in_switchCaseCondition3288);  
				stream_130.Add(string_literal254);

				DebugLocation(475, 14);
				char_literal255=(IToken)Match(input,COLON,Follow._COLON_in_switchCaseCondition3290);  
				stream_COLON.Add(char_literal255);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 475:22: -> ^( SWITCH_CASE_ELSE )
				{
					DebugLocation(475, 25);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:475:25: ^( SWITCH_CASE_ELSE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(475, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SWITCH_CASE_ELSE, "SWITCH_CASE_ELSE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchCaseCondition", 54);
			LeaveRule("switchCaseCondition", 54);
			LeaveRule_switchCaseCondition();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "switchCaseCondition"); }
		return retval;

	}
	// $ANTLR end "switchCaseCondition"

	partial void EnterRule_tryCatchStatement();
	partial void LeaveRule_tryCatchStatement();

	// $ANTLR start "tryCatchStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:478:1: tryCatchStatement : ( 'try' t= block ( ( 'catch' ( '(' err= IDENTIFIER ')' )? b= block ) | ( 'finally' f= block ) ) -> ^( TRY_CATCH $t ^( TRY_CATCH_CASE ( $b)? ( $err)? ) ^( TRY_CATCH_FINAL ( $f)? ) ) | 'throw' expression SEMI -> ^( TRY_CATCH_TRHOW expression ) );
	[GrammarRule("tryCatchStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> tryCatchStatement()
	{
		EnterRule_tryCatchStatement();
		EnterRule("tryCatchStatement", 55);
		TraceIn("tryCatchStatement", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken err = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken string_literal257 = default(IToken);
		IToken char_literal258 = default(IToken);
		IToken char_literal259 = default(IToken);
		IToken string_literal260 = default(IToken);
		IToken string_literal261 = default(IToken);
		IToken SEMI263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> t = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> f = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expression262 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree err_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree string_literal257_tree = default(CommonTree);
		CommonTree char_literal258_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree SEMI263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "tryCatchStatement");
		DebugLocation(478, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:2: ( 'try' t= block ( ( 'catch' ( '(' err= IDENTIFIER ')' )? b= block ) | ( 'finally' f= block ) ) -> ^( TRY_CATCH $t ^( TRY_CATCH_CASE ( $b)? ( $err)? ) ^( TRY_CATCH_FINAL ( $f)? ) ) | 'throw' expression SEMI -> ^( TRY_CATCH_TRHOW expression ) )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==143))
			{
				alt78 = 1;
			}
			else if ((LA78_0==142))
			{
				alt78 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:4: 'try' t= block ( ( 'catch' ( '(' err= IDENTIFIER ')' )? b= block ) | ( 'finally' f= block ) )
				{
				DebugLocation(479, 4);
				string_literal256=(IToken)Match(input,143,Follow._143_in_tryCatchStatement3312);  
				stream_143.Add(string_literal256);

				DebugLocation(479, 11);
				PushFollow(Follow._block_in_tryCatchStatement3316);
				t=block();
				PopFollow();

				stream_block.Add(t.Tree);
				DebugLocation(479, 18);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:18: ( ( 'catch' ( '(' err= IDENTIFIER ')' )? b= block ) | ( 'finally' f= block ) )
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==128))
				{
					alt77 = 1;
				}
				else if ((LA77_0==132))
				{
					alt77 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:20: ( 'catch' ( '(' err= IDENTIFIER ')' )? b= block )
					{
					DebugLocation(479, 20);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:20: ( 'catch' ( '(' err= IDENTIFIER ')' )? b= block )
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:21: 'catch' ( '(' err= IDENTIFIER ')' )? b= block
					{
					DebugLocation(479, 21);
					string_literal257=(IToken)Match(input,128,Follow._128_in_tryCatchStatement3321);  
					stream_128.Add(string_literal257);

					DebugLocation(479, 29);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:29: ( '(' err= IDENTIFIER ')' )?
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, false);
					int LA76_0 = input.LA(1);

					if ((LA76_0==LPAREN))
					{
						alt76 = 1;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:30: '(' err= IDENTIFIER ')'
						{
						DebugLocation(479, 30);
						char_literal258=(IToken)Match(input,LPAREN,Follow._LPAREN_in_tryCatchStatement3324);  
						stream_LPAREN.Add(char_literal258);

						DebugLocation(479, 37);
						err=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_tryCatchStatement3328);  
						stream_IDENTIFIER.Add(err);

						DebugLocation(479, 49);
						char_literal259=(IToken)Match(input,RPAREN,Follow._RPAREN_in_tryCatchStatement3330);  
						stream_RPAREN.Add(char_literal259);


						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(479, 57);
					PushFollow(Follow._block_in_tryCatchStatement3337);
					b=block();
					PopFollow();

					stream_block.Add(b.Tree);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:67: ( 'finally' f= block )
					{
					DebugLocation(479, 67);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:67: ( 'finally' f= block )
					DebugEnterAlt(1);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:479:68: 'finally' f= block
					{
					DebugLocation(479, 68);
					string_literal260=(IToken)Match(input,132,Follow._132_in_tryCatchStatement3343);  
					stream_132.Add(string_literal260);

					DebugLocation(479, 79);
					PushFollow(Follow._block_in_tryCatchStatement3347);
					f=block();
					PopFollow();

					stream_block.Add(f.Tree);

					}


					}
					break;

				}
				} finally { DebugExitSubRule(77); }



				{
				// AST REWRITE
				// elements: b, f, t, err
				// token labels: err
				// rule labels: f, retval, t, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_err=new RewriteRuleITokenStream(adaptor,"token err",err);
				RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 480:3: -> ^( TRY_CATCH $t ^( TRY_CATCH_CASE ( $b)? ( $err)? ) ^( TRY_CATCH_FINAL ( $f)? ) )
				{
					DebugLocation(480, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:480:6: ^( TRY_CATCH $t ^( TRY_CATCH_CASE ( $b)? ( $err)? ) ^( TRY_CATCH_FINAL ( $f)? ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(480, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY_CATCH, "TRY_CATCH"), root_1);

					DebugLocation(480, 19);
					adaptor.AddChild(root_1, stream_t.NextTree());
					DebugLocation(480, 21);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:480:21: ^( TRY_CATCH_CASE ( $b)? ( $err)? )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(480, 23);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY_CATCH_CASE, "TRY_CATCH_CASE"), root_2);

					DebugLocation(480, 39);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:480:39: ( $b)?
					if (stream_b.HasNext)
					{
						DebugLocation(480, 39);
						adaptor.AddChild(root_2, stream_b.NextTree());

					}
					stream_b.Reset();
					DebugLocation(480, 43);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:480:43: ( $err)?
					if (stream_err.HasNext)
					{
						DebugLocation(480, 43);
						adaptor.AddChild(root_2, stream_err.NextNode());

					}
					stream_err.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(480, 49);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:480:49: ^( TRY_CATCH_FINAL ( $f)? )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(480, 51);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY_CATCH_FINAL, "TRY_CATCH_FINAL"), root_2);

					DebugLocation(480, 68);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:480:68: ( $f)?
					if (stream_f.HasNext)
					{
						DebugLocation(480, 68);
						adaptor.AddChild(root_2, stream_f.NextTree());

					}
					stream_f.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:481:4: 'throw' expression SEMI
				{
				DebugLocation(481, 4);
				string_literal261=(IToken)Match(input,142,Follow._142_in_tryCatchStatement3386);  
				stream_142.Add(string_literal261);

				DebugLocation(481, 12);
				PushFollow(Follow._expression_in_tryCatchStatement3388);
				expression262=expression();
				PopFollow();

				stream_expression.Add(expression262.Tree);
				DebugLocation(481, 23);
				SEMI263=(IToken)Match(input,SEMI,Follow._SEMI_in_tryCatchStatement3390);  
				stream_SEMI.Add(SEMI263);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 482:3: -> ^( TRY_CATCH_TRHOW expression )
				{
					DebugLocation(482, 6);
					// E:\\dotnet-projects\\ReoScript\\ReoScript.g:482:6: ^( TRY_CATCH_TRHOW expression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(482, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TRY_CATCH_TRHOW, "TRY_CATCH_TRHOW"), root_1);

					DebugLocation(482, 24);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryCatchStatement", 55);
			LeaveRule("tryCatchStatement", 55);
			LeaveRule_tryCatchStatement();
		}
		DebugLocation(483, 1);
		} finally { DebugExitRule(GrammarFileName, "tryCatchStatement"); }
		return retval;

	}
	// $ANTLR end "tryCatchStatement"

	partial void EnterRule_terminalStatement();
	partial void LeaveRule_terminalStatement();

	// $ANTLR start "terminalStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:485:1: terminalStatement : ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI ;
	[GrammarRule("terminalStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> terminalStatement()
	{
		EnterRule_terminalStatement();
		EnterRule("terminalStatement", 56);
		TraceIn("terminalStatement", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal265 = default(IToken);
		IToken string_literal266 = default(IToken);
		IToken SEMI267 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> returnStatement264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		CommonTree SEMI267_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_returnStatement=new RewriteRuleSubtreeStream(adaptor,"rule returnStatement");
		try { DebugEnterRule(GrammarFileName, "terminalStatement");
		DebugLocation(485, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:2: ( ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE ) SEMI
			{
			DebugLocation(486, 4);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:4: ( returnStatement -> returnStatement | ( 'break' ) -> BREAK | ( 'continue' ) -> CONTINUE )
			int alt79=3;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			switch (input.LA(1))
			{
			case 139:
				{
				alt79 = 1;
				}
				break;
			case 126:
				{
				alt79 = 2;
				}
				break;
			case 129:
				{
				alt79 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:6: returnStatement
				{
				DebugLocation(486, 6);
				PushFollow(Follow._returnStatement_in_terminalStatement3414);
				returnStatement264=returnStatement();
				PopFollow();

				stream_returnStatement.Add(returnStatement264.Tree);


				{
				// AST REWRITE
				// elements: returnStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 486:22: -> returnStatement
				{
					DebugLocation(486, 25);
					adaptor.AddChild(root_0, stream_returnStatement.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:43: ( 'break' )
				{
				DebugLocation(486, 43);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:43: ( 'break' )
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:44: 'break'
				{
				DebugLocation(486, 44);
				string_literal265=(IToken)Match(input,126,Follow._126_in_terminalStatement3423);  
				stream_126.Add(string_literal265);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 486:52: -> BREAK
				{
					DebugLocation(486, 54);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(BREAK, "BREAK"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:62: ( 'continue' )
				{
				DebugLocation(486, 62);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:62: ( 'continue' )
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:486:63: 'continue'
				{
				DebugLocation(486, 63);
				string_literal266=(IToken)Match(input,129,Follow._129_in_terminalStatement3431);  
				stream_129.Add(string_literal266);


				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 486:74: -> CONTINUE
				{
					DebugLocation(486, 76);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(CONTINUE, "CONTINUE"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(486, 87);
			SEMI267=(IToken)Match(input,SEMI,Follow._SEMI_in_terminalStatement3438);  
			stream_SEMI.Add(SEMI267);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("terminalStatement", 56);
			LeaveRule("terminalStatement", 56);
			LeaveRule_terminalStatement();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "terminalStatement"); }
		return retval;

	}
	// $ANTLR end "terminalStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:489:1: returnStatement : 'return' ( expression )? -> ^( RETURN ( expression )? ) ;
	[GrammarRule("returnStatement")]
	private AstParserRuleReturnScope<CommonTree, IToken> returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 57);
		TraceIn("returnStatement", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal268 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expression269 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal268_tree = default(CommonTree);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(489, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:490:2: ( 'return' ( expression )? -> ^( RETURN ( expression )? ) )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:490:4: 'return' ( expression )?
			{
			DebugLocation(490, 4);
			string_literal268=(IToken)Match(input,139,Follow._139_in_returnStatement3449);  
			stream_139.Add(string_literal268);

			DebugLocation(490, 13);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:490:13: ( expression )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==BINARY_LITERATE||LA80_0==DECREMENT||(LA80_0>=HEX_LITERATE && LA80_0<=IDENTIFIER)||LA80_0==INCREMENT||(LA80_0>=LBRACE && LA80_0<=LCURLY)||LA80_0==LESS_THAN||(LA80_0>=LIT_FALSE && LA80_0<=LIT_TRUE)||LA80_0==LPAREN||LA80_0==MINUS||LA80_0==NAN||LA80_0==NOT||LA80_0==NUMBER_LITERATE||LA80_0==PLUS||LA80_0==STRING_LITERATE||LA80_0==THIS||LA80_0==UNDEFINED||LA80_0==134||LA80_0==138||LA80_0==144||LA80_0==146))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:490:13: expression
				{
				DebugLocation(490, 13);
				PushFollow(Follow._expression_in_returnStatement3451);
				expression269=expression();
				PopFollow();

				stream_expression.Add(expression269.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 490:25: -> ^( RETURN ( expression )? )
			{
				DebugLocation(490, 28);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:490:28: ^( RETURN ( expression )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(490, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(RETURN, "RETURN"), root_1);

				DebugLocation(490, 37);
				// E:\\dotnet-projects\\ReoScript\\ReoScript.g:490:37: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(490, 37);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 57);
			LeaveRule("returnStatement", 57);
			LeaveRule_returnStatement();
		}
		DebugLocation(491, 1);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:496:1: literal : THIS ;
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, IToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 58);
		TraceIn("literal", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken THIS270 = default(IToken);

		CommonTree THIS270_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(496, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:497:2: ( THIS )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:498:2: THIS
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(498, 2);
			THIS270=(IToken)Match(input,THIS,Follow._THIS_in_literal3478); 
			THIS270_tree = (CommonTree)adaptor.Create(THIS270);
			adaptor.AddChild(root_0, THIS270_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 58);
			LeaveRule("literal", 58);
			LeaveRule_literal();
		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_constLiteral();
	partial void LeaveRule_constLiteral();

	// $ANTLR start "constLiteral"
	// E:\\dotnet-projects\\ReoScript\\ReoScript.g:501:1: constLiteral : ( LIT_TRUE | LIT_FALSE | NUMBER_LITERATE | STRING_LITERATE | LIT_NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE | NAN );
	[GrammarRule("constLiteral")]
	private AstParserRuleReturnScope<CommonTree, IToken> constLiteral()
	{
		EnterRule_constLiteral();
		EnterRule("constLiteral", 59);
		TraceIn("constLiteral", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set271 = default(IToken);

		CommonTree set271_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "constLiteral");
		DebugLocation(501, 1);
		try
		{
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:502:2: ( LIT_TRUE | LIT_FALSE | NUMBER_LITERATE | STRING_LITERATE | LIT_NULL | UNDEFINED | HEX_LITERATE | BINARY_LITERATE | NAN )
			DebugEnterAlt(1);
			// E:\\dotnet-projects\\ReoScript\\ReoScript.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(502, 2);

			set271=(IToken)input.LT(1);
			if (input.LA(1)==BINARY_LITERATE||input.LA(1)==HEX_LITERATE||(input.LA(1)>=LIT_FALSE && input.LA(1)<=LIT_TRUE)||input.LA(1)==NAN||input.LA(1)==NUMBER_LITERATE||input.LA(1)==STRING_LITERATE||input.LA(1)==UNDEFINED)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set271));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constLiteral", 59);
			LeaveRule("constLiteral", 59);
			LeaveRule_constLiteral();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "constLiteral"); }
		return retval;

	}
	// $ANTLR end "constLiteral"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_script547 = new BitSet(new ulong[]{0x1A98000200100002UL,0x40A100401A022047UL,0x2FDEAUL});
		public static readonly BitSet _function_define_in_function_defines563 = new BitSet(new ulong[]{0x200000000000002UL,0x1A000000UL,0x40UL});
		public static readonly BitSet _memberModifier_in_function_define579 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_function_define582 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_function_define586 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_function_define588 = new BitSet(new ulong[]{0x10000000000000UL,0x200000000UL});
		public static readonly BitSet _parameterDeclarationList_in_function_define592 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_function_define595 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _functionBody_in_function_define599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_anonymous_function_define630 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define632 = new BitSet(new ulong[]{0x10000000000000UL,0x200000000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define636 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define639 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _functionBody_in_anonymous_function_define643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_anonymous_function_define655 = new BitSet(new ulong[]{0x10000000000000UL,0x200000000UL});
		public static readonly BitSet _parameterDeclarationList_in_anonymous_function_define659 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_define662 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_anonymous_function_define664 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _functionBody_in_anonymous_function_define674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_anonymous_function_define711 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_anonymous_function_define713 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _functionBody_in_anonymous_function_define723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_anonymous_function_define741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList764 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_parameterDeclarationList767 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_parameterDeclarationList770 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _LCURLY_in_block784 = new BitSet(new ulong[]{0x1A98000200100000UL,0x40A100409A022047UL,0x2FDEAUL});
		public static readonly BitSet _statement_in_block786 = new BitSet(new ulong[]{0x1A98000200100000UL,0x40A100409A022047UL,0x2FDEAUL});
		public static readonly BitSet _RCURLY_in_block789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_functionBody813 = new BitSet(new ulong[]{0x1A98000200100000UL,0x40A100409A022047UL,0x2FDEAUL});
		public static readonly BitSet _statement_in_functionBody820 = new BitSet(new ulong[]{0x1A98000200100000UL,0x40A100409A022047UL,0x2FDEAUL});
		public static readonly BitSet _RCURLY_in_functionBody827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _importStatement_in_statement857 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_statement859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_statement865 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_statement867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_define_in_statement873 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_statement875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tagTemplateDefine_in_statement883 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_statement885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embeddedStatement_in_statement892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_importStatement903 = new BitSet(new ulong[]{0x10000000000000UL,0x4000000000UL});
		public static readonly BitSet _namespaceDeclare_in_importStatement914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERATE_in_importStatement929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_namespaceDeclare954 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _DOT_in_namespaceDeclare957 = new BitSet(new ulong[]{0x10000000000000UL,0x1000UL});
		public static readonly BitSet _set_in_namespaceDeclare959 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _block_in_embeddedStatement980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_embeddedStatement985 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_embeddedStatement987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifelse_in_embeddedStatement993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_embeddedStatement998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreachStatement_in_embeddedStatement1003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_embeddedStatement1008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_embeddedStatement1013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _terminalStatement_in_embeddedStatement1018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryCatchStatement_in_embeddedStatement1023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocationExpression_in_statementExpression1038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_statementExpression1043 = new BitSet(new ulong[]{0x1818000000100000UL,0x81004000022047UL,0x40UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_statementExpression1060 = new BitSet(new ulong[]{0x1818000000100000UL,0x81004000022047UL,0x40UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_statementExpression1078 = new BitSet(new ulong[]{0x1818000000100000UL,0x81004000022047UL,0x40UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_statementExpression1097 = new BitSet(new ulong[]{0x1818000000100000UL,0x81004000022047UL,0x40UL});
		public static readonly BitSet _primaryExpression_in_statementExpression1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberModifier_in_localMemberVariableDeclaration1122 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _TYPE_in_localMemberVariableDeclaration1125 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration1127 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_localMemberVariableDeclaration1130 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localMemberVariableDeclaration1132 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _TYPE_in_localVariableDeclaration1169 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration1171 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration1174 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _localVariableDeclarationAssignment_in_localVariableDeclaration1176 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableDeclarationAssignment1204 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_localVariableDeclarationAssignment1207 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_localVariableDeclarationAssignment1211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_invocationExpression1260 = new BitSet(new ulong[]{0x800002000FFE02UL});
		public static readonly BitSet _ASSIGNMENT_in_invocationExpression1271 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_PLUS_in_invocationExpression1292 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MINUS_in_invocationExpression1320 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_MUL_in_invocationExpression1348 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_DIV_in_invocationExpression1376 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REM_in_invocationExpression1404 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_AND_in_invocationExpression1432 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_OR_in_invocationExpression1460 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_REV_in_invocationExpression1488 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_LSHIFT_in_invocationExpression1516 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_RSHIFT_in_invocationExpression1543 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_invocationExpression1545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_invocationExpression1570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_invocationExpression1591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1635 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_statementExpressionList1638 = new BitSet(new ulong[]{0x1898000200100000UL,0x81004000022047UL,0x448UL});
		public static readonly BitSet _statementExpression_in_statementExpressionList1641 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _tag_in_expression1668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression1680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_expression1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_range_literal1699 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_range_literal1701 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_range_literal1705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList1729 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _COMMA_in_expressionList1732 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_expressionList1735 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression1749 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _ASSIGNMENT_in_assignmentExpression1752 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_assignmentExpression1755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression1769 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _CONDITION_in_conditionalExpression1772 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_conditionalExpression1775 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression1777 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_conditionalExpression1780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1793 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _LOGICAL_OR_in_conditionalOrExpression1796 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression1799 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1812 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _LOGICAL_AND_in_conditionalAndExpression1815 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression1818 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1833 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _OR_in_inclusiveOrExpression1836 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression1839 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1853 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _XOR_in_exclusiveOrExpression1856 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression1859 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _instanceOfExpression_in_andExpression1873 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1876 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _instanceOfExpression_in_andExpression1879 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _equalityExpression_in_instanceOfExpression1893 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression1896 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_instanceOfExpression1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1913 = new BitSet(new ulong[]{0x4000000002UL,0x3000010000UL});
		public static readonly BitSet _set_in_equalityExpression1916 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression1933 = new BitSet(new ulong[]{0x4000000002UL,0x3000010000UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1948 = new BitSet(new ulong[]{0x6006000000000002UL});
		public static readonly BitSet _set_in_relationalExpression1951 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression1968 = new BitSet(new ulong[]{0x6006000000000002UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1982 = new BitSet(new ulong[]{0x2UL,0x400000080UL});
		public static readonly BitSet _set_in_shiftExpression1985 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression1992 = new BitSet(new ulong[]{0x2UL,0x400000080UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression2007 = new BitSet(new ulong[]{0x2UL,0x200400UL});
		public static readonly BitSet _set_in_additiveExpression2010 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression2017 = new BitSet(new ulong[]{0x2UL,0x200400UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression2031 = new BitSet(new ulong[]{0x800000002UL,0x1800UL});
		public static readonly BitSet _set_in_multiplicativeExpression2034 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression2047 = new BitSet(new ulong[]{0x800000002UL,0x1800UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2066 = new BitSet(new ulong[]{0x80000200000002UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression2076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression2098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCREMENT_in_unaryExpression2136 = new BitSet(new ulong[]{0x1818000000100000UL,0x81004000022047UL,0x40UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECREMENT_in_unaryExpression2155 = new BitSet(new ulong[]{0x1818000000100000UL,0x81004000022047UL,0x40UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_unaryExpression2174 = new BitSet(new ulong[]{0x1818000000100000UL,0x81004000022047UL,0x40UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression2176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_unaryExpression2194 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _MINUS_in_unaryExpression2198 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _NOT_in_unaryExpression2202 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _146_in_unaryExpression2206 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression2209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_unaryExpression2230 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_primaryExpression2259 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _literal_in_primaryExpression2275 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _constLiteral_in_primaryExpression2293 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _array_literal_in_primaryExpression2312 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _anonymous_function_define_in_primaryExpression2326 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2337 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_primaryExpression2339 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2341 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _LPAREN_in_primaryExpression2357 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100420022A447UL,0x50440UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2365 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _expressionList_in_primaryExpression2384 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression2386 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _DOT_in_primaryExpression2418 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression2420 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _LBRACE_in_primaryExpression2440 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_primaryExpression2444 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _RBRACE_in_primaryExpression2446 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _object_literal_in_primaryExpression2467 = new BitSet(new ulong[]{0x1800001000000002UL,0x40UL});
		public static readonly BitSet _object_literal_in_primaryExpression2493 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _DOT_in_primaryExpression2508 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primaryExpression2510 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _LESS_THAN_in_tag2540 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2545 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_tag2547 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2553 = new BitSet(new ulong[]{0x14000000000000UL,0x800000000000000UL});
		public static readonly BitSet _tagAttr_in_tag2555 = new BitSet(new ulong[]{0x14000000000000UL,0x800000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2565 = new BitSet(new ulong[]{0x5A98000200100000UL,0x50A100401A022047UL,0x2FDEAUL});
		public static readonly BitSet _tagStmt_in_tag2569 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_tag2572 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2575 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_tag2577 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tag2581 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tag2583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_tag2589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_tagStmt2636 = new BitSet(new ulong[]{0x5A98000200100002UL,0x40A100401A022047UL,0x2FDEAUL});
		public static readonly BitSet _tag_in_tagStmt2640 = new BitSet(new ulong[]{0x5A98000200100002UL,0x40A100401A022047UL,0x2FDEAUL});
		public static readonly BitSet _IDENTIFIER_in_tagAttr2655 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _ASSIGNMENT_in_tagAttr2657 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _unaryExpression_in_tagAttr2661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberModifier_in_tagTemplateDefine2687 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_tagTemplateDefine2690 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _LESS_THAN_in_tagTemplateDefine2692 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tagTemplateDefine2696 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _GREAT_THAN_in_tagTemplateDefine2698 = new BitSet(new ulong[]{0x4000000000000000UL,0x40UL});
		public static readonly BitSet _LPAREN_in_tagTemplateDefine2702 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _parameterDeclarationList_in_tagTemplateDefine2706 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_tagTemplateDefine2708 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _tag_in_tagTemplateDefine2713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variable2745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_array_literal2757 = new BitSet(new ulong[]{0x5898000204100000UL,0x8100404022A447UL,0x50440UL});
		public static readonly BitSet _expressionList_in_array_literal2759 = new BitSet(new ulong[]{0x4000000UL,0x40000000UL});
		public static readonly BitSet _COMMA_in_array_literal2762 = new BitSet(new ulong[]{0x4000000UL,0x40000000UL});
		public static readonly BitSet _RBRACE_in_array_literal2765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_object_literal2788 = new BitSet(new ulong[]{0x10000004000000UL,0x4080000000UL});
		public static readonly BitSet _keypair_in_object_literal2790 = new BitSet(new ulong[]{0x4000000UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_object_literal2794 = new BitSet(new ulong[]{0x10000000000000UL,0x4000000000UL});
		public static readonly BitSet _keypair_in_object_literal2796 = new BitSet(new ulong[]{0x4000000UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_object_literal2800 = new BitSet(new ulong[]{0x4000000UL,0x80000000UL});
		public static readonly BitSet _RCURLY_in_object_literal2803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_keypair2828 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _STRING_LITERATE_in_keypair2830 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_keypair2833 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_keypair2836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_jsonParse2852 = new BitSet(new ulong[]{0x10000004000000UL,0x4080000000UL});
		public static readonly BitSet _jsonParse_keypair_in_jsonParse2854 = new BitSet(new ulong[]{0x4000000UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_jsonParse2859 = new BitSet(new ulong[]{0x10000000000000UL,0x4000000000UL});
		public static readonly BitSet _jsonParse_keypair_in_jsonParse2861 = new BitSet(new ulong[]{0x4000000UL,0x80000000UL});
		public static readonly BitSet _COMMA_in_jsonParse2866 = new BitSet(new ulong[]{0x4000000UL,0x80000000UL});
		public static readonly BitSet _RCURLY_in_jsonParse2869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_jsonParse_keypair2884 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _STRING_LITERATE_in_jsonParse_keypair2888 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_jsonParse_keypair2891 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_jsonParse_keypair2896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_ifelse2913 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_ifelse2915 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _conditionalOrExpression_in_ifelse2917 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_ifelse2919 = new BitSet(new ulong[]{0x1898000200100000UL,0x4081004000022047UL,0x2DCEAUL});
		public static readonly BitSet _embeddedStatement_in_ifelse2923 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _ELSE_in_ifelse2926 = new BitSet(new ulong[]{0x1898000200100000UL,0x4081004000022047UL,0x2DCEAUL});
		public static readonly BitSet _embeddedStatement_in_ifelse2930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_forStatement2964 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forStatement2966 = new BitSet(new ulong[]{0x1898000200100000UL,0xA1004800022047UL,0x448UL});
		public static readonly BitSet _forInit_in_forStatement2968 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_forStatement2971 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100480022A447UL,0x50440UL});
		public static readonly BitSet _conditionalOrExpression_in_forStatement2973 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_forStatement2976 = new BitSet(new ulong[]{0x1898000200100000UL,0x81004200022047UL,0x448UL});
		public static readonly BitSet _statementExpressionList_in_forStatement2978 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_forStatement2981 = new BitSet(new ulong[]{0x1898000200100000UL,0x4081004000022047UL,0x2DCEAUL});
		public static readonly BitSet _embeddedStatement_in_forStatement2983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit3055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementExpressionList_in_forInit3061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_foreachStatement3073 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_foreachStatement3075 = new BitSet(new ulong[]{0x10000000000000UL,0x20000000000000UL});
		public static readonly BitSet _TYPE_in_foreachStatement3079 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_foreachStatement3082 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_foreachStatement3084 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_foreachStatement3086 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_foreachStatement3088 = new BitSet(new ulong[]{0x1898000200100000UL,0x4081004000022047UL,0x2DCEAUL});
		public static readonly BitSet _embeddedStatement_in_foreachStatement3090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_whileStatement3119 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_whileStatement3121 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _conditionalOrExpression_in_whileStatement3124 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_whileStatement3127 = new BitSet(new ulong[]{0x1898000200100000UL,0x4081004000022047UL,0x2DCEAUL});
		public static readonly BitSet _embeddedStatement_in_whileStatement3129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_switchStatement3195 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_switchStatement3197 = new BitSet(new ulong[]{0x1898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _conditionalOrExpression_in_switchStatement3199 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_switchStatement3201 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _LCURLY_in_switchStatement3206 = new BitSet(new ulong[]{0x1A98000200100000UL,0xC0A100409A022047UL,0x2FDEEUL});
		public static readonly BitSet _switchCaseStatementList_in_switchStatement3208 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _RCURLY_in_switchStatement3211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchCaseCondition_in_switchCaseStatementList3237 = new BitSet(new ulong[]{0x1A98000200100002UL,0xC0A100401A022047UL,0x2FDEEUL});
		public static readonly BitSet _127_in_switchCaseCondition3255 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_switchCaseCondition3257 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition3259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_switchCaseCondition3274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_switchCaseCondition3288 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchCaseCondition3290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_tryCatchStatement3312 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _block_in_tryCatchStatement3316 = new BitSet(new ulong[]{0x0UL,0x0UL,0x11UL});
		public static readonly BitSet _128_in_tryCatchStatement3321 = new BitSet(new ulong[]{0x1000000000000000UL,0x40UL});
		public static readonly BitSet _LPAREN_in_tryCatchStatement3324 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_tryCatchStatement3328 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _RPAREN_in_tryCatchStatement3330 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _block_in_tryCatchStatement3337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_tryCatchStatement3343 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _block_in_tryCatchStatement3347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_tryCatchStatement3386 = new BitSet(new ulong[]{0x5898000200100000UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_tryCatchStatement3388 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_tryCatchStatement3390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_terminalStatement3414 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _126_in_terminalStatement3423 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _129_in_terminalStatement3431 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SEMI_in_terminalStatement3438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_returnStatement3449 = new BitSet(new ulong[]{0x5898000200100002UL,0x8100400022A447UL,0x50440UL});
		public static readonly BitSet _expression_in_returnStatement3451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_literal3478 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Unvell.ReoScript
